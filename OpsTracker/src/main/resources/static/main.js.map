{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/clientdialog/clientdialog.component.css","webpack:///./src/app/clientdialog/clientdialog.component.html","webpack:///./src/app/clientdialog/clientdialog.component.ts","webpack:///./src/app/clientupdate/clientupdate.component.css","webpack:///./src/app/clientupdate/clientupdate.component.html","webpack:///./src/app/clientupdate/clientupdate.component.ts","webpack:///./src/app/clientview/clientview.component.css","webpack:///./src/app/clientview/clientview.component.html","webpack:///./src/app/clientview/clientview.component.ts","webpack:///./src/app/data.service.ts","webpack:///./src/app/employdialog/employdialog.component.css","webpack:///./src/app/employdialog/employdialog.component.html","webpack:///./src/app/employdialog/employdialog.component.ts","webpack:///./src/app/employeeupdate/employeeupdate.component.css","webpack:///./src/app/employeeupdate/employeeupdate.component.html","webpack:///./src/app/employeeupdate/employeeupdate.component.ts","webpack:///./src/app/emplyeeview/emplyeeview.component.css","webpack:///./src/app/emplyeeview/emplyeeview.component.html","webpack:///./src/app/emplyeeview/emplyeeview.component.ts","webpack:///./src/app/escalation/escalation.component.css","webpack:///./src/app/escalation/escalation.component.html","webpack:///./src/app/escalation/escalation.component.ts","webpack:///./src/app/escalationdialog/escalationdialog.component.css","webpack:///./src/app/escalationdialog/escalationdialog.component.html","webpack:///./src/app/escalationdialog/escalationdialog.component.ts","webpack:///./src/app/escalationmainview/escalationmainview.component.css","webpack:///./src/app/escalationmainview/escalationmainview.component.html","webpack:///./src/app/escalationmainview/escalationmainview.component.ts","webpack:///./src/app/escalationupdate/escalationupdate.component.css","webpack:///./src/app/escalationupdate/escalationupdate.component.html","webpack:///./src/app/escalationupdate/escalationupdate.component.ts","webpack:///./src/app/escalationview/escalationview.component.css","webpack:///./src/app/escalationview/escalationview.component.html","webpack:///./src/app/escalationview/escalationview.component.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/masterdata/masterdata.component.css","webpack:///./src/app/masterdata/masterdata.component.html","webpack:///./src/app/masterdata/masterdata.component.ts","webpack:///./src/app/masterview/masterview.component.css","webpack:///./src/app/masterview/masterview.component.html","webpack:///./src/app/masterview/masterview.component.ts","webpack:///./src/app/models/employ.model.ts","webpack:///./src/app/models/machinetransaction.model.ts","webpack:///./src/app/models/manpower.model.ts","webpack:///./src/app/models/manpowertransaction.model.ts","webpack:///./src/app/models/materialtransaction.model.ts","webpack:///./src/app/models/project.model.ts","webpack:///./src/app/models/site.model.ts","webpack:///./src/app/my-nav/my-nav.component.css","webpack:///./src/app/my-nav/my-nav.component.html","webpack:///./src/app/my-nav/my-nav.component.ts","webpack:///./src/app/my-nav/my-nav.service.ts","webpack:///./src/app/opstracker/opstracker.component.css","webpack:///./src/app/opstracker/opstracker.component.html","webpack:///./src/app/opstracker/opstracker.component.ts","webpack:///./src/app/pagination/pagination.component.css","webpack:///./src/app/pagination/pagination.component.html","webpack:///./src/app/pagination/pagination.component.ts","webpack:///./src/app/report/report.component.css","webpack:///./src/app/report/report.component.html","webpack:///./src/app/report/report.component.ts","webpack:///./src/app/siteupdate/siteupdate.component.css","webpack:///./src/app/siteupdate/siteupdate.component.html","webpack:///./src/app/siteupdate/siteupdate.component.ts","webpack:///./src/app/siteview/siteview.component.css","webpack:///./src/app/siteview/siteview.component.html","webpack:///./src/app/siteview/siteview.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {Routes, RouterModule} from '@angular/router';\r\nimport {EscalationComponent} from './escalation/escalation.component';\r\nimport {OpstrackerComponent} from './opstracker/opstracker.component';\r\nimport {MasterdataComponent} from './masterdata/masterdata.component';\r\nimport {ReportComponent} from './report/report.component';\r\nimport {SiteComponent} from './site/site.component';\r\nimport {LoginComponent} from './login/login.component';\r\nimport {MasterviewComponent} from './masterview/masterview.component';\r\nimport {EmplyeeviewComponent} from './emplyeeview/emplyeeview.component';\r\nimport {ClientviewComponent} from './clientview/clientview.component';\r\nimport {SiteviewComponent} from './siteview/siteview.component';\r\nimport {EscalationviewComponent} from './escalationview/escalationview.component';\r\n\r\nconst routes: Routes = [\r\n{\r\n  path: 'masterdata',\r\n  component : MasterdataComponent\r\n},\r\n{\r\n  path: 'escalation',\r\n  component : EscalationComponent\r\n},\r\n{\r\n  path: 'opstracker',\r\n  component : OpstrackerComponent\r\n},\r\n{\r\n  path: 'report',\r\n  component : ReportComponent\r\n},\r\n{\r\n  path: '',\r\n  component : LoginComponent\r\n},\r\n{\r\npath: 'masterview',\r\n  component : MasterviewComponent\r\n},\r\n{\r\npath: 'emplyeeview',\r\n  component : EmplyeeviewComponent\r\n},\r\n{\r\npath: 'clientview',\r\n  component : ClientviewComponent\r\n},\r\n{\r\npath: 'siteview',\r\n  component : SiteviewComponent\r\n},\r\n{\r\npath: 'escalationview',\r\n  component : EscalationviewComponent\r\n}\r\n];\r\n\r\n@NgModule({\r\n  imports : [RouterModule.forRoot(routes)],\r\n  exports : [RouterModule]\r\n}\r\n  )\r\n\r\n\r\nexport class AppRoutingModule { }\r\n// tslint:disable-next-line:max-line-length\r\nexport const routingComponents = [EscalationComponent, ReportComponent, OpstrackerComponent, MasterdataComponent , LoginComponent , MasterviewComponent, EmplyeeviewComponent, ClientviewComponent, SiteviewComponent, EscalationviewComponent ];\r\n","module.exports = \"\"","module.exports = \"\\r\\n\\r\\n \\r\\n  <app-my-nav ></app-my-nav>\\r\\n\\r\\n\"","import { Component } from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport { Toolbarservice } from './my-nav/my-nav.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html' ,\r\n  styleUrls: ['./app.component.css'],\r\n  providers: [Toolbarservice]\r\n})\r\nexport class AppComponent {\r\n  title = 'udswebproject';\r\n\r\n  constructor(private activaterouter: ActivatedRoute, private router: Router , public nav: Toolbarservice) {\r\n     /*  if (this.router.url === '/masterdata') {\r\n        this.nav.visible = false;\r\n\r\n } */\r\n\r\n  }\r\n\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppRoutingModule , routingComponents } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MyNavComponent } from './my-nav/my-nav.component';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { MatToolbarModule, MatButtonModule, MatSidenavModule, MatIconModule, MatListModule } from '@angular/material';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {FlexLayoutModule} from '@angular/flex-layout';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport { MatNativeDateModule, NativeDateAdapter, DateAdapter} from '@angular/material';\r\nimport { MasterviewComponent } from './masterview/masterview.component';\r\nimport {MatTableModule} from '@angular/material';\r\nimport { MatPaginatorModule } from '@angular/material';\r\nimport { MatSortModule } from '@angular/material';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { MasterdataComponent } from '../app/masterdata/masterdata.component';\r\n\r\nimport {DataSource} from '@angular/cdk/table';\r\nimport { CdkTableModule } from '@angular/cdk/table';\r\nimport { EmplyeeviewComponent } from './emplyeeview/emplyeeview.component';\r\nimport { ClientviewComponent } from './clientview/clientview.component';\r\nimport { SiteviewComponent } from './siteview/siteview.component';\r\nimport { EscalationviewComponent } from './escalationview/escalationview.component';\r\n\r\nimport { EmployeeupdateComponent } from './employeeupdate/employeeupdate.component';\r\nimport { ClientupdateComponent } from './clientupdate/clientupdate.component';\r\nimport { SiteupdateComponent } from './siteupdate/siteupdate.component';\r\nimport { EscalationupdateComponent } from './escalationupdate/escalationupdate.component';\r\n\r\nimport { MatDialogModule } from '@angular/material';\r\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\r\nimport { PaginationComponent } from './pagination/pagination.component';\r\nimport {EmploydialogComponent} from './employdialog/employdialog.component';\r\nimport { ClientdialogComponent } from './clientdialog/clientdialog.component';\r\nimport { EscalationdialogComponent } from './escalationdialog/escalationdialog.component';\r\nimport { EscalationmainviewComponent } from './escalationmainview/escalationmainview.component';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    MyNavComponent,\r\n    routingComponents,\r\n    MasterviewComponent,\r\n    MasterdataComponent,\r\n    EmplyeeviewComponent,\r\n    ClientviewComponent,\r\n    SiteviewComponent,\r\n    EscalationviewComponent,\r\n   \r\n    EmployeeupdateComponent,\r\n    ClientupdateComponent,\r\n    SiteupdateComponent,\r\n    EscalationupdateComponent,\r\n    PaginationComponent,\r\n    EmploydialogComponent,\r\n    ClientdialogComponent,\r\n    EscalationdialogComponent,\r\n    EscalationmainviewComponent\r\n   \r\n\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    LayoutModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    AppRoutingModule,\r\n    MatCheckboxModule,\r\n    MatInputModule,\r\n    MatTabsModule,\r\n    MatAutocompleteModule,\r\n    ReactiveFormsModule,\r\n    FlexLayoutModule,\r\n    MatExpansionModule,\r\n    MatCardModule,\r\n    MatDividerModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    HttpClientModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatProgressSpinnerModule,\r\n    FormsModule,\r\n    MatTableModule,\r\n    HttpClientModule,\r\n    MatDialogModule,\r\n    MatProgressBarModule\r\n\r\n\r\n  ],\r\n  entryComponents: [\r\n    EmploydialogComponent, ClientdialogComponent,EscalationdialogComponent,\r\n  ],\r\n\r\n  providers: [],\r\n  bootstrap: [AppComponent],\r\n  \r\n})\r\nexport class AppModule { }\r\n","module.exports = \"\"","module.exports = \"<div>\\r\\n\\r\\n  <mat-dialog-content>\\r\\n    \\r\\n    <div class=\\\"row\\\" >\\r\\n                          \\r\\n      <mat-form-field class=\\\"example-full-width\\\">\\r\\n          <input matInput placeholder=\\\"Employee Name\\\" [(ngModel)]=\\\"data.name\\\">\\r\\n        </mat-form-field>\\r\\n  \\r\\n  </div>\\r\\n  <div class=\\\"row\\\" >\\r\\n                          \\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input matInput placeholder=\\\"Project Code\\\" [(ngModel)]=\\\"data.projectCode\\\">\\r\\n    </mat-form-field>\\r\\n  \\r\\n  </div>\\r\\n  \\r\\n \\r\\n  \\r\\n   \\r\\n   \\r\\n  </mat-dialog-content>\\r\\n  <mat-dialog-actions>\\r\\n      \\r\\n        <div class=\\\"button-row\\\">\\r\\n                                            \\r\\n          <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postClient()\\\" >Update</button>\\r\\n            <button mat-raised-button color=\\\"accent\\\" (click)=\\\"onCloseCancel()\\\">Cancel</button>\\r\\n            \\r\\n          </div>    \\r\\n  \\r\\n  </mat-dialog-actions>\\r\\n    </div>\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport {MatDialog} from '@angular/material';\r\nimport { MatDialogRef } from '@angular/material';\r\nimport {MAT_DIALOG_DATA} from '@angular/material';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {DataService} from '../data.service';\r\nimport { Client } from '../models/client.model';\r\n@Component({\r\n  selector: 'app-clientdialog',\r\n  templateUrl: './clientdialog.component.html',\r\n  styleUrls: ['./clientdialog.component.css']\r\n})\r\nexport class ClientdialogComponent implements OnInit {\r\n\r\n  constructor(public thisdialogRef: MatDialogRef<ClientdialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n  onCloseConfirm() {\r\n    this.thisdialogRef.close('Confirm');\r\n      }\r\n    \r\n      onCloseCancel() {\r\n    this.thisdialogRef.close('Cancel');\r\n      }\r\n}\r\n","module.exports = \"\"","module.exports = \"<p>\\r\\n  clientupdate works!\\r\\n</p>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-clientupdate',\r\n  templateUrl: './clientupdate.component.html',\r\n  styleUrls: ['./clientupdate.component.css']\r\n})\r\nexport class ClientupdateComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \".algnleft{\\r\\n    margin:20px \\r\\n}\\r\\n.div-left{\\r\\n    float:right;\\r\\n    padding-right:20px;\\r\\n}\\r\\n.mat-cell:nth-child(2), .mat-header-cell:nth-child(2) {\\r\\n    flex: 0 0 200px;\\r\\n}\\r\\n.martop{\\r\\n    margin-top: 14px;\\r\\n}\\r\\n.spinnerabove {\\r\\n    position:absolute;\\r\\n    top:50%;\\r\\n    left:50%;\\r\\n   \\r\\n    z-index: 10;\\r\\n  }\\r\\n  \"","module.exports = \"<div class=\\\"algnleft\\\">\\r\\n    <div class=\\\"div-left\\\"><button mat-mini-fab>\\r\\n        <mat-icon aria-label=\\\"\\\" routerLink=\\\"../masterdata\\\">arrow_back</mat-icon>\\r\\n      </button></div>\\r\\n    \\r\\n       <div class=\\\"example-loading-shade spinnerabove \\\"\\r\\n             *ngIf=\\\"isLoadingResults || isRateLimitReached\\\" >\\r\\n          <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\r\\n          <div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\r\\n            \\r\\n          </div>\\r\\n        </div> \\r\\n    \\r\\n        \\r\\n      \\r\\n          <table mat-table [dataSource]=\\\"client2\\\" class=\\\"mat-elevation-z8\\\"\\r\\n                 matSort matSortActive=\\\"id\\\" matSortDisableClear matSortDirection=\\\"asc\\\" style=\\\"width:100%\\\">\\r\\n            <!-- Number Column -->\\r\\n            \\r\\n            <!-- Title Column -->\\r\\n            <ng-container  matColumnDef=\\\"id\\\">\\r\\n                <th mat-header-cell  *matHeaderCellDef>Id</th>\\r\\n                <td mat-cell *matCellDef=\\\"let row\\\">{{row.id}}</td>\\r\\n              </ng-container>\\r\\n        \\r\\n    \\r\\n            <ng-container  matColumnDef=\\\"name\\\">\\r\\n              <th mat-header-cell  *matHeaderCellDef>Name</th>\\r\\n              <td mat-cell *matCellDef=\\\"let row\\\">{{row.name}}</td>\\r\\n            </ng-container>\\r\\n      \\r\\n            <!-- State Column -->\\r\\n            <ng-container matColumnDef=\\\"code\\\">\\r\\n              <th mat-header-cell *matHeaderCellDef>Project Code</th>\\r\\n              <td mat-cell *matCellDef=\\\"let row\\\">{{row.projectCode}}</td>\\r\\n            </ng-container>\\r\\n      \\r\\n            <!-- Created Column -->\\r\\n            \\r\\n    \\r\\n               <mat-divider></mat-divider> \\r\\n            <ng-container matColumnDef=\\\"actionsColumn\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef>Action</th>\\r\\n                \\r\\n                <mat-cell *matCellDef=\\\"let row\\\">\\r\\n                    <button mat-icon-button>\\r\\n                        <mat-icon matTooltip=\\\"Update\\\" aria-label=\\\"Example icon-button with a heart icon\\\" (click)=\\\"openDialog(row.id)\\\" >update</mat-icon>\\r\\n                      </button>\\r\\n                      <button mat-icon-button>\\r\\n                          <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\"  matTooltip=\\\"Delete\\\" (click)=\\\"openDialog(row.id)\\\">delete</mat-icon>\\r\\n                        </button>\\r\\n                   \\r\\n                </mat-cell>\\r\\n            </ng-container>\\r\\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n             \\r\\n          </table>\\r\\n       <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"8\\\"></mat-paginator>\\r\\n      \\r\\n        <!--   <app-pagination [maxPages]=\\\"maxPages\\\"\\r\\n          [current]=\\\"1\\\"\\r\\n          [postsPerPage]=\\\"postsPerPage\\\"\\r\\n          [itemsPerPage]=\\\"itemsPerPage\\\"\\r\\n          (changePage)=\\\"pageChanged($event)\\\"></app-pagination> -->\\r\\n      \\r\\n    </div>\"","import { Component, OnInit, ViewChild , Input } from '@angular/core';\r\nimport {MatPaginator, MatSort} from '@angular/material';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {  MatDialog,  MatDialogRef , MatDialogConfig , MAT_DIALOG_DATA} from '@angular/material';\r\nimport {MatTableDataSource} from '@angular/material';\r\n\r\nimport {merge, Observable, of as observableOf} from 'rxjs';\r\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\r\nimport {DataService} from '../data.service';\r\nimport {ClientdialogComponent} from '../clientdialog/clientdialog.component';\r\n\r\n@Component({\r\n  selector: 'app-clientview',\r\n  templateUrl: './clientview.component.html',\r\n  styleUrls: ['./clientview.component.css']\r\n})\r\nexport class ClientviewComponent implements OnInit {\r\n  dialogResult=\"\";\r\n  client2: Client[] = [];\r\n  exampleDatabase: ExampleHttpDao | null;\r\n\r\n  displayedColumns: string[] = ['id','name', 'code','actionsColumn' ];\r\n  /* //displayedColumns: string[] = [  'code', 'name', 'designation', 'mail' , 'phone']; */\r\n\r\n\r\n\r\n  resultsLength = 0;\r\n  isLoadingResults = true;\r\n  isRateLimitReached = false;\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  \r\n  page: (Observable<number>|any);\r\n  constructor(private http: HttpClient, private data1: DataService, private dialog: MatDialog) { }\r\n\r\n  ngOnInit() {\r\n    this.exampleDatabase = new ExampleHttpDao(this.http);\r\n\r\n   // If the user changes the sort order, reset back to the first page.\r\n //  this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\r\n\r\n   merge(this.paginator.page)\r\n     .pipe(\r\n       startWith({}),\r\n       switchMap(() => {\r\n          console.log('enter1');\r\n         this.isLoadingResults = true;\r\n         return this.exampleDatabase!.getRepoIssues(this.paginator.pageIndex,\r\n          8);\r\n\r\n       }),\r\n       map(data => {\r\n         console.log('ggg');\r\n         // Flip flag to show that loading has finished.\r\n         this.isLoadingResults = false;\r\n         this.isRateLimitReached = false;\r\n         this.resultsLength = data['totalElements'];\r\nconsole.log(data['totalElements']);\r\n         return data;\r\n       }),\r\n       catchError(() => {\r\n         console.log('errr');\r\n         this.isLoadingResults = false;\r\n         // Catch if the GitHub API has reached its rate limit. Return empty data.\r\n         this.isRateLimitReached = true;\r\n         return observableOf([]);\r\n       })\r\n     ).subscribe(data => this.client2 = data['content']);\r\n  // this.listEmployees();\r\n    \r\n  }\r\n  openDialog(id:number) {\r\n  \r\n    const item1 = this.client2.find(i => i.id === id);\r\n   \r\n      const dialogRef = this.dialog.open(ClientdialogComponent, {\r\n        width: '300px',\r\n        data:item1\r\n        \r\n            });\r\n            dialogRef.afterClosed().subscribe(result => {\r\n              console.log('dialog closed:${result}');\r\n              this.dialogResult = result;\r\n            });\r\n    \r\n    }\r\n}\r\nexport interface Client {\r\n  id: number;\r\n  projectCode: number;\r\n\r\n  name: string;\r\n\r\n}\r\n \r\n /** An example database that the data source uses to retrieve data for the table. */\r\n export class ExampleHttpDao { \r\n  \r\n \r\n   constructor(private http: HttpClient) {}\r\n  \r\n   getRepoIssues(page: number,records:number): Observable<Client[]> {\r\n     const href = 'http://localhost:8080/uds/project/search/'+ page + '/' + records;\r\n    \r\n \r\n     return this.http.get<Client[]>(href);\r\n   }\r\n }","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Employ } from './models/employ.model';\r\nimport { Escalation } from './models/escalation.model';\r\nimport { Project } from './models/project.model';\r\nimport { Site } from './models/site.model';\r\nimport {Observable} from 'rxjs';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getEmployee(): Observable<Employ[]> {\r\n  return this.http.get<Employ[]>('http://localhost:8080/uds/employee/search');\r\n  }\r\n\r\n  getEscalation(): Observable<Escalation[]> {\r\n    return this.http.get<Escalation[]>('http://localhost:8080//uds/esctype/search');\r\n  }\r\n\r\n  getProjects(): Observable<Project[]> {\r\n    return this.http.get<Project[]>('http://localhost:8080/uds/project/search');\r\n  }\r\n\r\n  getSites(): Observable<Site[]> {\r\n    return this.http.get<Site[]>('http://localhost:8080/uds/site/search');\r\n  }\r\n\r\n  getSite(id): Observable<Site> {\r\n    return this.http.get<Site>('http://localhost:8080/uds/site/search/' + id);\r\n  }\r\n\r\n  getemployee(pages, records): Observable<Employ[]> {\r\n    \r\n    return this.http.get<Employ[]>('http://localhost:8080//uds/employee/search/' + pages + '/' + records);\r\n  }\r\n  getemployeebyid(id): Observable<Employ> {\r\n    \r\n    return this.http.get<Employ>('http://localhost:8080//uds/employee/search/'+id);\r\n  }\r\n}\r\n","module.exports = \".cdk-global-overlay-wrapper, .cdk-overlay-container {\\r\\n     z-index: 99999 !important;\\r\\n  }\"","module.exports = \"<div>\\r\\n\\r\\n<mat-dialog-content>\\r\\n  \\r\\n  <div class=\\\"row\\\" >\\r\\n                        \\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n        <input matInput placeholder=\\\"Employee Code\\\" [(ngModel)]=\\\"data.code\\\">\\r\\n      </mat-form-field>\\r\\n\\r\\n</div>\\r\\n<div class=\\\"row\\\" >\\r\\n                        \\r\\n  <mat-form-field class=\\\"example-full-width\\\">\\r\\n    <input matInput placeholder=\\\"Employee Name\\\" [(ngModel)]=\\\"data.name\\\">\\r\\n  </mat-form-field>\\r\\n\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\" >\\r\\n                        \\r\\n  <mat-form-field class=\\\"example-full-width\\\">\\r\\n    <input matInput placeholder=\\\"Designation\\\" [(ngModel)]=\\\"data.designation\\\">\\r\\n  </mat-form-field>\\r\\n\\r\\n</div>\\r\\n<div class=\\\"row\\\" >\\r\\n                        \\r\\n  <mat-form-field class=\\\"example-full-width\\\">\\r\\n    <input matInput placeholder=\\\"Email\\\" [(ngModel)]=\\\"data.mail\\\">\\r\\n  </mat-form-field>\\r\\n\\r\\n</div>\\r\\n<div class=\\\"row\\\" >\\r\\n                        \\r\\n  <mat-form-field class=\\\"example-full-width\\\">\\r\\n    <input matInput placeholder=\\\"Mobile Number\\\" [(ngModel)]=\\\"data.mob\\\">\\r\\n  </mat-form-field>\\r\\n\\r\\n</div>\\r\\n\\r\\n \\r\\n \\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions>\\r\\n    \\r\\n      <div class=\\\"button-row\\\">\\r\\n                                          \\r\\n        <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postEmployee()\\\" >Update</button>\\r\\n          <button mat-raised-button color=\\\"accent\\\" (click)=\\\"onCloseCancel()\\\">Cancel</button>\\r\\n          \\r\\n        </div>    \\r\\n\\r\\n</mat-dialog-actions>\\r\\n  </div>\"","import { Component, OnInit , Inject} from '@angular/core';\r\nimport {MatDialog} from '@angular/material';\r\nimport { MatDialogRef } from '@angular/material';\r\nimport {MAT_DIALOG_DATA} from '@angular/material';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {DataService} from '../data.service';\r\nimport { Employ } from '../models/employ.model';\r\n@Component({\r\n  selector: 'app-employdialog',\r\n  templateUrl: './employdialog.component.html',\r\n  styleUrls: ['./employdialog.component.css']\r\n})\r\nexport class EmploydialogComponent implements OnInit {\r\npublic emp1: Employ;\r\n  constructor(public thisdialogRef: MatDialogRef<EmploydialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) { }\r\n\r\n  ngOnInit() {\r\n \r\n  }\r\n\r\n  onCloseConfirm() {\r\nthis.thisdialogRef.close('Confirm');\r\n  }\r\n\r\n  onCloseCancel() {\r\nthis.thisdialogRef.close('Cancel');\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<p>\\r\\n  employeeupdate works!\\r\\n</p>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-employeeupdate',\r\n  templateUrl: './employeeupdate.component.html',\r\n  styleUrls: ['./employeeupdate.component.css']\r\n})\r\nexport class EmployeeupdateComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \".algnleft{\\r\\n    margin:20px \\r\\n}\\r\\n.div-left{\\r\\n    float:right;\\r\\n    padding-right:20px;\\r\\n}\\r\\n.mat-cell:nth-child(2), .mat-header-cell:nth-child(2) {\\r\\n    flex: 0 0 200px;\\r\\n}\\r\\n.martop{\\r\\n    margin-top: 14px;\\r\\n}\\r\\n.spinnerabove {\\r\\n    position:absolute;\\r\\n    top:50%;\\r\\n    left:50%;\\r\\n   \\r\\n    z-index: 10;\\r\\n  }\\r\\n  \"","module.exports = \"<div class=\\\"algnleft\\\">\\r\\n<div class=\\\"div-left\\\"><button mat-mini-fab>\\r\\n    <mat-icon aria-label=\\\"\\\" routerLink=\\\"../masterdata\\\">arrow_back</mat-icon>\\r\\n  </button></div>\\r\\n\\r\\n   <div class=\\\"example-loading-shade spinnerabove \\\"\\r\\n         *ngIf=\\\"isLoadingResults || isRateLimitReached\\\" >\\r\\n      <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\r\\n      <div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\r\\n        \\r\\n      </div>\\r\\n    </div> \\r\\n\\r\\n    \\r\\n  \\r\\n      <table mat-table [dataSource]=\\\"emp2\\\" class=\\\"mat-elevation-z8\\\"\\r\\n             matSort matSortActive=\\\"id\\\" matSortDisableClear matSortDirection=\\\"asc\\\" style=\\\"width:100%\\\">\\r\\n        <!-- Number Column -->\\r\\n        \\r\\n        <!-- Title Column -->\\r\\n        <ng-container  matColumnDef=\\\"id\\\">\\r\\n            <th mat-header-cell  *matHeaderCellDef>Id</th>\\r\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{row.id}}</td>\\r\\n          </ng-container>\\r\\n    \\r\\n\\r\\n        <ng-container  matColumnDef=\\\"name\\\">\\r\\n          <th mat-header-cell  *matHeaderCellDef>Name</th>\\r\\n          <td mat-cell *matCellDef=\\\"let row\\\">{{row.name}}</td>\\r\\n        </ng-container>\\r\\n  \\r\\n        <!-- State Column -->\\r\\n        <ng-container matColumnDef=\\\"code\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef>Code</th>\\r\\n          <td mat-cell *matCellDef=\\\"let row\\\">{{row.code}}</td>\\r\\n        </ng-container>\\r\\n  \\r\\n        <!-- Created Column -->\\r\\n        <ng-container matColumnDef=\\\"designation\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n            Designation\\r\\n          </th>\\r\\n          <td mat-cell *matCellDef=\\\"let row\\\">{{row.designation}}</td>\\r\\n        </ng-container>\\r\\n\\r\\n        <ng-container matColumnDef=\\\"mail\\\">\\r\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n              Mail\\r\\n            </th>\\r\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{row.mail}}</td>\\r\\n          </ng-container>\\r\\n\\r\\n          <ng-container matColumnDef=\\\"mob\\\">\\r\\n              <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                Mobile\\r\\n              </th>\\r\\n              <td mat-cell *matCellDef=\\\"let row\\\">{{row.mob}}</td>\\r\\n            </ng-container>\\r\\n\\r\\n           <mat-divider></mat-divider> \\r\\n        <ng-container matColumnDef=\\\"actionsColumn\\\">\\r\\n            <th mat-header-cell *matHeaderCellDef>Action</th>\\r\\n            \\r\\n            <mat-cell *matCellDef=\\\"let row\\\">\\r\\n                <button mat-icon-button>\\r\\n                    <mat-icon matTooltip=\\\"Update\\\" aria-label=\\\"Example icon-button with a heart icon\\\" (click)=\\\"openDialog(row.id)\\\" >update</mat-icon>\\r\\n                  </button>\\r\\n                  <button mat-icon-button>\\r\\n                      <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\"  matTooltip=\\\"Delete\\\" (click)=\\\"openDialog(row.id)\\\">delete</mat-icon>\\r\\n                    </button>\\r\\n               \\r\\n            </mat-cell>\\r\\n        </ng-container>\\r\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n         \\r\\n      </table>\\r\\n   <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"8\\\"></mat-paginator>\\r\\n  \\r\\n    <!--   <app-pagination [maxPages]=\\\"maxPages\\\"\\r\\n      [current]=\\\"1\\\"\\r\\n      [postsPerPage]=\\\"postsPerPage\\\"\\r\\n      [itemsPerPage]=\\\"itemsPerPage\\\"\\r\\n      (changePage)=\\\"pageChanged($event)\\\"></app-pagination> -->\\r\\n  \\r\\n</div>\"","import {Component, OnInit, ViewChild , Input} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {  MatDialog,  MatDialogRef , MatDialogConfig , MAT_DIALOG_DATA} from '@angular/material';\r\nimport {MatTableDataSource} from '@angular/material';\r\nimport {MatPaginator, MatSort} from '@angular/material';\r\nimport {merge, Observable, of as observableOf} from 'rxjs';\r\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\r\nimport {DataService} from '../data.service';\r\nimport { Employ } from '../models/employ.model';\r\nimport { MatDialogModule } from '@angular/material';\r\nimport {EmploydialogComponent} from '../employdialog/employdialog.component';\r\n\r\n\r\n@Component({\r\n  selector: 'app-emplyeeview',\r\n  templateUrl: './emplyeeview.component.html',\r\n  styleUrls: ['./emplyeeview.component.css']\r\n})\r\n\r\n\r\nexport class EmplyeeviewComponent implements OnInit {\r\n   @Input() public emp1: Employ;\r\n  dialogResult=\"\";\r\n  itemsPerPage: number = 10;\r\n  postsPerPage: number[] = [5, 10, 25];\r\nid;\r\n  emp:Employ[] = [];\r\n    emp2: Employees[] = [];\r\n  empid=new Employ();\r\n   exampleDatabase: ExampleHttpDao | null;\r\n\r\n  displayedColumns: string[] = ['id','name', 'code',  'designation' , 'mail', 'mob', 'actionsColumn' ];\r\n  /* //displayedColumns: string[] = [  'code', 'name', 'designation', 'mail' , 'phone']; */\r\n\r\n\r\n\r\n  resultsLength = 0;\r\n  isLoadingResults = true;\r\n  isRateLimitReached = false;\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  \r\n  page: (Observable<number>|any);\r\n  constructor(private http: HttpClient, private data1: DataService, private dialog: MatDialog) {\r\n\r\n   }\r\n   \r\n  /*  listEmployees()\r\n   {\r\n     this.data.getemployee(0, 2).subscribe(\r\n       data => this.emp = data['content']\r\n      \r\n      \r\n     );\r\n     console.log(this.data);\r\n    \r\n   } */\r\n   /* pageChanged(event) {\r\n    this.page = event.page;\r\n    \r\n    this.itemsPerPage = event.itemsPerPage;\r\n    this.loadEmployeeByPage(this.page, this.itemsPerPage);\r\n} */\r\n/* loadEmployeeByPage(page: number, rows: number) {\r\n \r\n  this.data.getemployee(page, rows).subscribe(\r\n    data => this.emp = data['content']\r\n  \r\n    );\r\n\r\n} */\r\n\r\n   // tslint:disable-next-line:member-ordering\r\n\r\n\r\n    /* openDialog() {\r\n    const dialogRef = this.dialog.open(DialogBodyComponent, {\r\n      height: '400px',\r\n  width: '600px'\r\n      \r\n    });\r\n  }  */\r\n\r\n  ngOnInit() {\r\n     this.exampleDatabase = new ExampleHttpDao(this.http);\r\n\r\n    // If the user changes the sort order, reset back to the first page.\r\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\r\n\r\n    merge(this.paginator.page)\r\n      .pipe(\r\n        startWith({}),\r\n        switchMap(() => {\r\n           console.log('enter1');\r\n          this.isLoadingResults = true;\r\n          return this.exampleDatabase!.getRepoIssues(this.paginator.pageIndex,\r\n           8);\r\n\r\n        }),\r\n        map(data => {\r\n          console.log('ggg');\r\n          // Flip flag to show that loading has finished.\r\n          this.isLoadingResults = false;\r\n          this.isRateLimitReached = false;\r\n          this.resultsLength = data['totalElements'];\r\n console.log(data['totalElements']);\r\n          return data;\r\n        }),\r\n        catchError(() => {\r\n          console.log('errr');\r\n          this.isLoadingResults = false;\r\n          // Catch if the GitHub API has reached its rate limit. Return empty data.\r\n          this.isRateLimitReached = true;\r\n          return observableOf([]);\r\n        })\r\n      ).subscribe(data => this.emp2 = data['content']);\r\n   // this.listEmployees();\r\n  }\r\n openDialog(id:number) {\r\n  \r\n  const item1 = this.emp2.find(i => i.id === id);\r\n \r\n    const dialogRef = this.dialog.open(EmploydialogComponent, {\r\n      width: '300px',\r\n      data:item1\r\n      \r\n          });\r\n          dialogRef.afterClosed().subscribe(result => {\r\n            console.log('dialog closed:${result}');\r\n            this.dialogResult = result;\r\n          });\r\n  \r\n  }\r\n \r\n\r\n /* loadEmployeeforupdate(id:number) {\r\n \r\n\r\n    this.data.getemployeebyid(id).subscribe(\r\n    data => this.empid = data,\r\n    error => console.log(error),\r\n         () => {\r\n    \r\n          } \r\n    );\r\n // this.openDialog();\r\n  \r\n\r\n} */\r\n  /* export interface Employdetails {\r\n    created_at: string;\r\n    number: string;\r\n    state: string;\r\n    title: string;\r\n  }\r\n */\r\n\r\n  \r\n      \r\n  }\r\n/* export interface GithubApi {\r\n  items: employees[];\r\n \r\n}\r\n */\r\n\r\n\r\n \r\n\r\nexport interface Employees {\r\n id: number;\r\n    code: number;\r\n    designation: string;\r\n    name: string;\r\n    mail: string;\r\n    mob: number;\r\n}\r\n\r\n/** An example database that the data source uses to retrieve data for the table. */\r\nexport class ExampleHttpDao { \r\n \r\n\r\n  constructor(private http: HttpClient) {}\r\n \r\n  getRepoIssues(page: number,records:number): Observable<Employees[]> {\r\n    const href = 'http://localhost:8080/uds/employee/search/'+ page + '/' + records;\r\n   \r\n\r\n    return this.http.get<Employees[]>(href);\r\n  }\r\n}","module.exports = \".example-container {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n  }\\r\\n  \\r\\n  .example-container > * {\\r\\n      padding-left: 20px;\\r\\n      padding-top: 20px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .accordian > * {\\r\\n    padding-left: 50px;\\r\\n    padding-top: 50px;\\r\\n \\r\\n}\\r\\n  \\r\\n  .example-stretched-tabs {\\r\\n    max-width: 800px;\\r\\n  }\\r\\n  \\r\\n  example-small-box, .employee-box ,.client-box , .site-box, .escalation-box{\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    justify-content: center;\\r\\n    margin: 16px;\\r\\n    padding: 16px;\\r\\n    border-radius: 8px;\\r\\n  }\\r\\n  \\r\\n  .example-small-box {\\r\\n    height: 100px;\\r\\n    width: 100px;\\r\\n  }\\r\\n  \\r\\n  .employee-box {\\r\\n    height: 400px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .client-box {\\r\\n    height: 200px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .site-box {\\r\\n    height:650px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .escalation-box {\\r\\n    height: 440px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .button-row button,\\r\\n.button-row a {\\r\\n  margin-left: 90px;\\r\\n  margin-top: 8px\\r\\n}\\r\\n  \\r\\n  .site-form {\\r\\n  min-width: 150px;\\r\\n  max-width: 500px;\\r\\n  width: 100%;\\r\\n}\\r\\n  \\r\\n  .example-full-width {\\r\\n  width: 100%;\\r\\n}\\r\\n  \\r\\n  .example-headers-align .mat-expansion-panel-header-title, \\r\\n.example-headers-align .mat-expansion-panel-header-description {\\r\\n  flex-basis: 0;\\r\\n}\\r\\n  \\r\\n  .example-headers-align .mat-expansion-panel-header-description {\\r\\n  justify-content: space-between;\\r\\n  align-items: center;\\r\\n}\\r\\n  \\r\\n  .mt{\\r\\n  margin-top: 100px;\\r\\n}\\r\\n  \"","module.exports = \"<div class=\\\"example-container \\\">\\r\\n\\r\\n  <div>\\r\\n    <mat-card>\\r\\n      <mat-card-header>\\r\\n\\r\\n        <mat-card-title>Escalation</mat-card-title>\\r\\n\\r\\n      </mat-card-header>\\r\\n      <mat-divider></mat-divider>\\r\\n      <mat-card-content>\\r\\n        <div>\\r\\n          <mat-form-field class=\\\"example-full-width\\\">\\r\\n            <input type=\\\"text\\\" placeholder=\\\"Type of Escalation\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto\\\">\\r\\n            <mat-autocomplete #auto=\\\"matAutocomplete\\\">\\r\\n              <mat-option *ngFor=\\\"let escalation of escalation$\\\" [value]=\\\"escalation\\\">\\r\\n                {{escalation.escalationType}}\\r\\n              </mat-option>\\r\\n            </mat-autocomplete>\\r\\n          </mat-form-field>\\r\\n\\r\\n\\r\\n          <mat-form-field class=\\\"example-full-width\\\">\\r\\n            <input matInput placeholder=\\\"Description\\\">\\r\\n          </mat-form-field>\\r\\n\\r\\n\\r\\n          <mat-form-field class=\\\"example-full-width\\\">\\r\\n            <input type=\\\"text\\\" placeholder=\\\"Communicated Via\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto\\\">\\r\\n            <mat-autocomplete #auto1=\\\"matAutocomplete\\\">\\r\\n              <mat-option *ngFor=\\\"let option of options\\\" [value]=\\\"option\\\">\\r\\n                {{option}}\\r\\n              </mat-option>\\r\\n            </mat-autocomplete>\\r\\n          </mat-form-field> \\r\\n\\r\\n\\r\\n          <mat-form-field class=\\\"example-full-width\\\">\\r\\n            <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Communicated Date\\\">\\r\\n            <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n            <mat-datepicker #picker></mat-datepicker>\\r\\n          </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"example-full-width\\\">\\r\\n            <input matInput [matDatepicker]=\\\"picker1\\\" placeholder=\\\"Closure Date\\\">\\r\\n            <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\r\\n            <mat-datepicker #picker1></mat-datepicker>\\r\\n          </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"example-full-width\\\">\\r\\n            <input matInput [matDatepicker]=\\\"picker2\\\" placeholder=\\\"Estimated Closure Date\\\">\\r\\n            <mat-datepicker-toggle matSuffix [for]=\\\"picker2\\\"></mat-datepicker-toggle>\\r\\n            <mat-datepicker #picker2></mat-datepicker>\\r\\n          </mat-form-field>\\r\\n\\r\\n          <div class=\\\"button-row\\\">\\r\\n\\r\\n            <button mat-raised-button color=\\\"accent\\\">Submit</button>\\r\\n\\r\\n\\r\\n          </div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n        </div>\\r\\n      </mat-card-content>\\r\\n    </mat-card>\\r\\n  </div>\\r\\n</div>     \\r\\n        \\r\\n                    \\r\\n                   \\r\\n                       \\r\\n  \\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\nimport {DataService} from '../data.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-escalation',\r\n  templateUrl: './escalation.component.html',\r\n  styleUrls: ['./escalation.component.css']\r\n})\r\nexport class EscalationComponent implements OnInit {\r\n  myControl = new FormControl();\r\n  escalation$: Object;\r\n\r\n  constructor(private data: DataService) { }\r\n\r\n  ngOnInit() {\r\n    this.data.getEscalation().subscribe(\r\n      data => this.escalation$ = data\r\n    );\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<div>\\r\\n\\r\\n    <mat-dialog-content>\\r\\n      \\r\\n      <div class=\\\"row\\\" >\\r\\n                            \\r\\n        <mat-form-field class=\\\"example-full-width\\\">\\r\\n            <input matInput placeholder=\\\"Escalation Type\\\" [(ngModel)]=\\\"data.escalationType\\\">\\r\\n          </mat-form-field>\\r\\n    \\r\\n    </div>\\r\\n    \\r\\n    \\r\\n   \\r\\n    \\r\\n     \\r\\n     \\r\\n    </mat-dialog-content>\\r\\n    <mat-dialog-actions>\\r\\n        \\r\\n          <div class=\\\"button-row\\\">\\r\\n                                              \\r\\n            <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postClient()\\\" >Update</button>\\r\\n              <button mat-raised-button color=\\\"accent\\\" (click)=\\\"onCloseCancel()\\\">Cancel</button>\\r\\n              \\r\\n            </div>    \\r\\n    \\r\\n    </mat-dialog-actions>\\r\\n      </div>\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport {MatDialog} from '@angular/material';\r\nimport { MatDialogRef } from '@angular/material';\r\nimport {MAT_DIALOG_DATA} from '@angular/material';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {DataService} from '../data.service';\r\nimport { Escalation } from '../models/escalation.model';\r\n\r\n@Component({\r\n  selector: 'app-escalationdialog',\r\n  templateUrl: './escalationdialog.component.html',\r\n  styleUrls: ['./escalationdialog.component.css']\r\n})\r\nexport class EscalationdialogComponent implements OnInit {\r\n\r\n  constructor(public thisdialogRef: MatDialogRef<EscalationdialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n  onCloseConfirm() {\r\n    this.thisdialogRef.close('Confirm');\r\n      }\r\n    \r\n      onCloseCancel() {\r\n    this.thisdialogRef.close('Cancel');\r\n      }\r\n}\r\n","module.exports = \"\"","module.exports = \"<p>\\r\\n  escalationmainview works!\\r\\n</p>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-escalationmainview',\r\n  templateUrl: './escalationmainview.component.html',\r\n  styleUrls: ['./escalationmainview.component.css']\r\n})\r\nexport class EscalationmainviewComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<p>\\r\\n  escalationupdate works!\\r\\n</p>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-escalationupdate',\r\n  templateUrl: './escalationupdate.component.html',\r\n  styleUrls: ['./escalationupdate.component.css']\r\n})\r\nexport class EscalationupdateComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \".algnleft{\\r\\n    margin:20px \\r\\n}\\r\\n.div-left{\\r\\n    float:right;\\r\\n    padding-right:20px;\\r\\n}\\r\\n.mat-cell:nth-child(2), .mat-header-cell:nth-child(2) {\\r\\n    flex: 0 0 200px;\\r\\n}\\r\\n.martop{\\r\\n    margin-top: 14px;\\r\\n}\\r\\n.spinnerabove {\\r\\n    position:absolute;\\r\\n    top:50%;\\r\\n    left:50%;\\r\\n   \\r\\n    z-index: 10;\\r\\n  }\\r\\n  \"","module.exports = \"<div class=\\\"algnleft\\\">\\r\\n    <div class=\\\"div-left\\\"><button mat-mini-fab>\\r\\n        <mat-icon aria-label=\\\"\\\" routerLink=\\\"../masterdata\\\">arrow_back</mat-icon>\\r\\n      </button></div>\\r\\n    \\r\\n       <div class=\\\"example-loading-shade spinnerabove \\\"\\r\\n             *ngIf=\\\"isLoadingResults || isRateLimitReached\\\" >\\r\\n          <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\r\\n          <div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\r\\n            \\r\\n          </div>\\r\\n        </div> \\r\\n    \\r\\n        \\r\\n      \\r\\n          <table mat-table [dataSource]=\\\"escalation2\\\" class=\\\"mat-elevation-z8\\\"\\r\\n                 matSort matSortActive=\\\"id\\\" matSortDisableClear matSortDirection=\\\"asc\\\" style=\\\"width:100%\\\">\\r\\n            <!-- Number Column -->\\r\\n            \\r\\n            <!-- Title Column -->\\r\\n            <ng-container  matColumnDef=\\\"id\\\">\\r\\n                <th mat-header-cell  *matHeaderCellDef>Id</th>\\r\\n                <td mat-cell *matCellDef=\\\"let row\\\">{{row.id}}</td>\\r\\n              </ng-container>\\r\\n        \\r\\n    \\r\\n           \\r\\n      \\r\\n            <!-- State Column -->\\r\\n            <ng-container matColumnDef=\\\"escalationType\\\">\\r\\n              <th mat-header-cell *matHeaderCellDef>Project Code</th>\\r\\n              <td mat-cell *matCellDef=\\\"let row\\\">{{row.escalationType}}</td>\\r\\n            </ng-container>\\r\\n      \\r\\n          \\r\\n    \\r\\n            \\r\\n    \\r\\n              \\r\\n    \\r\\n               <mat-divider></mat-divider> \\r\\n            <ng-container matColumnDef=\\\"actionsColumn\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef>Action</th>\\r\\n                \\r\\n                <mat-cell *matCellDef=\\\"let row\\\">\\r\\n                    <button mat-icon-button>\\r\\n                        <mat-icon matTooltip=\\\"Update\\\" aria-label=\\\"Example icon-button with a heart icon\\\" (click)=\\\"openDialog(row.id)\\\" >update</mat-icon>\\r\\n                      </button>\\r\\n                      <button mat-icon-button>\\r\\n                          <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\"  matTooltip=\\\"Delete\\\" (click)=\\\"openDialog(row.id)\\\">delete</mat-icon>\\r\\n                        </button>\\r\\n                   \\r\\n                </mat-cell>\\r\\n            </ng-container>\\r\\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n             \\r\\n          </table>\\r\\n       <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"8\\\"></mat-paginator>\\r\\n      \\r\\n        <!--   <app-pagination [maxPages]=\\\"maxPages\\\"\\r\\n          [current]=\\\"1\\\"\\r\\n          [postsPerPage]=\\\"postsPerPage\\\"\\r\\n          [itemsPerPage]=\\\"itemsPerPage\\\"\\r\\n          (changePage)=\\\"pageChanged($event)\\\"></app-pagination> -->\\r\\n      \\r\\n    </div>\"","import { Component, OnInit, ViewChild , Input } from '@angular/core';\r\nimport {MatPaginator, MatSort} from '@angular/material';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {  MatDialog,  MatDialogRef , MatDialogConfig , MAT_DIALOG_DATA} from '@angular/material';\r\nimport {MatTableDataSource} from '@angular/material';\r\n\r\nimport {merge, Observable, of as observableOf} from 'rxjs';\r\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\r\nimport {DataService} from '../data.service';\r\nimport {EscalationdialogComponent} from '../escalationdialog/escalationdialog.component';\r\n\r\n@Component({\r\n  selector: 'app-escalationview',\r\n  templateUrl: './escalationview.component.html',\r\n  styleUrls: ['./escalationview.component.css']\r\n})\r\nexport class EscalationviewComponent implements OnInit {\r\n  dialogResult=\"\";\r\n  escalation2: Escalation[] = [];\r\n  exampleDatabase: ExampleHttpDao | null;\r\n\r\n  displayedColumns: string[] = ['id','escalationType','actionsColumn' ];\r\n  /* //displayedColumns: string[] = [  'code', 'name', 'designation', 'mail' , 'phone']; */\r\n\r\n\r\n\r\n  resultsLength = 0;\r\n  isLoadingResults = true;\r\n  isRateLimitReached = false;\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  \r\n  page: (Observable<number>|any);\r\n  constructor(private http: HttpClient, private data1: DataService, private dialog: MatDialog) { }\r\n\r\n  ngOnInit() {\r\n    this.exampleDatabase = new ExampleHttpDao(this.http);\r\n\r\n   // If the user changes the sort order, reset back to the first page.\r\n //  this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\r\n\r\n   merge(this.paginator.page)\r\n     .pipe(\r\n       startWith({}),\r\n       switchMap(() => {\r\n          console.log('enter1');\r\n         this.isLoadingResults = true;\r\n         return this.exampleDatabase!.getRepoIssues(this.paginator.pageIndex,\r\n          8);\r\n\r\n       }),\r\n       map(data => {\r\n         console.log('ggg');\r\n         // Flip flag to show that loading has finished.\r\n         this.isLoadingResults = false;\r\n         this.isRateLimitReached = false;\r\n         this.resultsLength = data['totalElements'];\r\nconsole.log(data['totalElements']);\r\n         return data;\r\n       }),\r\n       catchError(() => {\r\n         console.log('errr');\r\n         this.isLoadingResults = false;\r\n         // Catch if the GitHub API has reached its rate limit. Return empty data.\r\n         this.isRateLimitReached = true;\r\n         return observableOf([]);\r\n       })\r\n     ).subscribe(data => this.escalation2 = data['content']);\r\n  // this.listEmployees();\r\n    \r\n  }\r\n  openDialog(id:number) {\r\n  \r\n    const item1 = this.escalation2.find(i => i.id === id);\r\n   \r\n      const dialogRef = this.dialog.open(EscalationdialogComponent, {\r\n        width: '300px',\r\n        data:item1\r\n        \r\n            });\r\n            dialogRef.afterClosed().subscribe(result => {\r\n              console.log('dialog closed:${result}');\r\n              this.dialogResult = result;\r\n            });\r\n    \r\n    }\r\n}\r\n\r\nexport interface Escalation {\r\n  id: number;\r\n  escalationType: number;\r\n\r\n\r\n\r\n}\r\n \r\n /** An example database that the data source uses to retrieve data for the table. */\r\n export class ExampleHttpDao { \r\n  \r\n \r\n   constructor(private http: HttpClient) {}\r\n  \r\n   getRepoIssues(page: number,records:number): Observable<Escalation[]> {\r\n     const href = 'http://localhost:8080/uds/esctype/search/'+ page + '/' + records;\r\n    \r\n \r\n     return this.http.get<Escalation[]>(href);\r\n   }\r\n }\r\n","module.exports = \"\\r\\n.example-container {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  \\r\\n}\\r\\n\\r\\n.example-container > * {\\r\\n    padding-left: 20px;\\r\\n    padding-top: 20px;\\r\\n  width: 200px;\\r\\n  position:absolute; /*it can be fixed too*/\\r\\n        left:0; right:0;\\r\\n        top:0; bottom:0;\\r\\n        margin:auto;\\r\\n\\r\\n        /*this to solve \\\"the content will not be cut when the window is smaller than the content\\\": */\\r\\n        max-width:100%;\\r\\n        max-height:100%;\\r\\n        overflow:auto;\\r\\n \\r\\n}\\r\\n\\r\\n.content {\\r\\n  width: 400px;\\r\\n  position: absolute;\\r\\n  left: 50%;\\r\\n  top: 50%;\\r\\n  -webkit-transform: translate(-50%, -50%);\\r\\n  transform: translate(-50%, -50%);\\r\\n  margin: 2em auto;\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.menu-button {\\r\\n  transition: 300ms ease-in-out;\\r\\n  -webkit-transform: rotate(0deg);\\r\\n          transform: rotate(0deg);\\r\\n}\\r\\n\\r\\n.menu-button.rotated {\\r\\n  -webkit-transform: rotate(180deg);\\r\\n          transform: rotate(180deg);\\r\\n}\\r\\n\\r\\n.submenu {\\r\\n  overflow-y: hidden;\\r\\n  transition: 300ms ease-in-out;\\r\\n  height: 0;\\r\\n}\\r\\n\\r\\n.submenu.expanded {\\r\\n  height: 144px;\\r\\n}\"","module.exports = \"<div class=\\\"content\\\">\\r\\n  <div >\\r\\n    <mat-card >\\r\\n        <mat-card-header>\\r\\n         \\r\\n                <mat-card-title><p>Please login to continue</p></mat-card-title>\\r\\n               \\r\\n        </mat-card-header>\\r\\n        <mat-divider ></mat-divider> \\r\\n        <mat-card-content>\\r\\n        <div style=\\\"margin-top:10px\\\">\\r\\n           \\r\\n          <mat-form-field class=\\\"example-full-width\\\">\\r\\n            <input matInput placeholder=\\\"Username\\\"  required >\\r\\n          </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"example-full-width\\\">\\r\\n            <input matInput type=\\\"password\\\" placeholder=\\\"Password\\\"  required>\\r\\n          </mat-form-field>\\r\\n          <div class=\\\"button-row\\\">\\r\\n                                        \\r\\n            <button mat-raised-button color=\\\"accent\\\" (click)=\\\"onButtonclick()\\\">Login</button>\\r\\n            \\r\\n            \\r\\n          </div>\\r\\n         \\r\\n        \\r\\n         \\r\\n         \\r\\n          \\r\\n            \\r\\n               \\r\\n\\r\\n                  \\r\\n                    \\r\\n                 \\r\\n                 \\r\\n                     \\r\\n                      \\r\\n\\r\\n     </div>\\r\\n     </mat-card-content>\\r\\n     </mat-card>\\r\\n     </div>\\r\\n</div>\"","import { Component, HostBinding, OnInit } from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\nimport { Toolbarservice } from '../my-nav/my-nav.service';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\n\r\n\r\n\r\n@Component({\r\n\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css'],\r\n  providers: [Toolbarservice]\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  myControl = new FormControl();\r\n  constructor(private activaterouter: ActivatedRoute, private router: Router, public nav: Toolbarservice) { }\r\n\r\n  ngOnInit() {\r\n\r\n\r\n  }\r\n\r\n  onButtonclick(): void {\r\n\r\n    this.router.navigate(['/masterdata']);\r\n\r\n\r\n  }\r\n\r\n}\r\n","module.exports = \".example-container {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n  }\\r\\n  \\r\\n  .example-container > * {\\r\\n      padding-left: 20px;\\r\\n      padding-top: 5px;\\r\\n    width: 100%;\\r\\n  }\\r\\n  \\r\\n  .accordian > * {\\r\\n    padding-left: 50px;\\r\\n    padding-top: 50px;\\r\\n \\r\\n}\\r\\n  \\r\\n  .example-stretched-tabs {\\r\\n    max-width: 800px;\\r\\n  }\\r\\n  \\r\\n  example-small-box, .employee-box ,.client-box , .site-box, .escalation-box{\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    justify-content: center;\\r\\n    margin: 16px;\\r\\n    padding: 16px;\\r\\n    border-radius: 8px;\\r\\n  }\\r\\n  \\r\\n  .example-small-box {\\r\\n    height: 100px;\\r\\n    width: 100px;\\r\\n  }\\r\\n  \\r\\n  .employee-box {\\r\\n    height: 400px;\\r\\n    width: 300px;\\r\\n    \\r\\n  }\\r\\n  \\r\\n  .client-box {\\r\\n    height: 200px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .site-box {\\r\\n    height:630px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .escalation-box {\\r\\n    height: 150px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .button-row button,\\r\\n.button-row a {\\r\\n  margin-left: 115px;\\r\\n  margin-top: 8px\\r\\n}\\r\\n  \\r\\n  .site-form {\\r\\n  min-width: 150px;\\r\\n  max-width: 500px;\\r\\n  width: 100%;\\r\\n}\\r\\n  \\r\\n  .example-full-width {\\r\\n  width: 100%;\\r\\n}\\r\\n  \\r\\n  .example-headers-align .mat-expansion-panel-header-title, \\r\\n.example-headers-align .mat-expansion-panel-header-description {\\r\\n  flex-basis: 0;\\r\\n}\\r\\n  \\r\\n  .example-headers-align .mat-expansion-panel-header-description {\\r\\n  justify-content: space-between;\\r\\n  align-items: center;\\r\\n}\\r\\n  \\r\\n  .mt{\\r\\n  margin-top: 100px;\\r\\n}\\r\\n  \\r\\n  .thbackground{\\r\\n  margin-top: 100px;\\r\\n}\\r\\n  \\r\\n  .submit{\\r\\n  margin-top: 20px;\\r\\n}\\r\\n  \"","module.exports = \"<div class=\\\"example-container\\\">\\r\\n    <div id = \\\"layoutContainer\\\" \\r\\n    fxLayout = \\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutwrap fxLayoutGap=\\\"0.15%\\\">\\r\\n    <div fxflex = \\\"100\\\" >\\r\\n        <div class=\\\"example-container\\\">\\r\\n            <mat-tab-group >\\r\\n            \\r\\n              <mat-tab label=\\\"Employee\\\">\\r\\n               <mat-progress-bar mode=\\\"indeterminate\\\" *ngIf=\\\"isLoadingResults\\\" ></mat-progress-bar>   \\r\\n                  <div class=\\\"employee-box mat-elevation-z4\\\" >\\r\\n                    \\r\\n                    <div >\\r\\n                        <button mat-mini-fab>\\r\\n                            <mat-icon aria-label=\\\"\\\" routerLink=\\\"../emplyeeview\\\">remove_red_eye</mat-icon>\\r\\n                          </button>\\r\\n                        <mat-form-field class=\\\"example-full-width\\\">\\r\\n                            <input matInput placeholder=\\\"Employee Code\\\" [(ngModel)]=\\\"emp.code\\\">\\r\\n                          </mat-form-field>\\r\\n                          <mat-form-field class=\\\"example-full-width\\\">\\r\\n                              <input matInput placeholder=\\\"Employee Name\\\" [(ngModel)]=\\\"emp.name\\\">\\r\\n                            </mat-form-field>\\r\\n                            <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                <input type=\\\"text\\\" placeholder=\\\"Designation\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto20\\\">\\r\\n                                <mat-autocomplete #auto20=\\\"matAutocomplete\\\">\\r\\n                                  <mat-option *ngFor=\\\"let des of Designation\\\" [value]=\\\"des\\\" >\\r\\n                                    {{des}}\\r\\n                                  </mat-option>\\r\\n                                </mat-autocomplete>\\r\\n                              </mat-form-field>\\r\\n                              <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                  <input matInput placeholder=\\\"Email\\\" [(ngModel)]=\\\"emp.mail\\\">\\r\\n                                </mat-form-field>\\r\\n                                <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                    <input matInput placeholder=\\\"Mobile Number\\\" [(ngModel)]=\\\"emp.mob\\\">\\r\\n                                  </mat-form-field>\\r\\n            \\r\\n                                  <div class=\\\"button-row\\\">\\r\\n                                      \\r\\n                                      <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postEmployee()\\\" >Submit</button>\\r\\n                                      \\r\\n                                      \\r\\n                                    </div>\\r\\n                    </div>\\r\\n                     \\r\\n                    </div>\\r\\n              </mat-tab>\\r\\n              <mat-tab label=\\\"Client\\\"> <div class=\\\"client-box mat-elevation-z4\\\">\\r\\n                  <div >\\r\\n                      <button mat-mini-fab>\\r\\n                          <mat-icon aria-label=\\\"\\\" routerLink=\\\"../clientview\\\">remove_red_eye</mat-icon>\\r\\n                        </button>\\r\\n                        <mat-progress-bar *ngIf=\\\"isLoadingResults\\\" mode=\\\"indeterminate\\\" ></mat-progress-bar>\\r\\n                      <mat-form-field class=\\\"example-full-width\\\">\\r\\n                          <input matInput placeholder=\\\"Client Name\\\" [(ngModel)]=\\\"client.name\\\" >\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"example-full-width\\\">\\r\\n                            <input matInput placeholder=\\\"Client Code\\\" [(ngModel)]=\\\"client.projectCode\\\" >\\r\\n                          </mat-form-field>\\r\\n                          \\r\\n            \\r\\n                                <div class=\\\"button-row\\\">\\r\\n                                    \\r\\n                                    <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postClient()\\\" >Add</button>\\r\\n                                    \\r\\n                                    \\r\\n                                  </div>\\r\\n                  </div>\\r\\n                   \\r\\n                  </div> </mat-tab>\\r\\n              <mat-tab label=\\\"Site\\\">  \\r\\n                  \\r\\n                    <div id = \\\"layoutContainer\\\" \\r\\n                    fxLayout = \\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutwrap fxLayoutGap=\\\"0.15%\\\">\\r\\n                    \\r\\n                    <div class=\\\"site-box mat-elevation-z4\\\">\\r\\n                      <div>\\r\\n                          <button mat-mini-fab>\\r\\n                              <mat-icon aria-label=\\\"\\\" routerLink=\\\"../siteview\\\">remove_red_eye</mat-icon>\\r\\n                            </button>\\r\\n                    <div fxflex = \\\"40\\\" >\\r\\n                            <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                    <input type=\\\"text\\\" placeholder=\\\"Client Name\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto\\\">\\r\\n                                    <mat-autocomplete #auto=\\\"matAutocomplete\\\">\\r\\n                                      <mat-option *ngFor=\\\"let option of projects\\\" [value]=\\\"option.name\\\" (click)=\\\"setSiteProject(option.id)\\\">\\r\\n                                        {{option.name}}\\r\\n                                      </mat-option>\\r\\n                                    </mat-autocomplete>\\r\\n                                  </mat-form-field>\\r\\n            \\r\\n                         \\r\\n                  <mat-form-field class=\\\"example-full-width\\\">\\r\\n                          <input matInput placeholder=\\\"Site Code\\\" [(ngModel)]=\\\"site.code\\\">\\r\\n                        </mat-form-field>   \\r\\n            \\r\\n                  <mat-form-field class=\\\"example-full-width\\\">\\r\\n                          <input matInput placeholder=\\\"Site Name\\\" [(ngModel)]=\\\"site.name\\\">\\r\\n                        </mat-form-field> \\r\\n            \\r\\n                        <mat-form-field class=\\\"example-full-width\\\">\\r\\n                              <input matInput placeholder=\\\"Address\\\" [(ngModel)]=\\\"site.address\\\">\\r\\n                            </mat-form-field> \\r\\n            \\r\\n                             <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                      <input type=\\\"text\\\" placeholder=\\\"Contract Type\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto11\\\">\\r\\n                                      <mat-autocomplete #auto11=\\\"matAutocomplete\\\">\\r\\n                                        <mat-option *ngFor=\\\"let option of Contracttype\\\" [value]=\\\"option\\\" >\\r\\n                                          {{option}}\\r\\n                                        </mat-option>\\r\\n                                      </mat-autocomplete>\\r\\n                                    </mat-form-field>\\r\\n                                <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                      <input type=\\\"text\\\" placeholder=\\\"Regional manager\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto1\\\">\\r\\n                                      <mat-autocomplete #auto1=\\\"matAutocomplete\\\">\\r\\n                                        <mat-option *ngFor=\\\"let option of employees\\\" [value]=\\\"option.name\\\" (click)=\\\"setSiteRM(option.id)\\\">\\r\\n                                          {{option.name}}\\r\\n                                        </mat-option>\\r\\n                                      </mat-autocomplete>\\r\\n                                    </mat-form-field>\\r\\n                                    <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                          <input type=\\\"text\\\" placeholder=\\\"Senior Manager\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto2\\\">\\r\\n                                          <mat-autocomplete #auto2=\\\"matAutocomplete\\\">\\r\\n                                            <mat-option *ngFor=\\\"let option of employees\\\" [value]=\\\"option.name\\\" (click)=\\\"setSiteSM(option.id)\\\">\\r\\n                                              {{option.name}}\\r\\n                                            </mat-option>\\r\\n                                          </mat-autocomplete>\\r\\n                                        </mat-form-field>\\r\\n                                        <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                              <input type=\\\"text\\\" placeholder=\\\"Asst Senior Manager\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto3\\\">\\r\\n                                              <mat-autocomplete #auto3=\\\"matAutocomplete\\\">\\r\\n                                                <mat-option *ngFor=\\\"let option of employees\\\" [value]=\\\"option.name\\\" (click)=\\\"setSiteASM(option.id)\\\">\\r\\n                                                  {{option.name}}\\r\\n                                                </mat-option>\\r\\n                                              </mat-autocomplete>\\r\\n                                            </mat-form-field>\\r\\n                                            <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                                  <input type=\\\"text\\\" placeholder=\\\"Site Incharge\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto4\\\">\\r\\n                                                  <mat-autocomplete #auto4=\\\"matAutocomplete\\\">\\r\\n                                                    <mat-option *ngFor=\\\"let option of employees\\\" [value]=\\\"option.name\\\" (click)=\\\"setSiteSI(option.id)\\\">\\r\\n                                                      {{option.name}}\\r\\n                                                    </mat-option>\\r\\n                                                  </mat-autocomplete>\\r\\n                                                </mat-form-field>\\r\\n                    </div>\\r\\n                  </div> \\r\\n                    </div>\\r\\n                    \\r\\n                    <div class=\\\"accordian\\\">\\r\\n                    <div fxflex = \\\"40\\\" >\\r\\n                            <mat-card >\\r\\n                                    <mat-card-header>\\r\\n                                     \\r\\n                                            <mat-card-title>Types of Service</mat-card-title>\\r\\n                                           \\r\\n                                    </mat-card-header>\\r\\n                                    <mat-divider ></mat-divider> \\r\\n                                    <mat-card-content style=\\\"margin-top: 20px\\\">\\r\\n                            <mat-accordion>\\r\\n                                    <mat-expansion-panel>\\r\\n                                      <mat-expansion-panel-header>\\r\\n                                        <mat-panel-title>\\r\\n                                         Manpower\\r\\n                                        </mat-panel-title>\\r\\n                                        <mat-panel-description>\\r\\n                                          Enter the Manpower  Detail\\r\\n                                        </mat-panel-description>\\r\\n                                      </mat-expansion-panel-header>\\r\\n                                      <div class=\\\"row\\\">\\r\\n                                            <mat-form-field>\\r\\n                                              <input matInput placeholder=\\\"Shift\\\"  [(ngModel)]=\\\"newAttribute.shift\\\" >\\r\\n                                            </mat-form-field>\\r\\n                                          </div>\\r\\n                                          <div class=\\\"row\\\">\\r\\n                                                  <mat-form-field>\\r\\n                                                    <input matInput placeholder=\\\"StartTime\\\"  [(ngModel)]=\\\"newAttribute.starttime\\\" >\\r\\n                                                  </mat-form-field>\\r\\n                                                </div>\\r\\n                                                <div class=\\\"row\\\">\\r\\n                                                      <mat-form-field>\\r\\n                                                        <input matInput placeholder=\\\"EndTime\\\"  [(ngModel)]=\\\"newAttribute.endtime\\\" >\\r\\n                                                      </mat-form-field>\\r\\n                                                    </div>\\r\\n                                                    <div class=\\\"row\\\">\\r\\n                                                          <mat-form-field>\\r\\n                                                            <input matInput placeholder=\\\"Planned\\\"   [(ngModel)]=\\\"newAttribute.planned\\\" >\\r\\n                                                          </mat-form-field>\\r\\n                                                        </div>\\r\\n                                                        <div class=\\\"button-row\\\">\\r\\n                                          \\r\\n                                                              <button mat-raised-button color=\\\"accent\\\" (click)=\\\"addmanFieldValue()\\\">Add</button>\\r\\n                                                              \\r\\n                                                              \\r\\n                                                            </div>                              \\r\\n                                                            <table *ngIf=\\\"manadded\\\"  style=\\\"margin-top:20px\\\">\\r\\n                                                                <thead>\\r\\n                                                                    <tr>\\r\\n                                                                        <th>Shift</th>\\r\\n                                                                        <th>Start Time</th>\\r\\n                                                                        <th>End Time</th>\\r\\n                                                                        <th>Planned</th>\\r\\n                                                                        <th>Action</th>\\r\\n                                                                    </tr>\\r\\n                                                                </thead>\\r\\n                                                                <tbody>\\r\\n                                                                    <tr *ngFor=\\\"let field of fieldArray; let i = index\\\">\\r\\n                                                                        <td>\\r\\n                                                                            <input [(ngModel)]=\\\"field.shift\\\" class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"{{field.shift}}\\\" />\\r\\n                                                                        </td>\\r\\n                                                                      \\r\\n                                                                        <td>\\r\\n                                                                            <input [(ngModel)]=\\\"field.starttime\\\" class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"{{field.sarttime}}\\\" />\\r\\n                                                                        </td>\\r\\n                                                                       \\r\\n                                                                        <td>\\r\\n                                                                            <input [(ngModel)]=\\\"field.endtime\\\" class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"{{field.endtime}}\\\" />\\r\\n                                                                        </td>\\r\\n                                                                        <td>\\r\\n                                                                            <input [(ngModel)]=\\\"field.planned\\\" class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"{{field.planned}}\\\" />\\r\\n                                                                        </td>\\r\\n                                                                        <td>\\r\\n                                                                            <button mat-icon-button>\\r\\n                                                                                <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\"  matTooltip=\\\"Delete\\\" (click)=\\\"deletemanFieldValue(i)\\\">highlight_off</mat-icon>\\r\\n                                                                              </button>\\r\\n                                                                           \\r\\n                                                                           \\r\\n                                                                        </td>\\r\\n                                                                    </tr>\\r\\n                                                                   \\r\\n                                                                </tbody>\\r\\n                                                            </table>\\r\\n                                    </mat-expansion-panel>\\r\\n                                    <mat-expansion-panel (opened)=\\\"panelOpenState = true\\\"\\r\\n                                                         (closed)=\\\"panelOpenState = false\\\">\\r\\n                                      <mat-expansion-panel-header>\\r\\n                                        <mat-panel-title>\\r\\n                                          Material\\r\\n                                        </mat-panel-title>\\r\\n                                        <mat-panel-description>\\r\\n                                          Enter the Material detail\\r\\n                                        </mat-panel-description>\\r\\n                                      </mat-expansion-panel-header>\\r\\n                                      <div class=\\\"row\\\">\\r\\n                                      <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                            <input type=\\\"text\\\" placeholder=\\\"Material Type\\\" aria-label=\\\"Number\\\" matInput  [(ngModel)]=\\\"newAttribute1.materialtype\\\" [matAutocomplete]=\\\"auto5\\\">\\r\\n                                            <mat-autocomplete #auto5=\\\"matAutocomplete\\\" >\\r\\n                                              <mat-option *ngFor=\\\"let option of Materialtype\\\" [value]=\\\"option\\\" (click)=\\\"materialtype(option)\\\">\\r\\n                                                {{option}}\\r\\n                                              </mat-option>\\r\\n                                            </mat-autocomplete>\\r\\n                                          </mat-form-field>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"row\\\">\\r\\n                                                <mat-form-field>\\r\\n                                                        <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Commitment Date\\\" [(ngModel)]=\\\"newAttribute1.commitmentdate\\\">\\r\\n                                                        <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n                                                        <mat-datepicker #picker ></mat-datepicker>\\r\\n                                                      </mat-form-field>\\r\\n                                              </div>\\r\\n                                              <div class=\\\"button-row\\\">\\r\\n                                          \\r\\n                                                    <button mat-raised-button color=\\\"accent\\\" (click)=\\\"addmatFieldValue()\\\">Add</button>\\r\\n                                                    \\r\\n                                                    \\r\\n                                                  </div>  \\r\\n                                                  \\r\\n                                                  <table *ngIf=\\\"matadded\\\"  style=\\\"margin-top:20px\\\">\\r\\n                                                      <thead>\\r\\n                                                          <tr>\\r\\n                                                              <th>Material Type</th>\\r\\n                                                              <th>Commitment Date</th>\\r\\n                                                              <th>Action</th>\\r\\n                                                             \\r\\n                                                          </tr>\\r\\n                                                      </thead>\\r\\n                                                      <tbody>\\r\\n                                                          <tr *ngFor=\\\"let field1 of fieldArray1; let i = index\\\">\\r\\n                                                              <td>\\r\\n                                                                  <input [(ngModel)]=\\\"field1.materialtype\\\"  type=\\\"text\\\" name=\\\"{{field1.materialtype}}\\\" />\\r\\n                                                              </td>\\r\\n                                                            \\r\\n                                                              <td>\\r\\n                                                                  <input [(ngModel)]=\\\"field1.commitmentdate\\\"  type=\\\"text\\\" name=\\\"{{field1.commitmentdate}}\\\" />\\r\\n                                                              </td>\\r\\n                                                             \\r\\n                                                              \\r\\n                                                              <td>\\r\\n                                                                  <button mat-icon-button>\\r\\n                                                                      <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\"  matTooltip=\\\"Delete\\\" (click)=\\\"deletematFieldValue(i)\\\">highlight_off</mat-icon>\\r\\n                                                                    </button>\\r\\n                                                                 \\r\\n                                                                 \\r\\n                                                              </td>\\r\\n                                                          </tr>\\r\\n                                                         \\r\\n                                                      </tbody>\\r\\n                                                  </table>\\r\\n                                    </mat-expansion-panel>\\r\\n                                    <mat-expansion-panel (opened)=\\\"panelOpenState = true\\\"\\r\\n                                                         (closed)=\\\"panelOpenState = false\\\">\\r\\n                                      <mat-expansion-panel-header>\\r\\n                                        <mat-panel-title>\\r\\n                                         Machine\\r\\n                                        </mat-panel-title>\\r\\n                                        <mat-panel-description>\\r\\n                                          Enter the Machine detail\\r\\n                                        </mat-panel-description>\\r\\n                                      </mat-expansion-panel-header>\\r\\n                                      <div class=\\\"row\\\">\\r\\n                                            <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                                  <input type=\\\"text\\\" placeholder=\\\"Machine Type\\\" aria-label=\\\"Number\\\" matInput [matAutocomplete]=\\\"auto6\\\" [(ngModel)]=\\\"newAttribute2.machinetype\\\">\\r\\n                                                  <mat-autocomplete #auto6=\\\"matAutocomplete\\\">\\r\\n                                                    <mat-option *ngFor=\\\"let option of options\\\" [value]=\\\"option\\\">\\r\\n                                                      {{option}}\\r\\n                                                    </mat-option>\\r\\n                                                  </mat-autocomplete>\\r\\n                                                </mat-form-field>\\r\\n                                              </div>\\r\\n                                              <div class=\\\"row\\\">\\r\\n                                                      <mat-form-field>\\r\\n                                                        <input matInput placeholder=\\\"Equipment Type\\\" [(ngModel)]=\\\"newAttribute2.equipmenttype\\\">\\r\\n                                                      </mat-form-field>\\r\\n                                                    </div>\\r\\n                                                    <div class=\\\"row\\\">\\r\\n                                                            <mat-form-field>\\r\\n                                                              <input matInput placeholder=\\\"Model No\\\" [(ngModel)]=\\\"newAttribute2.modelno\\\" >\\r\\n                                                            </mat-form-field>\\r\\n                                                          </div>\\r\\n                                                          <div class=\\\"row\\\">\\r\\n                                                                <mat-form-field>\\r\\n                                                                  <input matInput placeholder=\\\"Serial NO\\\" [(ngModel)]=\\\"newAttribute2.serialno\\\">\\r\\n                                                                </mat-form-field>\\r\\n                                                              </div>\\r\\n                                                              <div class=\\\"button-row\\\">\\r\\n                                          \\r\\n                                                                    <button mat-raised-button color=\\\"accent\\\" (click)=\\\"addmacFieldValue()\\\">Add</button>\\r\\n                                                                    \\r\\n                                                                    \\r\\n                                                                  </div>    \\r\\n                                                                  \\r\\n                                                                  <table *ngIf=\\\"macadded\\\"  style=\\\"margin-top:20px\\\">\\r\\n                                                                      <thead>\\r\\n                                                                          <tr>\\r\\n                                                                              <th>Machine Type</th>\\r\\n                                                                              <th>Equipment Type</th>\\r\\n                                                                              <th>Model No</th>\\r\\n                                                                              <th>Serial No</th>\\r\\n                                                                              <th>Action</th>\\r\\n                                                                          </tr>\\r\\n                                                                      </thead>\\r\\n                                                                      <tbody>\\r\\n                                                                          <tr *ngFor=\\\"let field2 of fieldArray2; let i = index\\\">\\r\\n                                                                              <td>\\r\\n                                                                                  <input [(ngModel)]=\\\"field2.machinetype\\\" class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"{{field2.machinetype}}\\\" />\\r\\n                                                                              </td>\\r\\n                                                                            \\r\\n                                                                              <td>\\r\\n                                                                                  <input [(ngModel)]=\\\"field2.equipmenttype\\\" class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"{{field2.equipmenttype}}\\\" />\\r\\n                                                                              </td>\\r\\n                                                                             \\r\\n                                                                              <td>\\r\\n                                                                                  <input [(ngModel)]=\\\"field2.modelno\\\" class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"{{field2.modelno}}\\\" />\\r\\n                                                                              </td>\\r\\n                                                                              <td>\\r\\n                                                                                  <input [(ngModel)]=\\\"field2.serialno\\\" class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"{{field2.serialno}}\\\" />\\r\\n                                                                              </td>\\r\\n                                                                              <td>\\r\\n                                                                                  <button mat-icon-button>\\r\\n                                                                                      <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\"  matTooltip=\\\"Delete\\\" (click)=\\\"deletemacFieldValue(i)\\\">highlight_off</mat-icon>\\r\\n                                                                                    </button>\\r\\n                                                                                 \\r\\n                                                                                 \\r\\n                                                                              </td>\\r\\n                                                                          </tr>\\r\\n                                                                         \\r\\n                                                                      </tbody>\\r\\n                                                                  </table>\\r\\n                                    </mat-expansion-panel>\\r\\n                                  </mat-accordion>\\r\\n                                  </mat-card-content>\\r\\n                                </mat-card >\\r\\n                    </div>\\r\\n                    <div class=\\\"button-row\\\">\\r\\n                                          \\r\\n                        <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postSite()\\\">Submit</button>\\r\\n                        \\r\\n                        \\r\\n                      </div>    \\r\\n                    </div>\\r\\n                    \\r\\n                    </div>\\r\\n                   \\r\\n                  \\r\\n            </mat-tab>\\r\\n            <mat-tab label=\\\"Escalation\\\"> <div class=\\\"escalation-box mat-elevation-z4\\\">\\r\\n                    <div >\\r\\n                        <button mat-mini-fab>\\r\\n                            <mat-icon aria-label=\\\"\\\" routerLink=\\\"../escalationview\\\">remove_red_eye</mat-icon>\\r\\n                          </button>\\r\\n                          <mat-progress-bar *ngIf=\\\"isLoadingResults\\\" mode=\\\"indeterminate\\\" ></mat-progress-bar>\\r\\n                        <mat-form-field class=\\\"example-full-width\\\">\\r\\n                            <input matInput placeholder=\\\"Type of Escalation\\\" [(ngModel)]=\\\"escalationtype.escalationType\\\">\\r\\n                          </mat-form-field>\\r\\n                         \\r\\n                            \\r\\n              \\r\\n                                  <div class=\\\"button-row\\\">\\r\\n                                      \\r\\n                                      <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postEscalationType()\\\">Add</button>\\r\\n                                      \\r\\n                                      \\r\\n                                    </div>\\r\\n                    </div>\\r\\n                     \\r\\n                    </div> </mat-tab>\\r\\n            </mat-tab-group>\\r\\n            </div>\\r\\n</div>\\r\\n</div>\\r\\n\\r\\n  \\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { Toolbarservice } from '../my-nav/my-nav.service';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {FormControl} from '@angular/forms';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport {map, startWith} from 'rxjs/operators';\r\nimport {DataService} from '../data.service';\r\nimport { Observable, of } from 'rxjs'\r\n\r\n\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-masterdata',\r\n  templateUrl: './masterdata.component.html',\r\n  styleUrls: ['./masterdata.component.css'],\r\n  providers: [Toolbarservice]\r\n})\r\nexport class MasterdataComponent implements OnInit {\r\n \r\n  myControl1 = new FormControl();\r\n  Contracttype: string[] = ['Manpower', 'Lumsum', 'SLA' , 'One Time', 'Project Event' , 'PartTimers'];\r\n  Materialtype: string[] = ['Fixed materials', 'At Actual'];\r\n  Designation: string[] = ['SENIOR MANAGER', 'MANAGER' , 'ASST MANAGER'];\r\n\r\n\r\n isLoadingResults = false;\r\n  private fieldArray: Array<any> = [];\r\n  private fieldArray1: Array<any> = [];\r\n  private fieldArray2: Array<any> = [];\r\n  private newAttribute: any = {};\r\n  private newAttribute1: any = {};\r\n  private newAttribute2: any = {};\r\n  matadded = false;\r\n  manadded = false;\r\n  macadded = false;\r\n  materialtype(type){\r\n    console.log(type);\r\n  }\r\n\r\n\r\n  addmanFieldValue(newAttribute) {\r\n    this.manadded = true;\r\n   \r\n      this.fieldArray.push(this.newAttribute);\r\n     // console.log(this.fieldArray);\r\n      this.newAttribute = {};\r\n  }\r\n\r\n  deletemanFieldValue(index) {\r\n   \r\n      this.fieldArray.splice(index, 1);\r\n      if (this.fieldArray.length < 1) {\r\n      this.manadded = false;\r\n      }\r\n  }\r\n\r\n\r\n  addmatFieldValue(newAttribute1) {\r\n    this.matadded = true;\r\n  \r\n      this.fieldArray1.push(this.newAttribute1);\r\n     // console.log(this.fieldArray);\r\n      this.newAttribute1 = {};\r\n  }\r\n\r\n  deletematFieldValue(index) {\r\n   \r\n      this.fieldArray1.splice(index, 1);\r\n      if (this.fieldArray1.length < 1) {\r\n      this.matadded = false;\r\n      }\r\n  }\r\n\r\n  addmacFieldValue(newAttribute2) {\r\n    this.macadded = true;\r\n   \r\n      this.fieldArray2.push(this.newAttribute2);\r\n     // console.log(this.fieldArray);\r\n      this.newAttribute2 = {};\r\n  }\r\n\r\n  deletemacFieldValue(index) {\r\n   \r\n      this.fieldArray2.splice(index, 1);\r\n      if (this.fieldArray2.length < 1) {\r\n      this.macadded = false;\r\n      }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  visible = true;\r\n  constructor(private http: HttpClient, private activaterouter: ActivatedRoute, private router: Router, public nav: Toolbarservice, private data: DataService){}\r\n//Variable declation\r\n  myControl = new FormControl();\r\n  public emp={};\r\n  public client={};\r\n  public site={\"projectId\":\"\",\"projectName\":\"\",\"regionalManagerId\":\"\",\"seniorManagerId\":\"\",\"asstSeniorManagerId\":\"\",\"siteInchargeId\":\"\",\r\n  \"manPowerDTO\":[],\"machineDTO\":[],\"materialDTO\":[]};\r\n  projects: Object;\r\n  sites: Object;\r\n  employees: Object;\r\n  public manpower={};\r\n  public material={};\r\n  public machine={};\r\n  public escalationtype={};\r\n  \r\n\r\n\r\n  postEmployee()\r\n  {\r\n    \r\n   \r\n    this.http.post('http://localhost:8080/uds/employee', this.emp)\r\n    \r\n      .subscribe(\r\n        (data:any) => { \r\n          if(data.length) {\r\n            console.log(data);\r\n           \r\n          }\r\n          this.isLoadingResults = false;\r\n        },\r\n        error => {\r\n         \r\n        },\r\n        () => {\r\n          console.log('finished');\r\n        }\r\n      );\r\n  }\r\n\r\n  postClient()\r\n  {\r\n    \r\n    this.isLoadingResults = true;\r\n    \r\n    console.log(this.client);\r\n    this.http.post('http://localhost:8080/uds/project', this.client)\r\n      .subscribe(\r\n        (data:any) => { \r\n          if(data.length) {\r\n            console.log(data);\r\n           \r\n          }\r\n          this.isLoadingResults = false;\r\n        },\r\n        error => {\r\n         \r\n        },\r\n        () => {\r\n          console.log('finished');\r\n        }\r\n      );\r\n      \r\n  }\r\n\r\n  postSite()\r\n  {\r\n\r\n    this.site.manPowerDTO = this.fieldArray;\r\n    this.site.machineDTO = this.fieldArray2;\r\n    this.site.materialDTO = this.fieldArray1;\r\n   // this.createSiteJson();\r\n    console.log(this.site);\r\n    this.http.post('http://localhost:8080/uds/site', this.site)\r\n    .subscribe(\r\n      (data:any) => {\r\n        console.log(data);\r\n      }\r\n    );\r\n  }\r\n\r\n  postEscalationType()\r\n  {\r\n   \r\n    this.isLoadingResults = true;\r\n    \r\n    console.log(this.site);\r\n    this.http.post('http://localhost:8080//uds/esctype', this.escalationtype)\r\n    \r\n    .subscribe(\r\n      (data:any) => {\r\n        console.log(data);\r\n        \r\n      }, error => {\r\n         \r\n      },\r\n      () => {\r\n        console.log('finished');\r\n      }\r\n     \r\n    );\r\n  \r\n   \r\n  }\r\n\r\n  listClient()\r\n  {\r\n    this.data.getProjects().subscribe(\r\n      data => this.projects = data      \r\n    );\r\n    console.log(this.data);\r\n  }\r\n\r\n  listEmployees()\r\n  {\r\n    this.data.getEmployee().subscribe(\r\n      data => this.employees = data['content']\r\n    );\r\n    console.log(this.data);\r\n  }\r\n\r\n  createSiteJson()\r\n  {\r\n    this.site.manPowerDTO.push(this.manpower);\r\n    this.site.machineDTO.push(this.machine);\r\n    this.site.materialDTO.push(this.material);\r\n  }\r\n\r\n  setSiteProject(id:string)\r\n  {\r\n    console.log(id);\r\n    this.site.projectId = id;\r\n  }\r\n\r\n  setSiteRM(id:string)\r\n  {\r\n    console.log(id);\r\n    this.site.regionalManagerId = id;\r\n  }\r\n\r\n  setSiteSM(id:string)\r\n  {\r\n    console.log(id);\r\n    this.site.seniorManagerId = id;\r\n  }\r\n\r\n  setSiteASM(id:string)\r\n  {\r\n    console.log(id);\r\n    this.site.asstSeniorManagerId = id;\r\n  }\r\n\r\n  setSiteSI(id:string)\r\n  {\r\n    console.log(id);\r\n    this.site.siteInchargeId = id;\r\n    console.log(this.site);\r\n  }\r\n\r\n \r\n  ngOnInit() {\r\n    this.listClient();\r\n    this.listEmployees();\r\n\r\n   /* this.filteredOptions = this.myControl.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n        map(value => this._filter(value))\r\n      );*/\r\n  }\r\n\r\n  /*private _filter(value: string): string[] {\r\n    const filterValue = value.toLowerCase();\r\n\r\n    return this.options.filter(option => option.toLowerCase().includes(filterValue));\r\n  }*/\r\n\r\ncloseprogess(){\r\n  this.isLoadingResults = false;\r\n}\r\n\r\n}\r\n","module.exports = \"table {\\r\\n    width: 100%;\\r\\n   \\r\\n  }\\r\\n  .left_margin{\\r\\n      margin-left: 15px;\\r\\n  }\\r\\n  .left_margin-filter{\\r\\n    margin-left: 20px;\\r\\n}\"","module.exports = \"<div class=\\\"example-container\\\">\\r\\n  <div id = \\\"layoutContainer\\\" \\r\\n  fxLayout = \\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutwrap fxLayoutGap=\\\"0.15%\\\">\\r\\n  <div fxflex = \\\"100\\\" >\\r\\n      <div class=\\\"example-container\\\">\\r\\n          <mat-tab-group >\\r\\n            <mat-tab label=\\\"Employee\\\">\\r\\n              <div class=\\\"example-container mat-elevation-z8\\\">\\r\\n                <div class=\\\"example-loading-shade\\\"\\r\\n                     *ngIf=\\\"isLoadingResults || isRateLimitReached\\\">\\r\\n                  <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\r\\n                  <div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\r\\n                    GitHub's API rate limit has been reached. It will be reset in one minute.\\r\\n                  </div>\\r\\n                </div>\\r\\n              \\r\\n                <div class=\\\"example-table-container\\\">\\r\\n              \\r\\n                  <table mat-table [dataSource]=\\\"data\\\" class=\\\"example-table\\\"\\r\\n                        >\\r\\n                    <!-- Number Column -->\\r\\n                    <ng-container matColumnDef=\\\"code\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>#</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.code}}</td>\\r\\n                    </ng-container>\\r\\n              \\r\\n                    <!-- Title Column -->\\r\\n                    <ng-container matColumnDef=\\\"name\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>Title</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.name}}</td>\\r\\n                    </ng-container>\\r\\n              \\r\\n                    <!-- State Column -->\\r\\n                    <ng-container matColumnDef=\\\"designation\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.designation}}</td>\\r\\n                    </ng-container>\\r\\n                    <ng-container matColumnDef=\\\"mail\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.mail}}</td>\\r\\n                    </ng-container>\\r\\n                    <ng-container matColumnDef=\\\"phone\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.phone}}</td>\\r\\n                    </ng-container>\\r\\n                   \\r\\n              \\r\\n                    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n                    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                  </table>\\r\\n                </div>\\r\\n              \\r\\n                <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"10\\\"></mat-paginator>\\r\\n              </div>\\r\\n            </mat-tab>\\r\\n            <mat-tab label=\\\"Client\\\">\\r\\n              <div class=\\\"example-container mat-elevation-z8\\\">\\r\\n                <div class=\\\"example-loading-shade\\\"\\r\\n                     *ngIf=\\\"isLoadingResults || isRateLimitReached\\\">\\r\\n                  <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\r\\n                  <div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\r\\n                    GitHub's API rate limit has been reached. It will be reset in one minute.\\r\\n                  </div>\\r\\n                </div>\\r\\n              \\r\\n                <div class=\\\"example-table-container\\\">\\r\\n              \\r\\n                  <table mat-table [dataSource]=\\\"data\\\" class=\\\"example-table\\\"\\r\\n                        >\\r\\n                    <!-- Number Column -->\\r\\n                    <ng-container matColumnDef=\\\"code\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>#</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.code}}</td>\\r\\n                    </ng-container>\\r\\n              \\r\\n                    <!-- Title Column -->\\r\\n                    <ng-container matColumnDef=\\\"name\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>Title</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.name}}</td>\\r\\n                    </ng-container>\\r\\n              \\r\\n                    <!-- State Column -->\\r\\n                    <ng-container matColumnDef=\\\"designation\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.designation}}</td>\\r\\n                    </ng-container>\\r\\n                    <ng-container matColumnDef=\\\"mail\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.mail}}</td>\\r\\n                    </ng-container>\\r\\n                    <ng-container matColumnDef=\\\"phone\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.phone}}</td>\\r\\n                    </ng-container>\\r\\n                   \\r\\n              \\r\\n                    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n                    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                  </table>\\r\\n                </div>\\r\\n              \\r\\n                <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"10\\\"></mat-paginator>\\r\\n              </div>\\r\\n            </mat-tab>\\r\\n            <mat-tab label=\\\"Site\\\">  \\r\\n              <div class=\\\"example-container mat-elevation-z8\\\">\\r\\n                <div class=\\\"example-loading-shade\\\"\\r\\n                     *ngIf=\\\"isLoadingResults || isRateLimitReached\\\">\\r\\n                  <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\r\\n                  <div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\r\\n                    GitHub's API rate limit has been reached. It will be reset in one minute.\\r\\n                  </div>\\r\\n                </div>\\r\\n              \\r\\n                <div class=\\\"example-table-container\\\">\\r\\n              \\r\\n                  <table mat-table [dataSource]=\\\"data\\\" class=\\\"example-table\\\"\\r\\n                        >\\r\\n                    <!-- Number Column -->\\r\\n                    <ng-container matColumnDef=\\\"code\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>#</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.code}}</td>\\r\\n                    </ng-container>\\r\\n              \\r\\n                    <!-- Title Column -->\\r\\n                    <ng-container matColumnDef=\\\"name\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>Title</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.name}}</td>\\r\\n                    </ng-container>\\r\\n              \\r\\n                    <!-- State Column -->\\r\\n                    <ng-container matColumnDef=\\\"designation\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.designation}}</td>\\r\\n                    </ng-container>\\r\\n                    <ng-container matColumnDef=\\\"mail\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.mail}}</td>\\r\\n                    </ng-container>\\r\\n                    <ng-container matColumnDef=\\\"phone\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.phone}}</td>\\r\\n                    </ng-container>\\r\\n                   \\r\\n              \\r\\n                    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n                    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                  </table>\\r\\n                </div>\\r\\n              \\r\\n                <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"10\\\"></mat-paginator>\\r\\n              </div>\\r\\n                 \\r\\n                \\r\\n          </mat-tab>\\r\\n          <mat-tab label=\\\"Escalation\\\"> \\r\\n              <div class=\\\"example-container mat-elevation-z8\\\">\\r\\n                  <div class=\\\"example-loading-shade\\\"\\r\\n                       *ngIf=\\\"isLoadingResults || isRateLimitReached\\\">\\r\\n                    <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\r\\n                    <div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\r\\n                      GitHub's API rate limit has been reached. It will be reset in one minute.\\r\\n                    </div>\\r\\n                  </div>\\r\\n                \\r\\n                  <div class=\\\"example-table-container\\\">\\r\\n                \\r\\n                    <table mat-table [dataSource]=\\\"data\\\" class=\\\"example-table\\\"\\r\\n                          >\\r\\n                      <!-- Number Column -->\\r\\n                      <ng-container matColumnDef=\\\"code\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef>#</th>\\r\\n                        <td mat-cell *matCellDef=\\\"let row\\\">{{row.code}}</td>\\r\\n                      </ng-container>\\r\\n                \\r\\n                      <!-- Title Column -->\\r\\n                      <ng-container matColumnDef=\\\"name\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef>Title</th>\\r\\n                        <td mat-cell *matCellDef=\\\"let row\\\">{{row.name}}</td>\\r\\n                      </ng-container>\\r\\n                \\r\\n                      <!-- State Column -->\\r\\n                      <ng-container matColumnDef=\\\"designation\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                        <td mat-cell *matCellDef=\\\"let row\\\">{{row.designation}}</td>\\r\\n                      </ng-container>\\r\\n                      <ng-container matColumnDef=\\\"mail\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                        <td mat-cell *matCellDef=\\\"let row\\\">{{row.mail}}</td>\\r\\n                      </ng-container>\\r\\n                      <ng-container matColumnDef=\\\"phone\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                        <td mat-cell *matCellDef=\\\"let row\\\">{{row.phone}}</td>\\r\\n                      </ng-container>\\r\\n                     \\r\\n                \\r\\n                      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n                      <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                    </table>\\r\\n                  </div>\\r\\n                \\r\\n                  <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"10\\\"></mat-paginator>\\r\\n                </div>  \\r\\n          </mat-tab>\\r\\n          </mat-tab-group>\\r\\n          </div>\\r\\n</div>\\r\\n</div>\\r\\n</div>\"","import { Component, OnInit , ViewChild} from '@angular/core';\r\nimport {MatPaginator, MatSort, MatTableDataSource} from '@angular/material';\r\nimport {DataService} from '../data.service';\r\nimport {merge, Observable, of as observableOf} from 'rxjs';\r\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\r\nimport { DataSource } from '@angular/cdk/table';\r\nimport {HttpClient} from '@angular/common/http';\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-masterview',\r\n  templateUrl: './masterview.component.html',\r\n  styleUrls: ['./masterview.component.css']\r\n})\r\nexport class MasterviewComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = [  'code', 'name', 'designation', 'mail' , 'phone'];\r\n  udsDatabase: UdsHttpDao | null;\r\n  data: Employeedata[] = [];\r\n\r\n  resultsLength = 0;\r\n  isLoadingResults = true;\r\n  isRateLimitReached = false;\r\n\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  ngOnInit() {\r\n    this.udsDatabase = new UdsHttpDao(this.http);\r\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\r\n\r\n\r\n    merge(this.sort.sortChange, this.paginator.page)\r\n    .pipe(\r\n      startWith({}),\r\n      switchMap(() => {\r\n        this.isLoadingResults = true;\r\n        // tslint:disable-next-line:no-non-null-assertion\r\n        return this.udsDatabase!.getRepoIssues(\r\n          this.sort.active, this.sort.direction, this.paginator.pageIndex);\r\n      }),\r\n      map(data => {\r\n        // Flip flag to show that loading has finished.\r\n        this.isLoadingResults = false;\r\n        this.isRateLimitReached = false;\r\n        this.resultsLength = data.total_count;\r\n\r\n        return data.items;\r\n      }),\r\n      catchError(() => {\r\n        this.isLoadingResults = false;\r\n        // Catch if the GitHub API has reached its rate limit. Return empty data.\r\n        this.isRateLimitReached = true;\r\n        return observableOf([]);\r\n      })\r\n    ).subscribe(data => this.data = data);\r\n}\r\n\r\n    /* this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort; */\r\n    /* this.data.getEmployee().subscribe(\r\n      data => this.users$ = data\r\n    // tslint:disable-next-line:semicolon\r\n    ) */\r\n  }\r\n\r\n  export interface UdsApi {\r\n    items: Employeedata[];\r\n    total_count: number;\r\n\r\n  }\r\n\r\n  export interface Employeedata {\r\n\r\n    code: number;\r\n    designation: string;\r\n    mail: string;\r\n    mob: number;\r\n    name: string;\r\n  }\r\n\r\n  export class UdsHttpDao {\r\n    constructor(private http: HttpClient) {}\r\n\r\n    getRepoIssues(sort: string, order: string, page: number): Observable<UdsApi> {\r\n      const href = 'http://localhost:8080/uds/employee/search';\r\n      const requestUrl =\r\n      `${href}&sort=${sort}&order=${order}&page=${page + 1}`;\r\n\r\n\r\n      return this.http.get<UdsApi>(requestUrl);\r\n    }\r\n  }\r\n","export class Employ {\r\n    id: number;\r\n    code: number;\r\n    designation: string;\r\n    name: string;\r\n    mail: string;\r\n    mob: number;\r\n}\r\n","export class MachineTransaction {\r\n    id: number;\r\n    machineType: string;\r\n    equipmentType: string;\r\n    status: string;\r\n    complaintRaisedDate: string;\r\n    ResolutionDate: string;\r\n}","export class ManPower {\r\n    id: number;\r\n    typeOfService: string;\r\n    planned: number;\r\n    startTime: string;\r\n    endTime: string;\r\n\r\n}","export class ManPowerTransaction {\r\n    id: number;\r\n    planned: number;\r\n    actual: number; \r\n    shortfall: number;\r\n    totalNoOfRelievers: number;\r\n    shiftTime: string;\r\n    projectId: number;\r\n    siteId: number;\r\n}","export class MaterialTransaction {\r\n    id: number;\r\n    materialType: string;\r\n    commitmentDate: string;\r\n    indentSubmissionDate: string;\r\n    materialSupplyDate: string;\r\n    uniformSupplyDate: string;\r\n    submitDate: string;\r\n    status: string;\r\n    remarks: string;\r\n    siteId: string;\r\n}\r\n","export class Project {\r\n    id: number;\r\n    code: number;\r\n    name: string; \r\n}","import { ManPower } from \"./manpower.model\";\r\nimport { Material } from \"./material.model\";\r\nimport { Machine } from \"./machine.model\";\r\n\r\nexport class Site {\r\n    id: number;\r\n    projectId: number;\r\n    projectName: string;\r\n    name: string;\r\n    address: string;\r\n    contractType: string;\r\n    regionalManagerId: number;\r\n    seniorManagerId: number;\r\n    asstSeniorManagerId: number;\r\n    siteInchargeId: number;\r\n    manPowerDTO: Array<ManPower>;\r\n    materialDTO: Array<Material>;\r\n    machineDTO: Array<Machine>;\r\n\r\n}","module.exports = \".sidenav-container {\\n  height: 100%;\\n}\\n\\n.sidenav {\\n  width: 200px;\\n  box-shadow: 3px 0 6px rgba(0,0,0,.24);\\n}\\n\\n.mat-toolbar.mat-primary {\\n  \\n  position: -webkit-sticky;\\n  \\n  position: sticky;\\n  top: 0;\\n  z-index: 2;\\n}\\n\\n.material-icons.color_white { color: #2f496e; }\\n\"","module.exports = \"\\r\\n<mat-sidenav-container class=\\\"sidenav-container\\\"  >\\r\\n\\r\\n  <mat-sidenav *ngIf=\\\"router.url != '/'\\\" style=\\\"background: #92aac7\\\"\\r\\n    #drawer\\r\\n    class=\\\"sidenav\\\"\\r\\n    fixedInViewport=\\\"true\\\"\\r\\n    [attr.role]=\\\"(isHandset$ | async) ? 'dialog' : 'navigation'\\\"\\r\\n    [mode]=\\\"(isHandset$ | async) ? 'over' : 'side'\\\"\\r\\n    [opened]=\\\"!(isHandset$ | async)\\\" >\\r\\n    <mat-toolbar color=\\\"primary\\\"><img class=\\\"logo\\\" src=\\\"assets/uds1.jpg\\\"></mat-toolbar>\\r\\n    <!-- <mat-nav-list >\\r\\n      <a mat-list-item ><i class=\\\"material-icons color_white\\\">description</i><span style=\\\"color: #fff;\\\">Master Data\\r\\n      <button mat-button mat-icon-button (click)=\\\"showSubmenu = !showSubmenu\\\">\\r\\n          <mat-icon class=\\\"menu-button\\\" [ngClass]=\\\"{'rotated' : showSubmenu}\\\">expand_more</mat-icon>\\r\\n        </button></span></a>\\r\\n        <div class=\\\"submenu\\\" [ngClass]=\\\"{'expanded' : showSubmenu}\\\">\\r\\n            <mat-list-item routerLink=\\\"masterview\\\"><span style=\\\"color: #fff;\\\">View</span></mat-list-item>\\r\\n            <mat-list-item routerLink=\\\"masterdata\\\"><span style=\\\"color: #fff;\\\">Add</span></mat-list-item>\\r\\n           \\r\\n          </div>\\r\\n    </mat-nav-list> -->\\r\\n      <mat-nav-list >\\r\\n          <a mat-list-item routerLink=\\\"masterdata\\\"><i class=\\\"material-icons color_white\\\">description</i><span style=\\\"color: #fff;\\\">Masterdata</span></a>\\r\\n      <a mat-list-item routerLink=\\\"opstracker\\\"><i class=\\\"material-icons color_white\\\">library_books</i><span style=\\\"color: #fff;\\\">OpsTracker</span></a>\\r\\n      <a mat-list-item routerLink=\\\"escalation\\\"><i class=\\\"material-icons color_white\\\">queue</i><span style=\\\"color: #fff;\\\">Escalation</span></a>\\r\\n      <a mat-list-item routerLink=\\\"report\\\"><i class=\\\"material-icons color_white\\\">report</i><span style=\\\"color: #fff;\\\">Report</span></a>\\r\\n    </mat-nav-list>\\r\\n   \\r\\n  </mat-sidenav>\\r\\n  <mat-sidenav-content>\\r\\n    <mat-toolbar *ngIf=\\\"router.url != '/'\\\" color=\\\"primary\\\" >\\r\\n      <button\\r\\n        type=\\\"button\\\"\\r\\n        aria-label=\\\"Toggle sidenav\\\"\\r\\n        mat-icon-button\\r\\n        (click)=\\\"drawer.toggle()\\\"\\r\\n        *ngIf=\\\"isHandset$ | async\\\">\\r\\n        <mat-icon aria-label=\\\"Side nav toggle icon\\\">Menu</mat-icon>\\r\\n      </button>\\r\\n      <span>Updater Service Opstracker</span>\\r\\n    </mat-toolbar>\\r\\n    \\r\\n    <!-- Add Content Here -->\\r\\n    <router-outlet></router-outlet>\\r\\n  </mat-sidenav-content>\\r\\n</mat-sidenav-container>\\r\\n\\r\\n\"","import { Component , HostBinding, OnInit } from '@angular/core';\r\nimport { Toolbarservice } from './my-nav.service';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\n\r\nimport { BreakpointObserver, Breakpoints, BreakpointState } from '@angular/cdk/layout';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Component({\r\n\r\n  selector: 'app-my-nav',\r\n  templateUrl: './my-nav.component.html',\r\n  styleUrls: ['./my-nav.component.css'],\r\n  providers: [Toolbarservice]\r\n})\r\nexport class MyNavComponent implements OnInit {\r\n  @HostBinding('class.is-open')\r\n  showSubmenu = false;\r\n  isOpen = false;\r\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n    .pipe(\r\n      map(result => result.matches)\r\n    );\r\n\r\n  constructor(private breakpointObserver: BreakpointObserver, public nav: Toolbarservice,  private router: Router ) {\r\nconsole.log(this.router.url);\r\n  }\r\n  ngOnInit() {\r\n\r\n  }\r\n  }\r\n","import { Injectable, Output, EventEmitter } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class Toolbarservice {\r\n    isOpen = false;\r\n    @Output() change: EventEmitter<boolean> = new EventEmitter();\r\n}\r\n\r\n","module.exports = \".example-container {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n  }\\r\\n  \\r\\n  .example-container > * {\\r\\n      padding-left: 20px;\\r\\n      padding-top: 20px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .accordian > * {\\r\\n    padding-left: 50px;\\r\\n    padding-top: 5px;\\r\\n \\r\\n}\\r\\n  \\r\\n  .example-stretched-tabs {\\r\\n    max-width: 800px;\\r\\n  }\\r\\n  \\r\\n  example-small-box, .employee-box ,.client-box , .site-box, .escalation-box, .opstracker-box , .material-box ,.machine-box{\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    justify-content: center;\\r\\n    margin: 16px;\\r\\n    padding: 16px;\\r\\n    border-radius: 8px;\\r\\n  }\\r\\n  \\r\\n  .example-small-box {\\r\\n    height: 100px;\\r\\n    width: 100px;\\r\\n  }\\r\\n  \\r\\n  .employee-box {\\r\\n    height: 400px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .client-box {\\r\\n    height: 200px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .site-box {\\r\\n    height:650px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .escalation-box {\\r\\n    height: 440px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .opstracker-box {\\r\\n    height: 180px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .material-box {\\r\\n    height: 550px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .machine-box {\\r\\n    height: 600px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .button-row button,\\r\\n.button-row a {\\r\\n  margin-left: 90px;\\r\\n  margin-top: 8px\\r\\n}\\r\\n  \\r\\n  .site-form {\\r\\n  min-width: 150px;\\r\\n  max-width: 500px;\\r\\n  width: 100%;\\r\\n}\\r\\n  \\r\\n  .example-full-width {\\r\\n  width: 100%;\\r\\n}\\r\\n  \\r\\n  .example-headers-align .mat-expansion-panel-header-title, \\r\\n.example-headers-align .mat-expansion-panel-header-description {\\r\\n  flex-basis: 0;\\r\\n}\\r\\n  \\r\\n  .example-headers-align .mat-expansion-panel-header-description {\\r\\n  justify-content: space-between;\\r\\n  align-items: center;\\r\\n}\\r\\n  \\r\\n  .mt{\\r\\n  margin-top: 100px;\\r\\n}\\r\\n  \"","module.exports = \"<div class=\\\"example-container \\\">\\r\\n    <div id = \\\"layoutContainer\\\" \\r\\n    fxLayout = \\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutwrap fxLayoutGap=\\\"0.15%\\\">\\r\\n    \\r\\n    <div fxflex = \\\"50\\\" >\\r\\n    <div >\\r\\n      <mat-card >\\r\\n          <mat-card-header>\\r\\n           \\r\\n                  <mat-card-title>Opstracker</mat-card-title>\\r\\n                 \\r\\n          </mat-card-header>\\r\\n          <mat-divider ></mat-divider> \\r\\n          <mat-card-content>\\r\\n          <div >\\r\\n              <mat-form-field class=\\\"example-full-width\\\">\\r\\n                  <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Date\\\">\\r\\n                  <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n                  <mat-datepicker #picker ></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"example-full-width\\\">\\r\\n              <input type=\\\"text\\\" placeholder=\\\"Client\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto\\\">\\r\\n              <mat-autocomplete #auto=\\\"matAutocomplete\\\">\\r\\n                <mat-option *ngFor=\\\"let option of projects\\\" [value]=\\\"option.name\\\" (onSelectionChange)=\\\"setProject(option.id)\\\">\\r\\n                  {{option.name}}\\r\\n                </mat-option>\\r\\n              </mat-autocomplete>\\r\\n            </mat-form-field>\\r\\n           \\r\\n            \\r\\n           \\r\\n           \\r\\n            \\r\\n              <mat-form-field class=\\\"example-full-width\\\">\\r\\n                  <input type=\\\"text\\\" placeholder=\\\"Site\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto1\\\">\\r\\n                  <mat-autocomplete #auto1=\\\"matAutocomplete\\\">\\r\\n                    <mat-option *ngFor=\\\"let option of sites\\\" [value]=\\\"option.name\\\" (onSelectionChange)=\\\"setSite(option.id)\\\" >\\r\\n                      {{option.name}}\\r\\n                    </mat-option>\\r\\n                  </mat-autocomplete>\\r\\n                </mat-form-field>\\r\\n             \\r\\n             \\r\\n                 \\r\\n  \\r\\n                    \\r\\n                      \\r\\n                   \\r\\n                   \\r\\n                       \\r\\n                        \\r\\n  \\r\\n       </div>\\r\\n       </mat-card-content>\\r\\n       </mat-card>\\r\\n       </div>\\r\\n      </div>\\r\\n       <div class=\\\"accordian\\\">\\r\\n          <div fxflex = \\\"50\\\" >\\r\\n             \\r\\n              <mat-tab-group >\\r\\n               \\r\\n                  <mat-tab label=\\\"Manpower\\\">\\r\\n                      <div class=\\\"employee-box mat-elevation-z4\\\">\\r\\n                      <div >\\r\\n                        \\r\\n                          <mat-form-field class=\\\"example-full-width\\\">\\r\\n                              <input type=\\\"text\\\" placeholder=\\\"Shift\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto3\\\">\\r\\n                              <mat-autocomplete #auto3=\\\"matAutocomplete\\\">\\r\\n                                <mat-option *ngFor=\\\"let option of shifts\\\" [value]=\\\"option\\\" (onSelectionChange)=\\\"setShiftDetails(option)\\\">\\r\\n                                  {{option}}\\r\\n                                </mat-option>\\r\\n                              </mat-autocomplete>\\r\\n                            </mat-form-field>\\r\\n                            <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                <input matInput placeholder=\\\"Planned\\\" [(ngModel)]=\\\"manpowertransaction.planned\\\">\\r\\n                              </mat-form-field>\\r\\n                              <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                  <input matInput placeholder=\\\"Actual\\\" [(ngModel)]=\\\"manpowertransaction.actual\\\" (input)=\\\"setShortFall($event.target.value)\\\">\\r\\n                                </mat-form-field>\\r\\n                                <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                    <input matInput placeholder=\\\"Shortfall\\\" [(ngModel)]=\\\"manpowertransaction.shortfall\\\">\\r\\n                                  </mat-form-field>\\r\\n                                  <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                      <input matInput placeholder=\\\"Total Number of Relivers\\\" [(ngModel)]=\\\"manpowertransaction.totalNoOfRelievers\\\">\\r\\n                                    </mat-form-field>\\r\\n              \\r\\n                                    <div class=\\\"button-row\\\">\\r\\n                                        \\r\\n                                        <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postManPowerTransaction()\\\">Submit</button>\\r\\n                                        \\r\\n                                        \\r\\n                                      </div>\\r\\n                      </div>\\r\\n                       </div>\\r\\n                     \\r\\n                    </mat-tab>\\r\\n                   \\r\\n\\r\\n                   \\r\\n                        <mat-tab label=\\\"Material\\\">\\r\\n\\r\\n                            <div class=\\\"material-box mat-elevation-z4\\\">\\r\\n                                <div >\\r\\n                                  \\r\\n                                    <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                        <input type=\\\"text\\\" placeholder=\\\"Material Type\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto4\\\">\\r\\n                                        <mat-autocomplete #auto4=\\\"matAutocomplete\\\">\\r\\n                                          <mat-option *ngFor=\\\"let option of options\\\" [value]=\\\"option\\\">\\r\\n                                            {{option}}\\r\\n                                          </mat-option>\\r\\n                                        </mat-autocomplete>\\r\\n                                      </mat-form-field>\\r\\n                                      <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                          <input matInput [matDatepicker]=\\\"picker4\\\" placeholder=\\\"Commitment Date\\\" [(ngModel)]=\\\"materialtransaction.commitmentDate\\\">\\r\\n                                          <mat-datepicker-toggle matSuffix [for]=\\\"picker4\\\"></mat-datepicker-toggle>\\r\\n                                          <mat-datepicker #picker4></mat-datepicker>\\r\\n                                        </mat-form-field>\\r\\n                                      <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                          <input matInput [matDatepicker]=\\\"picker1\\\" placeholder=\\\"Indent SubmissionDate\\\" [(ngModel)]=\\\"materialtransaction.indentSubmissionDate\\\">\\r\\n                                          <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\r\\n                                          <mat-datepicker #picker1></mat-datepicker>\\r\\n                                        </mat-form-field>\\r\\n                                        <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                            <input matInput [matDatepicker]=\\\"picker3\\\" placeholder=\\\"Material Supply Date\\\" [(ngModel)]=\\\"materialtransaction.materialSupplyDate\\\">\\r\\n                                            <mat-datepicker-toggle matSuffix [for]=\\\"picker3\\\"></mat-datepicker-toggle>\\r\\n                                            <mat-datepicker #picker3></mat-datepicker>\\r\\n                                          </mat-form-field>\\r\\n                                          <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                              <input matInput [matDatepicker]=\\\"picker2\\\" placeholder=\\\"Uniform Supply  Date\\\" [(ngModel)]=\\\"materialtransaction.uniformSupplyDate\\\">\\r\\n                                              <mat-datepicker-toggle matSuffix [for]=\\\"picker2\\\"></mat-datepicker-toggle>\\r\\n                                              <mat-datepicker #picker2></mat-datepicker>\\r\\n                                            </mat-form-field>\\r\\n                                            \\r\\n                                              <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                                  <input type=\\\"text\\\" placeholder=\\\"Staus\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto5\\\">\\r\\n                                                  <mat-autocomplete #auto5=\\\"matAutocomplete\\\">\\r\\n                                                    <mat-option *ngFor=\\\"let option of options\\\" [value]=\\\"option\\\">\\r\\n                                                      {{option}}\\r\\n                                                    </mat-option>\\r\\n                                                  </mat-autocomplete>\\r\\n                                                </mat-form-field>\\r\\n                                                <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                                    <input matInput placeholder=\\\"Remarks\\\" [(ngModel)]=\\\"materialtransaction.remarks\\\">\\r\\n                                                  </mat-form-field>\\r\\n\\r\\n                                                  \\r\\n                                              <div class=\\\"button-row\\\">\\r\\n                                                  \\r\\n                                                  <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postMaterialTransaction()\\\">Submit</button>\\r\\n                                                  \\r\\n                                                  \\r\\n                                                </div>\\r\\n                                </div>\\r\\n                                 </div>\\r\\n                          </mat-tab>\\r\\n                         \\r\\n\\r\\n\\r\\n                        \\r\\n                              <mat-tab label=\\\"Machine\\\">\\r\\n                                  <div class=\\\"material-box mat-elevation-z4\\\">\\r\\n                                      <div >\\r\\n                                  \\r\\n                                      <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                          <input type=\\\"text\\\" placeholder=\\\"Type of Machine\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto6\\\">\\r\\n                                          <mat-autocomplete #auto6=\\\"matAutocomplete\\\">\\r\\n                                            <mat-option *ngFor=\\\"let option of options\\\" [value]=\\\"option\\\">\\r\\n                                              {{option}}\\r\\n                                            </mat-option>\\r\\n                                          </mat-autocomplete>\\r\\n                                        </mat-form-field>\\r\\n                                          <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                            <input type=\\\"text\\\" placeholder=\\\"Equipment Type\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto7\\\">\\r\\n                                            <mat-autocomplete #auto7=\\\"matAutocomplete\\\">\\r\\n                                              <mat-option *ngFor=\\\"let option of options\\\" [value]=\\\"option\\\">\\r\\n                                                {{option}}\\r\\n                                              </mat-option>\\r\\n                                            </mat-autocomplete>\\r\\n                                          </mat-form-field>\\r\\n                                          <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                              <input matInput placeholder=\\\"Model Number\\\" >\\r\\n                                            </mat-form-field>\\r\\n                                            <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                                <input matInput placeholder=\\\"Serial Number\\\" >\\r\\n                                              </mat-form-field>\\r\\n                                              <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                                  <input type=\\\"text\\\" placeholder=\\\"Status\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto8\\\">\\r\\n                                                  <mat-autocomplete #auto8=\\\"matAutocomplete\\\">\\r\\n                                                    <mat-option *ngFor=\\\"let option of options\\\" [value]=\\\"option\\\">\\r\\n                                                      {{option}}\\r\\n                                                    </mat-option>\\r\\n                                                  </mat-autocomplete>\\r\\n                                                </mat-form-field>\\r\\n                                              \\r\\n                                                <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                                    <input matInput [matDatepicker]=\\\"picker6\\\" placeholder=\\\"Complaint Raised  Date\\\">\\r\\n                                                    <mat-datepicker-toggle matSuffix [for]=\\\"picker6\\\"></mat-datepicker-toggle>\\r\\n                                                    <mat-datepicker #picker6></mat-datepicker>\\r\\n                                                  </mat-form-field>\\r\\n                                                  <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                                      <input matInput [matDatepicker]=\\\"picker7\\\" placeholder=\\\"Resolution  Date\\\">\\r\\n                                                      <mat-datepicker-toggle matSuffix [for]=\\\"picker7\\\"></mat-datepicker-toggle>\\r\\n                                                      <mat-datepicker #picker7></mat-datepicker>\\r\\n                                                    </mat-form-field>\\r\\n                                                 \\r\\n                                                <div class=\\\"button-row\\\">\\r\\n                                                    \\r\\n                                                    <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postMachineTransaction()\\\">Submit</button>\\r\\n                                                    \\r\\n                                                    \\r\\n                                                  </div>\\r\\n                                 \\r\\n                                   </div>\\r\\n                                   </div>\\r\\n                                </mat-tab>\\r\\n                               \\r\\n                                </mat-tab-group>\\r\\n            \\r\\n            </div>\\r\\n       </div>\\r\\n      </div>\\r\\n      </div>\"","import { Component, OnInit, Injectable } from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\nimport {Observable} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {DataService} from '../data.service';\r\nimport { Site } from '../models/site.model';\r\nimport { Project } from '../models/project.model';\r\nimport { ManPowerTransaction } from '../models/manpowertransaction.model';\r\nimport { ManPower } from '../models/manpower.model';\r\nimport { MaterialTransaction } from '../models/materialtransaction.model';\r\nimport { MachineTransaction } from '../models/machinetransaction.model';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-opstracker',\r\n  templateUrl: './opstracker.component.html',\r\n  styleUrls: ['./opstracker.component.css']\r\n})\r\n\r\n\r\nexport class OpstrackerComponent implements OnInit {\r\n\r\n  //Constructor call\r\n  constructor(private data: DataService, private http: HttpClient) { }\r\n\r\n  myControl = new FormControl();\r\n  //variable declation\r\n  projects: Object;\r\n  sites: Object;\r\n  project = new Project();\r\n  site = new Site();\r\n  manpowers: Array<ManPower>;\r\n  manpower = new ManPower();\r\n  manpowertransaction = new ManPowerTransaction();\r\n  materialtransaction = new MaterialTransaction();\r\n  machinetransaction = new MachineTransaction();\r\n  shift: string;\r\n  time = [];\r\n  message: string;\r\n  shifts = [];\r\n  value: number;\r\n  id;\r\n\r\n  //function call\r\n  listClients()\r\n  {\r\n    this.data.getProjects().subscribe(\r\n      data => this.projects = data      \r\n    );\r\n    console.log(this.data);\r\n  }\r\n\r\n  listSites()\r\n  {\r\n    this.data.getSites().subscribe(\r\n      data => this.sites = data      \r\n    );\r\n    console.log(this.data);\r\n  }\r\n\r\n  setProject(id:number)\r\n  {\r\n    console.log(id);\r\n    this.project.id = id;\r\n    console.log(this.project); \r\n  }\r\n\r\n  setSite(id)\r\n  {\r\n     console.log(id);\r\n     this.id = id; \r\n     console.log(this.project);\r\n     this.setManPower();\r\n  }\r\n\r\n  setManPower()\r\n   {\r\n     this.data.getSite(this.id).subscribe(\r\n       data => {\r\n         this.site = data;\r\n         this.manpowers = this.site.manPowerDTO;\r\n         this.manpowers.forEach(i =>{\r\n         this.manpower = i;\r\n         this.shifts.push(this.manpower.startTime + \"-\" + this.manpower.endTime);\r\n         console.log(this.shifts);\r\n         })}\r\n     );\r\n   }\r\n\r\n   setShiftDetails(shift: string)\r\n   {\r\n     console.log(\"shift\" + shift);\r\n    this.time.push(shift.split('-'));\r\n    console.log(\"time\" + this.time);\r\n    this.manpowers.forEach(i =>{\r\n      this.manpower = new ManPower();\r\n      this.manpower = i;   \r\n      console.log(this.time[0] == this.manpower.startTime + \",\" +this.manpower.endTime);   \r\n      if(this.time[0] == this.manpower.startTime + \",\" +this.manpower.endTime)\r\n    {\r\n      this.manpowertransaction.planned = 0;\r\n      this.manpowertransaction.planned = this.manpower.planned;\r\n      this.manpowertransaction.shiftTime = shift;\r\n      this.manpowertransaction.siteId = this.site.id;\r\n      this.manpowertransaction.projectId = this.project.id;\r\n    }\r\n    })\r\n      this.time = [];\r\n      shift = \" \";\r\n      console.log(\"time\" + this.time);\r\n   }\r\n\r\n   setShortFall(value: number)\r\n   {\r\n     console.log(value);\r\n     this.manpowertransaction.actual = value;\r\n     this.manpowertransaction.shortfall = this.manpowertransaction.planned - this.manpowertransaction.actual;\r\n   }\r\n\r\n  postManPowerTransaction()\r\n  {\r\n    console.log(this.manpowertransaction);\r\n    try{\r\n      this.http.post('http://localhost:8080/uds/opstracker/manpower',this.manpowertransaction)\r\n      .subscribe(\r\n        (data:any) => { \r\n          if(data.length) {\r\n            console.log(data);\r\n            console.log(\"done\");\r\n          }\r\n        }\r\n      )\r\n    }\r\n    catch(Exception )\r\n    {\r\n      console.error(\"not done\");\r\n    }  \r\n  }\r\n\r\npostMaterialTransaction()\r\n{\r\n  console.log(this.materialtransaction);\r\n}\r\n\r\npostMachineTransaction()\r\n{\r\n  console.log(this.machinetransaction);\r\n}\r\n  \r\n  ngOnInit() {\r\n    this.listClients();\r\n    this.listSites();\r\n  }\r\n\r\n}\r\n","module.exports = \".per-page nav p {\\r\\n   \\r\\n    margin: 25px 10px;\\r\\n    font-weight: bold;\\r\\n    padding: 2px 0;\\r\\n}\\r\\n\\r\\n.per-page nav .pagination {\\r\\n    float: right;\\r\\n}\"","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-6\\\">\\r\\n    <nav aria-label=\\\"Pagination\\\" >\\r\\n      <ul class=\\\"pagination\\\">\\r\\n        <li [class.disabled]=\\\"current == 1\\\">\\r\\n          <a href=\\\"javascript:;\\\"\\r\\n             (click)=\\\"setPage(current-1, itemsPerPage)\\\"\\r\\n             aria-label=\\\"Previous\\\">\\r\\n            <span aria-hidden=\\\"true\\\">&laquo;</span>\\r\\n          </a>\\r\\n        </li>\\r\\n        <li *ngFor=\\\"let page of pages;\\\" [class.active]=\\\"page == current\\\">\\r\\n          <a href=\\\"javascript:;\\\" (click)=\\\"setPage(page, itemsPerPage)\\\">{{ page }}</a>\\r\\n        </li>\\r\\n        <li [class.disabled]=\\\"current == maxPages\\\">\\r\\n          <a href=\\\"javascript:;\\\" (click)=\\\"setPage(current+1 ,itemsPerPage)\\\" aria-label=\\\"Next\\\">\\r\\n            <span aria-hidden=\\\"true\\\">&raquo;</span>\\r\\n          </a>\\r\\n        </li>\\r\\n      </ul>\\r\\n    </nav>\\r\\n  </div>\\r\\n  <div class=\\\"col-lg-6 text-right per-page\\\">\\r\\n    <nav aria-label=\\\"Anzahl der Beiträge pro Seite\\\">\\r\\n      <p>Anzahl der Beiträge pro Seite:</p>\\r\\n      <ul class=\\\"pagination\\\">\\r\\n        <li *ngFor=\\\"let perPage of postsPerPage;\\\" [class.active]=\\\"perPage == itemsPerPage\\\">\\r\\n          <a href=\\\"javascript:;\\\" (click)=\\\"setPage(current, perPage)\\\">{{ perPage }}</a>\\r\\n        </li>\\r\\n      </ul>\\r\\n    </nav>\\r\\n  </div>\\r\\n</div>\"","\r\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Page } from './pagination';\r\n\r\n@Component({\r\n  selector: 'app-pagination',\r\n  templateUrl: './pagination.component.html',\r\n  styleUrls: ['./pagination.component.css']\r\n})\r\nexport class PaginationComponent implements OnInit {\r\n\r\n  @Input() maxPages: number;\r\n  @Input() current: number;\r\n  @Input() postsPerPage: number[];\r\n  @Input() itemsPerPage: number;\r\n\r\n  @Output() changePage = new EventEmitter();\r\n\r\n  pages: any[] = [];\r\n  pageModel: Page = {\r\n    page: this.current,\r\n    itemsPerPage: this.itemsPerPage\r\n  };\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    if (this.maxPages) {\r\n      this.createPages();\r\n    }\r\n  }\r\n\r\n  setPage(page: number, perPage: number) {\r\n    console.log(page);\r\n    this.pageModel.page = page;\r\n    this.pageModel.itemsPerPage = perPage;\r\n    this.changePage.emit(this.pageModel);\r\n  }\r\n\r\n  createPages() {\r\n    for(let i=1; i <= this.maxPages; i++) {\r\n      this.pages.push(i);\r\n    }\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"example-container mat-elevation-z8\\\">\\r\\n  <div class=\\\"example-loading-shade\\\"\\r\\n       *ngIf=\\\"isLoadingResults || isRateLimitReached\\\">\\r\\n    <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\r\\n    <div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\r\\n      GitHub's API rate limit has been reached. It will be reset in one minute.\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"example-table-container\\\">\\r\\n\\r\\n    <table mat-table [dataSource]=\\\"data\\\" class=\\\"example-table\\\"\\r\\n          >\\r\\n      <!-- Number Column -->\\r\\n      <ng-container matColumnDef=\\\"code\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef>#</th>\\r\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.code}}</td>\\r\\n      </ng-container>\\r\\n\\r\\n      <!-- Title Column -->\\r\\n      <ng-container matColumnDef=\\\"name\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef>Title</th>\\r\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.name}}</td>\\r\\n      </ng-container>\\r\\n\\r\\n      <!-- State Column -->\\r\\n      <ng-container matColumnDef=\\\"designation\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.designation}}</td>\\r\\n      </ng-container>\\r\\n      <ng-container matColumnDef=\\\"mail\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.mail}}</td>\\r\\n      </ng-container>\\r\\n      <ng-container matColumnDef=\\\"phone\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.phone}}</td>\\r\\n      </ng-container>\\r\\n     \\r\\n\\r\\n      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n      <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n    </table>\\r\\n  </div>\\r\\n\\r\\n  <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"10\\\"></mat-paginator>\\r\\n</div>\"","\r\nimport {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {MatPaginator, MatSort} from '@angular/material';\r\nimport {merge, Observable, of as observableOf} from 'rxjs';\r\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\r\n@Component({\r\n  selector: 'app-report',\r\n  templateUrl: './report.component.html',\r\n  styleUrls: ['./report.component.css']\r\n})\r\nexport class ReportComponent implements OnInit {\r\n  displayedColumns: string[] = [  'code', 'name', 'designation', 'mail' , 'phone'];\r\n\r\n  resultsLength = 0;\r\n  isLoadingResults = true;\r\n  isRateLimitReached = false;\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  ngOnInit() {\r\n    // If the user changes the sort order, reset back to the first page.\r\n   // this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\r\n\r\n   \r\n}\r\n}\r\n\r\n","module.exports = \"\"","module.exports = \"<p>\\r\\n  siteupdate works!\\r\\n</p>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-siteupdate',\r\n  templateUrl: './siteupdate.component.html',\r\n  styleUrls: ['./siteupdate.component.css']\r\n})\r\nexport class SiteupdateComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"algnleft\\\">\\r\\n    <div class=\\\"div-left\\\"><button mat-mini-fab>\\r\\n        <mat-icon aria-label=\\\"\\\" routerLink=\\\"../masterdata\\\">arrow_back</mat-icon>\\r\\n      </button></div>\\r\\n    \\r\\n        <!-- <div class=\\\"example-loading-shade spinnerabove \\\"\\r\\n             *ngIf=\\\"isLoadingResults || isRateLimitReached\\\" >\\r\\n          <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\r\\n          <div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\r\\n            \\r\\n          </div>\\r\\n        </div>\\r\\n       -->\\r\\n        \\r\\n      \\r\\n          <table mat-table [dataSource]=\\\"sit\\\" class=\\\"mat-elevation-z8\\\"\\r\\n                 matSort matSortActive=\\\"id\\\" matSortDisableClear matSortDirection=\\\"asc\\\" style=\\\"width:100%\\\">\\r\\n            <!-- Number Column -->\\r\\n            \\r\\n            <!-- Title Column -->\\r\\n            <ng-container  matColumnDef=\\\"id\\\">\\r\\n                <th mat-header-cell  *matHeaderCellDef>Id</th>\\r\\n                <td mat-cell *matCellDef=\\\"let row\\\">{{row.id}}</td>\\r\\n              </ng-container>\\r\\n        \\r\\n    \\r\\n            <ng-container  matColumnDef=\\\"name\\\">\\r\\n              <th mat-header-cell  *matHeaderCellDef>Name</th>\\r\\n              <td mat-cell *matCellDef=\\\"let row\\\">{{row.name}}</td>\\r\\n            </ng-container>\\r\\n      \\r\\n            <!-- State Column -->\\r\\n            <ng-container matColumnDef=\\\"code\\\">\\r\\n              <th mat-header-cell *matHeaderCellDef>Code</th>\\r\\n              <td mat-cell *matCellDef=\\\"let row\\\">{{row.code}}</td>\\r\\n            </ng-container>\\r\\n      \\r\\n            <!-- Created Column -->\\r\\n            <ng-container matColumnDef=\\\"designation\\\">\\r\\n              <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                Designation\\r\\n              </th>\\r\\n              <td mat-cell *matCellDef=\\\"let row\\\">{{row.designation}}</td>\\r\\n            </ng-container>\\r\\n    \\r\\n            <ng-container matColumnDef=\\\"mail\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                  Mail\\r\\n                </th>\\r\\n                <td mat-cell *matCellDef=\\\"let row\\\">{{row.mail}}</td>\\r\\n              </ng-container>\\r\\n    \\r\\n              <ng-container matColumnDef=\\\"mob\\\">\\r\\n                  <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                    Mobile\\r\\n                  </th>\\r\\n                  <td mat-cell *matCellDef=\\\"let row\\\">{{row.mob}}</td>\\r\\n                </ng-container>\\r\\n    \\r\\n               \\r\\n            <ng-container matColumnDef=\\\"actionsColumn\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef>Action</th>\\r\\n                <mat-cell *matCellDef=\\\"let row\\\">\\r\\n                    <button mat-icon-button>\\r\\n                        <mat-icon matTooltip=\\\"Update\\\" aria-label=\\\"Example icon-button with a heart icon\\\" (click)=\\\"openDialog()\\\" >update</mat-icon>\\r\\n                      </button>\\r\\n                      <button mat-icon-button>\\r\\n                          <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\"  matTooltip=\\\"Delete\\\" (click)=\\\"openDialog()\\\">delete</mat-icon>\\r\\n                        </button>\\r\\n                    \\r\\n                </mat-cell>\\r\\n            </ng-container>\\r\\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n          </table>\\r\\n       \\r\\n      \\r\\n        <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"30\\\"  [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\"></mat-paginator>\\r\\n      \\r\\n    </div>\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-siteview',\r\n  templateUrl: './siteview.component.html',\r\n  styleUrls: ['./siteview.component.css']\r\n})\r\nexport class SiteviewComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, for easier debugging, you can ignore zone related error\n * stack frames such as `zone.run`/`zoneDelegate.invokeTask` by importing the\n * below file. Don't forget to comment it out in production mode\n * because it will have a performance impact when errors are thrown\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}