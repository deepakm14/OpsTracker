{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/clientdialog/clientdialog.component.css","webpack:///./src/app/clientdialog/clientdialog.component.html","webpack:///./src/app/clientdialog/clientdialog.component.ts","webpack:///./src/app/clientupdate/clientupdate.component.css","webpack:///./src/app/clientupdate/clientupdate.component.html","webpack:///./src/app/clientupdate/clientupdate.component.ts","webpack:///./src/app/clientview/clientview.component.css","webpack:///./src/app/clientview/clientview.component.html","webpack:///./src/app/clientview/clientview.component.ts","webpack:///./src/app/data.service.ts","webpack:///./src/app/dateformat.service.ts","webpack:///./src/app/employdialog/employdialog.component.css","webpack:///./src/app/employdialog/employdialog.component.html","webpack:///./src/app/employdialog/employdialog.component.ts","webpack:///./src/app/employeeupdate/employeeupdate.component.css","webpack:///./src/app/employeeupdate/employeeupdate.component.html","webpack:///./src/app/employeeupdate/employeeupdate.component.ts","webpack:///./src/app/emplyeeview/emplyeeview.component.css","webpack:///./src/app/emplyeeview/emplyeeview.component.html","webpack:///./src/app/emplyeeview/emplyeeview.component.ts","webpack:///./src/app/escalation/escalation.component.css","webpack:///./src/app/escalation/escalation.component.html","webpack:///./src/app/escalation/escalation.component.ts","webpack:///./src/app/escalationdialog/escalationdialog.component.css","webpack:///./src/app/escalationdialog/escalationdialog.component.html","webpack:///./src/app/escalationdialog/escalationdialog.component.ts","webpack:///./src/app/escalationmainview/escalationmainview.component.css","webpack:///./src/app/escalationmainview/escalationmainview.component.html","webpack:///./src/app/escalationmainview/escalationmainview.component.ts","webpack:///./src/app/escalationtrackerdialog/escalationtrackerdialog.component.css","webpack:///./src/app/escalationtrackerdialog/escalationtrackerdialog.component.html","webpack:///./src/app/escalationtrackerdialog/escalationtrackerdialog.component.ts","webpack:///./src/app/escalationtrackerview/escalationtrackerview.component.css","webpack:///./src/app/escalationtrackerview/escalationtrackerview.component.html","webpack:///./src/app/escalationtrackerview/escalationtrackerview.component.ts","webpack:///./src/app/escalationupdate/escalationupdate.component.css","webpack:///./src/app/escalationupdate/escalationupdate.component.html","webpack:///./src/app/escalationupdate/escalationupdate.component.ts","webpack:///./src/app/escalationview/escalationview.component.css","webpack:///./src/app/escalationview/escalationview.component.html","webpack:///./src/app/escalationview/escalationview.component.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/masterdata/masterdata.component.css","webpack:///./src/app/masterdata/masterdata.component.html","webpack:///./src/app/masterdata/masterdata.component.ts","webpack:///./src/app/masterview/masterview.component.css","webpack:///./src/app/masterview/masterview.component.html","webpack:///./src/app/masterview/masterview.component.ts","webpack:///./src/app/models/employ.model.ts","webpack:///./src/app/models/escalation.model.ts","webpack:///./src/app/models/machine.model.ts","webpack:///./src/app/models/machinetransaction.model.ts","webpack:///./src/app/models/manpower.model.ts","webpack:///./src/app/models/manpowertransaction.model.ts","webpack:///./src/app/models/material.model.ts","webpack:///./src/app/models/materialtransaction.model.ts","webpack:///./src/app/models/project.model.ts","webpack:///./src/app/models/site.model.ts","webpack:///./src/app/models/sitemachinedialog.model.ts","webpack:///./src/app/models/sitemanpowerdialog.model.ts","webpack:///./src/app/models/sitematerialdialog.model.ts","webpack:///./src/app/my-nav/my-nav.component.css","webpack:///./src/app/my-nav/my-nav.component.html","webpack:///./src/app/my-nav/my-nav.component.ts","webpack:///./src/app/my-nav/my-nav.service.ts","webpack:///./src/app/opsmachinetransaction/opsmachinetransaction.component.css","webpack:///./src/app/opsmachinetransaction/opsmachinetransaction.component.html","webpack:///./src/app/opsmachinetransaction/opsmachinetransaction.component.ts","webpack:///./src/app/opsmanpowertransaction/opsmanpowertransaction.component.css","webpack:///./src/app/opsmanpowertransaction/opsmanpowertransaction.component.html","webpack:///./src/app/opsmanpowertransaction/opsmanpowertransaction.component.ts","webpack:///./src/app/opsmaterialtransaction/opsmaterialtransaction.component.css","webpack:///./src/app/opsmaterialtransaction/opsmaterialtransaction.component.html","webpack:///./src/app/opsmaterialtransaction/opsmaterialtransaction.component.ts","webpack:///./src/app/opstracker/opstracker.component.css","webpack:///./src/app/opstracker/opstracker.component.html","webpack:///./src/app/opstracker/opstracker.component.ts","webpack:///./src/app/opstrackermachinedialog/opstrackermachinedialog.component.css","webpack:///./src/app/opstrackermachinedialog/opstrackermachinedialog.component.html","webpack:///./src/app/opstrackermachinedialog/opstrackermachinedialog.component.ts","webpack:///./src/app/opstrackermanpowerdialog/opstrackermanpowerdialog.component.css","webpack:///./src/app/opstrackermanpowerdialog/opstrackermanpowerdialog.component.html","webpack:///./src/app/opstrackermanpowerdialog/opstrackermanpowerdialog.component.ts","webpack:///./src/app/opstrackermanpowerview/opstrackermanpowerview.component.css","webpack:///./src/app/opstrackermanpowerview/opstrackermanpowerview.component.html","webpack:///./src/app/opstrackermanpowerview/opstrackermanpowerview.component.ts","webpack:///./src/app/opstrackermaterialdialog/opstrackermaterialdialog.component.css","webpack:///./src/app/opstrackermaterialdialog/opstrackermaterialdialog.component.html","webpack:///./src/app/opstrackermaterialdialog/opstrackermaterialdialog.component.ts","webpack:///./src/app/opstrackerview/opstrackerview.component.css","webpack:///./src/app/opstrackerview/opstrackerview.component.html","webpack:///./src/app/opstrackerview/opstrackerview.component.ts","webpack:///./src/app/pagination/pagination.component.css","webpack:///./src/app/pagination/pagination.component.html","webpack:///./src/app/pagination/pagination.component.ts","webpack:///./src/app/report/report.component.css","webpack:///./src/app/report/report.component.html","webpack:///./src/app/report/report.component.ts","webpack:///./src/app/sitedialog/sitedialog.component.css","webpack:///./src/app/sitedialog/sitedialog.component.html","webpack:///./src/app/sitedialog/sitedialog.component.ts","webpack:///./src/app/sitemachinedailog/sitemachinedailog.component.css","webpack:///./src/app/sitemachinedailog/sitemachinedailog.component.html","webpack:///./src/app/sitemachinedailog/sitemachinedailog.component.ts","webpack:///./src/app/sitemanpowerdialog/sitemanpowerdialog.component.css","webpack:///./src/app/sitemanpowerdialog/sitemanpowerdialog.component.html","webpack:///./src/app/sitemanpowerdialog/sitemanpowerdialog.component.ts","webpack:///./src/app/sitematerialdialog/sitematerialdialog.component.css","webpack:///./src/app/sitematerialdialog/sitematerialdialog.component.html","webpack:///./src/app/sitematerialdialog/sitematerialdialog.component.ts","webpack:///./src/app/siteupdate/siteupdate.component.css","webpack:///./src/app/siteupdate/siteupdate.component.html","webpack:///./src/app/siteupdate/siteupdate.component.ts","webpack:///./src/app/siteview/siteview.component.css","webpack:///./src/app/siteview/siteview.component.html","webpack:///./src/app/siteview/siteview.component.ts","webpack:///./src/app/toast-service.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {Routes, RouterModule} from '@angular/router';\r\nimport {EscalationComponent} from './escalation/escalation.component';\r\nimport {OpstrackerComponent} from './opstracker/opstracker.component';\r\nimport {MasterdataComponent} from './masterdata/masterdata.component';\r\nimport {ReportComponent} from './report/report.component';\r\nimport {SiteComponent} from './site/site.component';\r\nimport {LoginComponent} from './login/login.component';\r\nimport {MasterviewComponent} from './masterview/masterview.component';\r\nimport {EmplyeeviewComponent} from './emplyeeview/emplyeeview.component';\r\nimport {ClientviewComponent} from './clientview/clientview.component';\r\nimport {SiteviewComponent} from './siteview/siteview.component';\r\nimport {EscalationviewComponent} from './escalationview/escalationview.component';\r\nimport { EscalationtrackerviewComponent } from './escalationtrackerview/escalationtrackerview.component';\r\nimport {OpsmachinetransactionComponent} from './opsmachinetransaction/opsmachinetransaction.component';\r\nimport {OpsmaterialtransactionComponent} from './opsmaterialtransaction/opsmaterialtransaction.component';\r\nimport {OpsmanpowertransactionComponent} from './opsmanpowertransaction/opsmanpowertransaction.component';\r\nconst routes: Routes = [\r\n{\r\n  path: 'masterdata',\r\n  component : MasterdataComponent\r\n},\r\n{\r\n  path: 'escalation',\r\n  component : EscalationComponent\r\n},\r\n{\r\n  path: 'opstracker',\r\n  component : OpstrackerComponent\r\n},\r\n{\r\n  path: 'report',\r\n  component : ReportComponent\r\n},\r\n{\r\n  path: '',\r\n  component : LoginComponent\r\n},\r\n{\r\npath: 'masterview',\r\n  component : MasterviewComponent\r\n},\r\n{\r\npath: 'emplyeeview',\r\n  component : EmplyeeviewComponent\r\n},\r\n{\r\npath: 'clientview',\r\n  component : ClientviewComponent\r\n},\r\n{\r\npath: 'siteview',\r\n  component : SiteviewComponent\r\n},\r\n{\r\npath: 'escalationview',\r\n  component : EscalationviewComponent\r\n},\r\n{\r\npath: 'EscalationtrackerComponent',\r\n  component : EscalationtrackerviewComponent\r\n},\r\n{\r\npath: 'opsmachinetransactionview',\r\n  component : OpsmachinetransactionComponent\r\n},\r\n{\r\n  path: 'opsmaterialtransactionview',\r\n    component : OpsmaterialtransactionComponent\r\n  }\r\n  ,\r\n{\r\n  path: 'opsmanpowertransactionview',\r\n    component : OpsmanpowertransactionComponent\r\n  },\r\n\r\n\r\n\r\n];\r\n\r\n@NgModule({\r\n  imports : [RouterModule.forRoot(routes)],\r\n  exports : [RouterModule]\r\n}\r\n  )\r\n\r\n\r\nexport class AppRoutingModule { }\r\n// tslint:disable-next-line:max-line-length\r\nexport const routingComponents = [EscalationComponent, ReportComponent, OpstrackerComponent, MasterdataComponent , LoginComponent , MasterviewComponent, EmplyeeviewComponent, ClientviewComponent, SiteviewComponent, EscalationviewComponent ,OpsmachinetransactionComponent,OpsmaterialtransactionComponent,OpsmanpowertransactionComponent ];\r\n","module.exports = \"\"","module.exports = \"\\r\\n\\r\\n \\r\\n  <app-my-nav ></app-my-nav>\\r\\n\\r\\n\"","import { Component } from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport { Toolbarservice } from './my-nav/my-nav.service';\r\nimport {ToastService} from './toast-service.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html' ,\r\n  styleUrls: ['./app.component.css'],\r\n  \r\n  providers: [Toolbarservice]\r\n})\r\nexport class AppComponent {\r\n  title = 'udswebproject';\r\n\r\n  constructor(private activaterouter: ActivatedRoute, private router: Router , public nav: Toolbarservice, private toastservice:ToastService) {\r\n     /*  if (this.router.url === '/masterdata') {\r\n        this.nav.visible = false;\r\n\r\n } */\r\n\r\n  }\r\n\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppRoutingModule , routingComponents } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MyNavComponent } from './my-nav/my-nav.component';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { MatToolbarModule, MatButtonModule, MatSidenavModule, MatIconModule, MatListModule } from '@angular/material';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {FlexLayoutModule} from '@angular/flex-layout';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport { MatNativeDateModule, NativeDateAdapter, DateAdapter} from '@angular/material';\r\nimport { MasterviewComponent } from './masterview/masterview.component';\r\nimport {MatTableModule} from '@angular/material';\r\nimport { MatPaginatorModule } from '@angular/material';\r\nimport { MatSortModule } from '@angular/material';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { MasterdataComponent } from '../app/masterdata/masterdata.component';\r\n\r\nimport {DataSource} from '@angular/cdk/table';\r\nimport { CdkTableModule } from '@angular/cdk/table';\r\nimport { EmplyeeviewComponent } from './emplyeeview/emplyeeview.component';\r\nimport { ClientviewComponent } from './clientview/clientview.component';\r\nimport { SiteviewComponent } from './siteview/siteview.component';\r\nimport { EscalationviewComponent } from './escalationview/escalationview.component';\r\n\r\nimport { EmployeeupdateComponent } from './employeeupdate/employeeupdate.component';\r\nimport { ClientupdateComponent } from './clientupdate/clientupdate.component';\r\nimport { SiteupdateComponent } from './siteupdate/siteupdate.component';\r\nimport { EscalationupdateComponent } from './escalationupdate/escalationupdate.component';\r\n\r\nimport { MatDialogModule } from '@angular/material';\r\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\r\nimport { PaginationComponent } from './pagination/pagination.component';\r\nimport {EmploydialogComponent} from './employdialog/employdialog.component';\r\nimport { ClientdialogComponent } from './clientdialog/clientdialog.component';\r\nimport { EscalationdialogComponent } from './escalationdialog/escalationdialog.component';\r\nimport { EscalationmainviewComponent } from './escalationmainview/escalationmainview.component';\r\nimport { EscalationtrackerviewComponent } from './escalationtrackerview/escalationtrackerview.component';\r\nimport { EscalationtrackerdialogComponent } from './escalationtrackerdialog/escalationtrackerdialog.component';\r\nimport {ToastService} from './toast-service.service';\r\nimport { SitedialogComponent } from './sitedialog/sitedialog.component';\r\nimport { SitemanpowerdialogComponent } from './sitemanpowerdialog/sitemanpowerdialog.component';\r\nimport { SitemachinedailogComponent } from './sitemachinedailog/sitemachinedailog.component';\r\nimport { SitematerialdialogComponent } from './sitematerialdialog/sitematerialdialog.component';\r\nimport { OpstrackerviewComponent } from './opstrackerview/opstrackerview.component';\r\nimport { OpstrackermanpowerdialogComponent } from './opstrackermanpowerdialog/opstrackermanpowerdialog.component';\r\nimport { OpstrackermaterialdialogComponent } from './opstrackermaterialdialog/opstrackermaterialdialog.component';\r\n\r\nimport { OpstrackermachinedialogComponent } from './opstrackermachinedialog/opstrackermachinedialog.component';\r\nimport { OpstrackermanpowerviewComponent } from './opstrackermanpowerview/opstrackermanpowerview.component';\r\nimport {ToasterModule,ToasterConfig} from 'angular2-toaster';\r\nimport { OpsmanpowertransactionComponent } from './opsmanpowertransaction/opsmanpowertransaction.component';\r\nimport { OpsmaterialtransactionComponent } from './opsmaterialtransaction/opsmaterialtransaction.component';\r\nimport { OpsmachinetransactionComponent } from './opsmachinetransaction/opsmachinetransaction.component';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    MyNavComponent,\r\n    routingComponents,\r\n    MasterviewComponent,\r\n    MasterdataComponent,\r\n    EmplyeeviewComponent,\r\n    ClientviewComponent,\r\n    SiteviewComponent,\r\n    EscalationviewComponent,\r\n   \r\n    EmployeeupdateComponent,\r\n    ClientupdateComponent,\r\n    SiteupdateComponent,\r\n    EscalationupdateComponent,\r\n    PaginationComponent,\r\n    EmploydialogComponent,\r\n    ClientdialogComponent,\r\n    EscalationdialogComponent,\r\n    EscalationmainviewComponent,\r\n    EscalationtrackerviewComponent,\r\n    EscalationtrackerdialogComponent,\r\n    SitedialogComponent,\r\n    SitemanpowerdialogComponent,\r\n    SitemachinedailogComponent,\r\n    SitematerialdialogComponent,\r\n    OpstrackerviewComponent,\r\n    OpstrackermanpowerdialogComponent,\r\n    OpstrackermaterialdialogComponent,\r\n    OpstrackermachinedialogComponent,\r\n    OpstrackermanpowerviewComponent,\r\n    OpsmanpowertransactionComponent,\r\n    OpsmaterialtransactionComponent,\r\n    OpsmachinetransactionComponent,\r\n    \r\n   \r\n\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    LayoutModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    AppRoutingModule,\r\n    MatCheckboxModule,\r\n    MatInputModule,\r\n    MatTabsModule,\r\n    MatAutocompleteModule,\r\n    ReactiveFormsModule,\r\n    FlexLayoutModule,\r\n    MatExpansionModule,\r\n    MatCardModule,\r\n    MatDividerModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    HttpClientModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatProgressSpinnerModule,\r\n    FormsModule,\r\n    MatTableModule,\r\n    HttpClientModule,\r\n    MatDialogModule,\r\n    MatProgressBarModule,\r\n    ToasterModule.forRoot()\r\n    \r\n   \r\n\r\n\r\n  ],\r\n  entryComponents: [\r\n    EmploydialogComponent, ClientdialogComponent, EscalationdialogComponent, EscalationtrackerdialogComponent,SitemachinedailogComponent,SitemanpowerdialogComponent,SitematerialdialogComponent,OpstrackermanpowerdialogComponent,OpstrackermaterialdialogComponent, OpstrackermachinedialogComponent,\r\n  ],\r\n\r\n  providers: [ToastService],\r\n  bootstrap: [AppComponent],\r\n \r\n})\r\nexport class AppModule { }\r\n","module.exports = \"\"","module.exports = \"<div>\\r\\n\\r\\n  <mat-dialog-content>\\r\\n    \\r\\n    <div class=\\\"row\\\" >\\r\\n                          \\r\\n      <mat-form-field class=\\\"example-full-width\\\">\\r\\n          <input matInput placeholder=\\\"Employee Name\\\" [(ngModel)]=\\\"data.name\\\">\\r\\n        </mat-form-field>\\r\\n  \\r\\n  </div>\\r\\n  <div class=\\\"row\\\" >\\r\\n                          \\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input matInput placeholder=\\\"Project Code\\\" [(ngModel)]=\\\"data.projectCode\\\">\\r\\n    </mat-form-field>\\r\\n  \\r\\n  </div>\\r\\n  \\r\\n \\r\\n  \\r\\n   \\r\\n   \\r\\n  </mat-dialog-content>\\r\\n  <mat-dialog-actions>\\r\\n      \\r\\n        <div class=\\\"button-row\\\">\\r\\n                                            \\r\\n          <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postClient()\\\" >Update</button>\\r\\n            <button mat-raised-button color=\\\"accent\\\" (click)=\\\"onCloseCancel()\\\">Cancel</button>\\r\\n            \\r\\n          </div>    \\r\\n  \\r\\n  </mat-dialog-actions>\\r\\n    </div>\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport {MatDialog} from '@angular/material';\r\nimport { MatDialogRef } from '@angular/material';\r\nimport {MAT_DIALOG_DATA} from '@angular/material';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {DataService} from '../data.service';\r\nimport { Client } from '../models/client.model';\r\n@Component({\r\n  selector: 'app-clientdialog',\r\n  templateUrl: './clientdialog.component.html',\r\n  styleUrls: ['./clientdialog.component.css']\r\n})\r\nexport class ClientdialogComponent implements OnInit {\r\n\r\n  constructor(public thisdialogRef: MatDialogRef<ClientdialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n  onCloseConfirm() {\r\n    this.thisdialogRef.close('Confirm');\r\n      }\r\n    \r\n      onCloseCancel() {\r\n    this.thisdialogRef.close('Cancel');\r\n      }\r\n}\r\n","module.exports = \"\"","module.exports = \"<p>\\r\\n  clientupdate works!\\r\\n</p>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-clientupdate',\r\n  templateUrl: './clientupdate.component.html',\r\n  styleUrls: ['./clientupdate.component.css']\r\n})\r\nexport class ClientupdateComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \".algnleft{\\r\\n    margin:20px \\r\\n}\\r\\n.div-left{\\r\\n    float:right;\\r\\n    padding-right:20px;\\r\\n}\\r\\n.mat-cell:nth-child(2), .mat-header-cell:nth-child(2) {\\r\\n    flex: 0 0 200px;\\r\\n}\\r\\n.martop{\\r\\n    margin-top: 14px;\\r\\n}\\r\\n.spinnerabove {\\r\\n    position:absolute;\\r\\n    top:50%;\\r\\n    left:50%;\\r\\n   \\r\\n    z-index: 10;\\r\\n  }\\r\\n  \"","module.exports = \"<div class=\\\"algnleft\\\">\\r\\n    <div class=\\\"div-left\\\"><button mat-mini-fab>\\r\\n        <mat-icon aria-label=\\\"\\\" routerLink=\\\"../masterdata\\\">arrow_back</mat-icon>\\r\\n      </button></div>\\r\\n    \\r\\n       <div class=\\\"example-loading-shade spinnerabove \\\"\\r\\n             *ngIf=\\\"isLoadingResults || isRateLimitReached\\\" >\\r\\n          <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\r\\n          <div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\r\\n            \\r\\n          </div>\\r\\n        </div> \\r\\n    \\r\\n        \\r\\n      \\r\\n          <table mat-table [dataSource]=\\\"client2\\\" class=\\\"mat-elevation-z8\\\"\\r\\n                 matSort matSortActive=\\\"id\\\" matSortDisableClear matSortDirection=\\\"asc\\\" style=\\\"width:100%\\\">\\r\\n            <!-- Number Column -->\\r\\n            \\r\\n            <!-- Title Column -->\\r\\n            <ng-container  matColumnDef=\\\"id\\\">\\r\\n                <th mat-header-cell  *matHeaderCellDef>Id</th>\\r\\n                <td mat-cell *matCellDef=\\\"let row\\\">{{row.id}}</td>\\r\\n              </ng-container>\\r\\n        \\r\\n    \\r\\n            <ng-container  matColumnDef=\\\"name\\\">\\r\\n              <th mat-header-cell  *matHeaderCellDef>Name</th>\\r\\n              <td mat-cell *matCellDef=\\\"let row\\\">{{row.name}}</td>\\r\\n            </ng-container>\\r\\n      \\r\\n            <!-- State Column -->\\r\\n            <ng-container matColumnDef=\\\"code\\\">\\r\\n              <th mat-header-cell *matHeaderCellDef>Project Code</th>\\r\\n              <td mat-cell *matCellDef=\\\"let row\\\">{{row.projectCode}}</td>\\r\\n            </ng-container>\\r\\n      \\r\\n            <!-- Created Column -->\\r\\n            \\r\\n    \\r\\n               <mat-divider></mat-divider> \\r\\n            <ng-container matColumnDef=\\\"actionsColumn\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef>Action</th>\\r\\n                \\r\\n                <mat-cell *matCellDef=\\\"let row\\\">\\r\\n                    <button mat-icon-button>\\r\\n                        <mat-icon matTooltip=\\\"Update\\\" aria-label=\\\"Example icon-button with a heart icon\\\" (click)=\\\"openDialog(row.id)\\\" >update</mat-icon>\\r\\n                      </button>\\r\\n                      <button mat-icon-button>\\r\\n                          <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\"  matTooltip=\\\"Delete\\\" (click)=\\\"openDialog(row.id)\\\">delete</mat-icon>\\r\\n                        </button>\\r\\n                   \\r\\n                </mat-cell>\\r\\n            </ng-container>\\r\\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n             \\r\\n          </table>\\r\\n       <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"8\\\"></mat-paginator>\\r\\n      \\r\\n        <!--   <app-pagination [maxPages]=\\\"maxPages\\\"\\r\\n          [current]=\\\"1\\\"\\r\\n          [postsPerPage]=\\\"postsPerPage\\\"\\r\\n          [itemsPerPage]=\\\"itemsPerPage\\\"\\r\\n          (changePage)=\\\"pageChanged($event)\\\"></app-pagination> -->\\r\\n      \\r\\n    </div>\"","import { Component, OnInit, ViewChild , Input } from '@angular/core';\r\nimport {MatPaginator, MatSort} from '@angular/material';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {  MatDialog,  MatDialogRef , MatDialogConfig , MAT_DIALOG_DATA} from '@angular/material';\r\nimport {MatTableDataSource} from '@angular/material';\r\n\r\nimport {merge, Observable, of as observableOf} from 'rxjs';\r\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\r\nimport {DataService} from '../data.service';\r\nimport {ClientdialogComponent} from '../clientdialog/clientdialog.component';\r\n\r\n@Component({\r\n  selector: 'app-clientview',\r\n  templateUrl: './clientview.component.html',\r\n  styleUrls: ['./clientview.component.css']\r\n})\r\nexport class ClientviewComponent implements OnInit {\r\n  dialogResult=\"\";\r\n  client2: Client[] = [];\r\n  exampleDatabase: ExampleHttpDao | null;\r\n\r\n  displayedColumns: string[] = ['id','name', 'code','actionsColumn' ];\r\n  /* //displayedColumns: string[] = [  'code', 'name', 'designation', 'mail' , 'phone']; */\r\n\r\n\r\n\r\n  resultsLength = 0;\r\n  isLoadingResults = true;\r\n  isRateLimitReached = false;\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  \r\n  page: (Observable<number>|any);\r\n  constructor(private http: HttpClient, private data1: DataService, private dialog: MatDialog) { }\r\n\r\n  ngOnInit() {\r\n    this.exampleDatabase = new ExampleHttpDao(this.http);\r\n\r\n   // If the user changes the sort order, reset back to the first page.\r\n //  this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\r\n\r\n   merge(this.paginator.page)\r\n     .pipe(\r\n       startWith({}),\r\n       switchMap(() => {\r\n          console.log('enter1');\r\n         this.isLoadingResults = true;\r\n         return this.exampleDatabase!.getRepoIssues(this.paginator.pageIndex,\r\n          8);\r\n\r\n       }),\r\n       map(data => {\r\n         console.log('ggg');\r\n         // Flip flag to show that loading has finished.\r\n         this.isLoadingResults = false;\r\n         this.isRateLimitReached = false;\r\n         this.resultsLength = data['totalElements'];\r\nconsole.log(data['totalElements']);\r\n         return data;\r\n       }),\r\n       catchError(() => {\r\n         console.log('errr');\r\n         this.isLoadingResults = false;\r\n         // Catch if the GitHub API has reached its rate limit. Return empty data.\r\n         this.isRateLimitReached = true;\r\n         return observableOf([]);\r\n       })\r\n     ).subscribe(data => this.client2 = data['content']);\r\n  // this.listEmployees();\r\n    \r\n  }\r\n  openDialog(id:number) {\r\n  \r\n    const item1 = this.client2.find(i => i.id === id);\r\n   \r\n      const dialogRef = this.dialog.open(ClientdialogComponent, {\r\n        width: '300px',\r\n        data:item1\r\n        \r\n            });\r\n            dialogRef.afterClosed().subscribe(result => {\r\n              console.log('dialog closed:${result}');\r\n              this.dialogResult = result;\r\n            });\r\n    \r\n    }\r\n}\r\nexport interface Client {\r\n  id: number;\r\n  projectCode: number;\r\n\r\n  name: string;\r\n\r\n}\r\n \r\n /** An example database that the data source uses to retrieve data for the table. */\r\n export class ExampleHttpDao { \r\n  \r\n \r\n   constructor(private http: HttpClient) {}\r\n  \r\n   getRepoIssues(page: number,records:number): Observable<Client[]> {\r\n     const href = 'http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/project/search/'+ page + '/' + records;\r\n    \r\n \r\n     return this.http.get<Client[]>(href);\r\n   }\r\n }","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Employ } from './models/employ.model';\r\nimport { Escalation } from './models/escalation.model';\r\nimport { Project } from './models/project.model';\r\nimport { Site } from './models/site.model';\r\nimport {Observable} from 'rxjs';\r\nimport { Opsmanpowerdialog } from './models/opsmanpowerdialog.model';\r\nimport { Sitemanpowerdialog } from './models/sitemanpowerdialog.model';\r\nimport { Sitematerialdialog } from './models/sitematerialdialog.model';\r\nimport { Sitemachinedialog } from './models/sitemachinedialog.model';\r\n\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataService {\r\n\r\n  //reference variable for imported class\r\n  //env: PropertyfileService;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getEmployee(desg: string): Observable<Employ[]> {\r\n  \r\n    return this.http.get<Employ[]>('http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/employee/searchbydesg/'+desg);\r\n  \r\n  }\r\n\r\n  getEscalation(): Observable<Escalation[]> {\r\n    return this.http.get<Escalation[]>('http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/esctype/search');\r\n  }\r\n\r\n  getProjects(): Observable<Project[]> {\r\n    return this.http.get<Project[]>('http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/project/search');\r\n  }\r\n\r\n  getSites(): Observable<Site[]> {\r\n    return this.http.get<Site[]>('http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/site/search');\r\n  }\r\n\r\n  getSite(id): Observable<Site> {\r\n    return this.http.get<Site>('http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/site/search/' + id);\r\n  }\r\n  getSitemanpower(id): Observable<Sitemanpowerdialog> {\r\n    return this.http.get<Sitemanpowerdialog>('http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/site/search/' + id);\r\n  }\r\n  getSitematerial(id): Observable<Sitematerialdialog> {\r\n    return this.http.get<Sitematerialdialog>('http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/site/search/' + id);\r\n  }\r\n  getSitemachine(id): Observable<Sitemachinedialog> {\r\n    return this.http.get<Sitemachinedialog>('http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/site/search/' + id);\r\n  }\r\n  getemployee(pages, records): Observable<Employ[]> {\r\n    \r\n    return this.http.get<Employ[]>('http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/employee/search/' + pages + '/' + records);\r\n  }\r\n  getemployeebyid(id): Observable<Employ> {\r\n    \r\n    return this.http.get<Employ>('http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/employee/search/'+id);\r\n  }\r\n}\r\n","import { Injectable} from '@angular/core';  \r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\nexport class Dateformat{  \r\n  convertdate(str): string{\r\n    const date = new Date(str);\r\n      const  mnth = ('0' + (date.getMonth()+1)).slice(-2);\r\n      const day  = ('0' + date.getDate()).slice(-2);\r\n      return [ day, mnth, date.getFullYear()].join(\"-\");    \r\n}\r\n}","module.exports = \".cdk-global-overlay-wrapper, .cdk-overlay-container {\\r\\n     z-index: 99999 !important;\\r\\n  }\"","module.exports = \"<div>\\r\\n\\r\\n<mat-dialog-content>\\r\\n  \\r\\n  <div class=\\\"row\\\" >\\r\\n                        \\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n        <input matInput placeholder=\\\"Employee Code\\\" [(ngModel)]=\\\"data.code\\\">\\r\\n      </mat-form-field>\\r\\n\\r\\n</div>\\r\\n<div class=\\\"row\\\" >\\r\\n                        \\r\\n  <mat-form-field class=\\\"example-full-width\\\">\\r\\n    <input matInput placeholder=\\\"Employee Name\\\" [(ngModel)]=\\\"data.name\\\">\\r\\n  </mat-form-field>\\r\\n\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\" >\\r\\n                        \\r\\n  <mat-form-field class=\\\"example-full-width\\\">\\r\\n    <input matInput placeholder=\\\"Designation\\\" [(ngModel)]=\\\"data.designation\\\">\\r\\n  </mat-form-field>\\r\\n\\r\\n</div>\\r\\n<div class=\\\"row\\\" >\\r\\n                        \\r\\n  <mat-form-field class=\\\"example-full-width\\\">\\r\\n    <input matInput placeholder=\\\"Email\\\" [(ngModel)]=\\\"data.mail\\\">\\r\\n  </mat-form-field>\\r\\n\\r\\n</div>\\r\\n<div class=\\\"row\\\" >\\r\\n                        \\r\\n  <mat-form-field class=\\\"example-full-width\\\">\\r\\n    <input matInput placeholder=\\\"Mobile Number\\\" [(ngModel)]=\\\"data.mob\\\">\\r\\n  </mat-form-field>\\r\\n\\r\\n</div>\\r\\n\\r\\n \\r\\n \\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions>\\r\\n    \\r\\n      <div class=\\\"button-row\\\">\\r\\n                                          \\r\\n        <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postEmployee()\\\" >Update</button>\\r\\n          <button mat-raised-button color=\\\"accent\\\" (click)=\\\"onCloseCancel()\\\">Cancel</button>\\r\\n          \\r\\n        </div>    \\r\\n\\r\\n</mat-dialog-actions>\\r\\n  </div>\"","import { Component, OnInit , Inject} from '@angular/core';\r\nimport {MatDialog} from '@angular/material';\r\nimport { MatDialogRef } from '@angular/material';\r\nimport {MAT_DIALOG_DATA} from '@angular/material';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {DataService} from '../data.service';\r\nimport { Employ } from '../models/employ.model';\r\n@Component({\r\n  selector: 'app-employdialog',\r\n  templateUrl: './employdialog.component.html',\r\n  styleUrls: ['./employdialog.component.css']\r\n})\r\nexport class EmploydialogComponent implements OnInit {\r\npublic emp1: Employ;\r\n  constructor(public thisdialogRef: MatDialogRef<EmploydialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) { }\r\n\r\n  ngOnInit() {\r\n \r\n  }\r\n\r\n  onCloseConfirm() {\r\nthis.thisdialogRef.close('Confirm');\r\n  }\r\n\r\n  onCloseCancel() {\r\nthis.thisdialogRef.close('Cancel');\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<p>\\r\\n  employeeupdate works!\\r\\n</p>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-employeeupdate',\r\n  templateUrl: './employeeupdate.component.html',\r\n  styleUrls: ['./employeeupdate.component.css']\r\n})\r\nexport class EmployeeupdateComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \".algnleft{\\r\\n    margin:20px \\r\\n}\\r\\n.div-left{\\r\\n    float:right;\\r\\n    padding-right:20px;\\r\\n}\\r\\n.mat-cell:nth-child(2), .mat-header-cell:nth-child(2) {\\r\\n    flex: 0 0 200px;\\r\\n}\\r\\n.martop{\\r\\n    margin-top: 14px;\\r\\n}\\r\\n.spinnerabove {\\r\\n    position:absolute;\\r\\n    top:50%;\\r\\n    left:50%;\\r\\n   \\r\\n    z-index: 10;\\r\\n  }\\r\\n  \"","module.exports = \"<div class=\\\"algnleft\\\">\\r\\n<div class=\\\"div-left\\\"><button mat-mini-fab>\\r\\n    <mat-icon aria-label=\\\"\\\" routerLink=\\\"../masterdata\\\">arrow_back</mat-icon>\\r\\n  </button></div>\\r\\n\\r\\n   <div class=\\\"example-loading-shade spinnerabove \\\"\\r\\n         *ngIf=\\\"isLoadingResults || isRateLimitReached\\\" >\\r\\n      <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\r\\n      <div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\r\\n        \\r\\n      </div>\\r\\n    </div> \\r\\n\\r\\n    \\r\\n  \\r\\n      <table mat-table [dataSource]=\\\"emp2\\\" class=\\\"mat-elevation-z8\\\"\\r\\n             matSort matSortActive=\\\"id\\\" matSortDisableClear matSortDirection=\\\"asc\\\" style=\\\"width:100%\\\">\\r\\n        <!-- Number Column -->\\r\\n        \\r\\n        <!-- Title Column -->\\r\\n        <ng-container  matColumnDef=\\\"id\\\">\\r\\n            <th mat-header-cell  *matHeaderCellDef>Id</th>\\r\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{row.id}}</td>\\r\\n          </ng-container>\\r\\n    \\r\\n\\r\\n        <ng-container  matColumnDef=\\\"name\\\">\\r\\n          <th mat-header-cell  *matHeaderCellDef>Name</th>\\r\\n          <td mat-cell *matCellDef=\\\"let row\\\">{{row.name}}</td>\\r\\n        </ng-container>\\r\\n  \\r\\n        <!-- State Column -->\\r\\n        <ng-container matColumnDef=\\\"code\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef>Code</th>\\r\\n          <td mat-cell *matCellDef=\\\"let row\\\">{{row.code}}</td>\\r\\n        </ng-container>\\r\\n  \\r\\n        <!-- Created Column -->\\r\\n        <ng-container matColumnDef=\\\"designation\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n            Designation\\r\\n          </th>\\r\\n          <td mat-cell *matCellDef=\\\"let row\\\">{{row.designation}}</td>\\r\\n        </ng-container>\\r\\n\\r\\n        <ng-container matColumnDef=\\\"mail\\\">\\r\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n              Mail\\r\\n            </th>\\r\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{row.mail}}</td>\\r\\n          </ng-container>\\r\\n\\r\\n          <ng-container matColumnDef=\\\"mob\\\">\\r\\n              <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                Mobile\\r\\n              </th>\\r\\n              <td mat-cell *matCellDef=\\\"let row\\\">{{row.mob}}</td>\\r\\n            </ng-container>\\r\\n\\r\\n           <mat-divider></mat-divider> \\r\\n        <ng-container matColumnDef=\\\"actionsColumn\\\">\\r\\n            <th mat-header-cell *matHeaderCellDef>Action</th>\\r\\n            \\r\\n            <mat-cell *matCellDef=\\\"let row\\\">\\r\\n                <button mat-icon-button>\\r\\n                    <mat-icon matTooltip=\\\"Update\\\" aria-label=\\\"Example icon-button with a heart icon\\\" (click)=\\\"openDialog(row.id)\\\" >update</mat-icon>\\r\\n                  </button>\\r\\n                  <button mat-icon-button>\\r\\n                      <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\"  matTooltip=\\\"Delete\\\" (click)=\\\"openDialog(row.id)\\\">delete</mat-icon>\\r\\n                    </button>\\r\\n               \\r\\n            </mat-cell>\\r\\n        </ng-container>\\r\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n         \\r\\n      </table>\\r\\n   <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"8\\\"></mat-paginator>\\r\\n  \\r\\n    <!--   <app-pagination [maxPages]=\\\"maxPages\\\"\\r\\n      [current]=\\\"1\\\"\\r\\n      [postsPerPage]=\\\"postsPerPage\\\"\\r\\n      [itemsPerPage]=\\\"itemsPerPage\\\"\\r\\n      (changePage)=\\\"pageChanged($event)\\\"></app-pagination> -->\\r\\n  \\r\\n</div>\"","import {Component, OnInit, ViewChild , Input} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {  MatDialog,  MatDialogRef , MatDialogConfig , MAT_DIALOG_DATA} from '@angular/material';\r\nimport {MatTableDataSource} from '@angular/material';\r\nimport {MatPaginator, MatSort} from '@angular/material';\r\nimport {merge, Observable, of as observableOf} from 'rxjs';\r\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\r\nimport {DataService} from '../data.service';\r\nimport { Employ } from '../models/employ.model';\r\nimport { MatDialogModule } from '@angular/material';\r\nimport {EmploydialogComponent} from '../employdialog/employdialog.component';\r\n\r\n\r\n@Component({\r\n  selector: 'app-emplyeeview',\r\n  templateUrl: './emplyeeview.component.html',\r\n  styleUrls: ['./emplyeeview.component.css']\r\n})\r\n\r\n\r\nexport class EmplyeeviewComponent implements OnInit {\r\n   @Input() public emp1: Employ;\r\n  dialogResult=\"\";\r\n  itemsPerPage: number = 10;\r\n  postsPerPage: number[] = [5, 10, 25];\r\nid;\r\n  emp:Employ[] = [];\r\n    emp2: Employees[] = [];\r\n  empid=new Employ();\r\n   exampleDatabase: ExampleHttpDao | null;\r\n\r\n  displayedColumns: string[] = ['id','name', 'code',  'designation' , 'mail', 'mob', 'actionsColumn' ];\r\n  /* //displayedColumns: string[] = [  'code', 'name', 'designation', 'mail' , 'phone']; */\r\n\r\n\r\n\r\n  resultsLength = 0;\r\n  isLoadingResults = true;\r\n  isRateLimitReached = false;\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  \r\n  page: (Observable<number>|any);\r\n  constructor(private http: HttpClient, private data1: DataService, private dialog: MatDialog) {\r\n\r\n   }\r\n   \r\n  /*  listEmployees()\r\n   {\r\n     this.data.getemployee(0, 2).subscribe(\r\n       data => this.emp = data['content']\r\n      \r\n      \r\n     );\r\n     console.log(this.data);\r\n    \r\n   } */\r\n   /* pageChanged(event) {\r\n    this.page = event.page;\r\n    \r\n    this.itemsPerPage = event.itemsPerPage;\r\n    this.loadEmployeeByPage(this.page, this.itemsPerPage);\r\n} */\r\n/* loadEmployeeByPage(page: number, rows: number) {\r\n \r\n  this.data.getemployee(page, rows).subscribe(\r\n    data => this.emp = data['content']\r\n  \r\n    );\r\n\r\n} */\r\n\r\n   // tslint:disable-next-line:member-ordering\r\n\r\n\r\n    /* openDialog() {\r\n    const dialogRef = this.dialog.open(DialogBodyComponent, {\r\n      height: '400px',\r\n  width: '600px'\r\n      \r\n    });\r\n  }  */\r\n\r\n  ngOnInit() {\r\n     this.exampleDatabase = new ExampleHttpDao(this.http);\r\n\r\n    // If the user changes the sort order, reset back to the first page.\r\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\r\n\r\n    merge(this.paginator.page)\r\n      .pipe(\r\n        startWith({}),\r\n        switchMap(() => {\r\n           console.log('enter1');\r\n          this.isLoadingResults = true;\r\n          return this.exampleDatabase!.getRepoIssues(this.paginator.pageIndex,\r\n           8);\r\n\r\n        }),\r\n        map(data => {\r\n          console.log('ggg');\r\n          // Flip flag to show that loading has finished.\r\n          this.isLoadingResults = false;\r\n          this.isRateLimitReached = false;\r\n          this.resultsLength = data['totalElements'];\r\n console.log(data['totalElements']);\r\n          return data;\r\n        }),\r\n        catchError(() => {\r\n          console.log('errr');\r\n          this.isLoadingResults = false;\r\n          // Catch if the GitHub API has reached its rate limit. Return empty data.\r\n          this.isRateLimitReached = true;\r\n          return observableOf([]);\r\n        })\r\n      ).subscribe(data => this.emp2 = data['content']);\r\n   // this.listEmployees();\r\n  }\r\n openDialog(id:number) {\r\n  \r\n  const item1 = this.emp2.find(i => i.id === id);\r\n \r\n    const dialogRef = this.dialog.open(EmploydialogComponent, {\r\n      width: '300px',\r\n      data:item1\r\n      \r\n          });\r\n          dialogRef.afterClosed().subscribe(result => {\r\n            console.log('dialog closed:${result}');\r\n            this.dialogResult = result;\r\n          });\r\n  \r\n  }\r\n \r\n\r\n /* loadEmployeeforupdate(id:number) {\r\n \r\n\r\n    this.data.getemployeebyid(id).subscribe(\r\n    data => this.empid = data,\r\n    error => console.log(error),\r\n         () => {\r\n    \r\n          } \r\n    );\r\n // this.openDialog();\r\n  \r\n\r\n} */\r\n  /* export interface Employdetails {\r\n    created_at: string;\r\n    number: string;\r\n    state: string;\r\n    title: string;\r\n  }\r\n */\r\n\r\n  \r\n      \r\n  }\r\n/* export interface GithubApi {\r\n  items: employees[];\r\n \r\n}\r\n */\r\n\r\n\r\n \r\n\r\nexport interface Employees {\r\n id: number;\r\n    code: number;\r\n    designation: string;\r\n    name: string;\r\n    mail: string;\r\n    mob: number;\r\n}\r\n\r\n/** An example database that the data source uses to retrieve data for the table. */\r\nexport class ExampleHttpDao { \r\n \r\n\r\n  constructor(private http: HttpClient) {}\r\n \r\n  getRepoIssues(page: number,records:number): Observable<Employees[]> {\r\n    const href = 'http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/employee/search/'+ page + '/' + records;\r\n   \r\n\r\n    return this.http.get<Employees[]>(href);\r\n  }\r\n}","module.exports = \".example-container {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n  }\\r\\n  \\r\\n  .example-container > * {\\r\\n      padding-left: 20px;\\r\\n      padding-top: 20px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .accordian > * {\\r\\n    padding-left: 50px;\\r\\n    padding-top: 50px;\\r\\n \\r\\n}\\r\\n  \\r\\n  .example-stretched-tabs {\\r\\n    max-width: 800px;\\r\\n  }\\r\\n  \\r\\n  example-small-box, .employee-box ,.client-box , .site-box, .escalation-box{\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    justify-content: center;\\r\\n    margin: 16px;\\r\\n    padding: 16px;\\r\\n    border-radius: 8px;\\r\\n  }\\r\\n  \\r\\n  .example-small-box {\\r\\n    height: 100px;\\r\\n    width: 100px;\\r\\n  }\\r\\n  \\r\\n  .employee-box {\\r\\n    height: 400px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .client-box {\\r\\n    height: 200px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .site-box {\\r\\n    height:650px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .escalation-box {\\r\\n    height: 440px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .button-row button,\\r\\n.button-row a {\\r\\n  margin-left: 90px;\\r\\n  margin-top: 8px\\r\\n}\\r\\n  \\r\\n  .site-form {\\r\\n  min-width: 150px;\\r\\n  max-width: 500px;\\r\\n  width: 100%;\\r\\n}\\r\\n  \\r\\n  .example-full-width {\\r\\n  width: 100%;\\r\\n}\\r\\n  \\r\\n  .example-headers-align .mat-expansion-panel-header-title, \\r\\n.example-headers-align .mat-expansion-panel-header-description {\\r\\n  flex-basis: 0;\\r\\n}\\r\\n  \\r\\n  .example-headers-align .mat-expansion-panel-header-description {\\r\\n  justify-content: space-between;\\r\\n  align-items: center;\\r\\n}\\r\\n  \\r\\n  .mt{\\r\\n  margin-top: 100px;\\r\\n}\\r\\n  \"","module.exports = \"<div class=\\\"example-container \\\">\\r\\n\\r\\n  <div>\\r\\n    <mat-card>\\r\\n        <button mat-mini-fab>\\r\\n            <mat-icon aria-label=\\\"\\\" routerLink=\\\"../EscalationtrackerComponent\\\">table_chart</mat-icon>\\r\\n          </button>\\r\\n      <mat-card-header>\\r\\n         \\r\\n        <mat-card-title></mat-card-title>\\r\\n\\r\\n      </mat-card-header>\\r\\n      <mat-divider></mat-divider>\\r\\n      <mat-progress-bar mode=\\\"indeterminate\\\" *ngIf=\\\"isLoadingResults\\\" ></mat-progress-bar> \\r\\n      <mat-card-content>\\r\\n        <div>\\r\\n          <mat-form-field class=\\\"example-full-width\\\">\\r\\n            <input type=\\\"text\\\" placeholder=\\\"Type of Escalation\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto\\\">\\r\\n            <mat-autocomplete #auto=\\\"matAutocomplete\\\">\\r\\n              <mat-option *ngFor=\\\"let escalation of escalation$\\\" [value]=\\\"escalation.escalationType\\\" (click)=\\\"setEscalationtype(escalation.escalationType)\\\" >\\r\\n                {{escalation.escalationType}}\\r\\n              </mat-option>\\r\\n            </mat-autocomplete>\\r\\n          </mat-form-field>\\r\\n\\r\\n\\r\\n          <mat-form-field class=\\\"example-full-width\\\">\\r\\n            <input matInput placeholder=\\\"Description\\\" [(ngModel)]=\\\"esc2.description\\\">\\r\\n          </mat-form-field>\\r\\n\\r\\n\\r\\n          <mat-form-field class=\\\"example-full-width\\\">\\r\\n            <input type=\\\"text\\\" placeholder=\\\"Communicated Via\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto1\\\">\\r\\n            <mat-autocomplete #auto1=\\\"matAutocomplete\\\">\\r\\n              <mat-option *ngFor=\\\"let com1 of communicatedvia; let i = index\\\" [value]=\\\"com1\\\" (click)=\\\"setCommunicatedvia(com1)\\\">\\r\\n                {{com1}}\\r\\n              </mat-option>\\r\\n            </mat-autocomplete>\\r\\n          </mat-form-field> \\r\\n\\r\\n\\r\\n          <mat-form-field class=\\\"example-full-width\\\">\\r\\n            <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Communicated Date\\\" format=\\\"dd-MM-yyyy\\\" [(ngModel)]=\\\"esc2.communicatedDate\\\">\\r\\n            <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n            <mat-datepicker #picker></mat-datepicker>\\r\\n          </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"example-full-width\\\">\\r\\n            <input matInput [matDatepicker]=\\\"picker1\\\" placeholder=\\\"Closure Date\\\" format=\\\"dd-MM-yyyy\\\" [(ngModel)]=\\\"esc2.closureDate\\\">\\r\\n            <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\r\\n            <mat-datepicker #picker1></mat-datepicker>\\r\\n          </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"example-full-width\\\">\\r\\n            <input matInput [matDatepicker]=\\\"picker2\\\" placeholder=\\\"Estimated Closure Date\\\" format=\\\"dd-MM-yyyy\\\" [(ngModel)]=\\\"esc2.estimatedClosureDate\\\">\\r\\n            <mat-datepicker-toggle matSuffix [for]=\\\"picker2\\\"></mat-datepicker-toggle>\\r\\n            <mat-datepicker #picker2></mat-datepicker>\\r\\n          </mat-form-field>\\r\\n\\r\\n          <div class=\\\"button-row\\\">\\r\\n\\r\\n            <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postEscalationtracker()\\\">Submit</button>\\r\\n \\r\\n\\r\\n          </div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n        </div>\\r\\n      </mat-card-content>\\r\\n    </mat-card>\\r\\n  </div>\\r\\n</div>     \\r\\n        \\r\\n                    \\r\\n                   \\r\\n                       \\r\\n  \\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\nimport {DataService} from '../data.service';\r\nimport {Escalation} from '../models/escalation.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {merge, Observable, of as observableOf} from 'rxjs';\r\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\r\nimport { Dateformat } from '../dateformat.service';\r\nimport {ToasterModule,ToasterService,ToasterConfig} from 'angular2-toaster';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-escalation',\r\n  templateUrl: './escalation.component.html',\r\n  styleUrls: ['./escalation.component.css']\r\n})\r\nexport class EscalationComponent implements OnInit {\r\n  private toasterService: ToasterService;\r\n  communicatedvia: string[] = ['Phone', 'Email'];\r\n  myControl = new FormControl();\r\n  escalation$: Object;\r\n  //esc2:Escalation[] = [];\r\n  //public esc2={\"typeOfEscalation\":\"\",\"ommunicatedVia\":\"\"};\r\n  esc2 = new Escalation();\r\n  private newAttribute: any = {};\r\n  isLoadingResults = false;\r\n  constructor(private data: DataService, private http: HttpClient,private dateFormat: Dateformat ,toasterService:ToasterService){\r\n    this.toasterService=toasterService;\r\n  }\r\n\r\n\r\n  setEscalationtype(id:string)\r\n  {\r\n    console.log(id);\r\n    this.esc2.typeOfEscalation = id;\r\n  }\r\n\r\n  setCommunicatedvia(id:string)\r\n  {\r\n    console.log(id);\r\n    this.esc2.communicatedVia = id;\r\n  }\r\n\r\npostEscalationtracker(){\r\n\r\nthis.esc2.communicatedDate=this.dateFormat.convertdate(this.esc2.communicatedDate);\r\nthis.esc2.estimatedClosureDate=this.dateFormat.convertdate(this.esc2.estimatedClosureDate);\r\nthis.esc2.closureDate=this.dateFormat.convertdate(this.esc2.closureDate);\r\n\r\n  this.isLoadingResults = true;\r\n   \r\n  this.http.post('http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/opstracker/escalation', this.esc2)\r\n  .subscribe(  (data:any) => { \r\n    console.log(data['status']);\r\n    if(data['status']=='success'){\r\n      this.isLoadingResults = false;\r\n      this.toasterService.pop('success','Successfully Submitted' ,'');\r\n    } else {\r\n      this.isLoadingResults = false;\r\n      this.toasterService.pop('warning','Not Submitted' ,'');\r\n    }\r\n \r\n  \r\n },\r\n (err: HttpErrorResponse) => {\r\n     if (err.error instanceof Error) {\r\n      this.isLoadingResults = false;\r\n     \r\n         console.log('An error occurred:', err.error.message);\r\n     } else {\r\n      this.toasterService.pop('warning','Not Submitted' ,'');\r\n      this.isLoadingResults = false;\r\n      \r\n         console.log('Backend returned status code: ', err.status);\r\n         console.log('Response body:', err.error);\r\n     }\r\n  }\r\n );\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.data.getEscalation().subscribe(\r\n      data => this.escalation$ = data\r\n    );\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<div>\\r\\n\\r\\n    <mat-dialog-content>\\r\\n      \\r\\n      <div class=\\\"row\\\" >\\r\\n                            \\r\\n        <mat-form-field class=\\\"example-full-width\\\">\\r\\n            <input matInput placeholder=\\\"Escalation Type\\\" [(ngModel)]=\\\"data.escalationType\\\">\\r\\n          </mat-form-field>\\r\\n    \\r\\n    </div>\\r\\n    \\r\\n    \\r\\n   \\r\\n    \\r\\n     \\r\\n     \\r\\n    </mat-dialog-content>\\r\\n    <mat-dialog-actions>\\r\\n        \\r\\n          <div class=\\\"button-row\\\">\\r\\n                                              \\r\\n            <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postClient()\\\" >Update</button>\\r\\n              <button mat-raised-button color=\\\"accent\\\" (click)=\\\"onCloseCancel()\\\">Cancel</button>\\r\\n              \\r\\n            </div>    \\r\\n    \\r\\n    </mat-dialog-actions>\\r\\n      </div>\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport {MatDialog} from '@angular/material';\r\nimport { MatDialogRef } from '@angular/material';\r\nimport {MAT_DIALOG_DATA} from '@angular/material';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {DataService} from '../data.service';\r\nimport { Escalation } from '../models/escalation.model';\r\n\r\n@Component({\r\n  selector: 'app-escalationdialog',\r\n  templateUrl: './escalationdialog.component.html',\r\n  styleUrls: ['./escalationdialog.component.css']\r\n})\r\nexport class EscalationdialogComponent implements OnInit {\r\n\r\n  constructor(public thisdialogRef: MatDialogRef<EscalationdialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n  onCloseConfirm() {\r\n    this.thisdialogRef.close('Confirm');\r\n      }\r\n    \r\n      onCloseCancel() {\r\n    this.thisdialogRef.close('Cancel');\r\n      }\r\n}\r\n","module.exports = \"\"","module.exports = \"<p>\\r\\n  escalationmainview works!\\r\\n</p>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-escalationmainview',\r\n  templateUrl: './escalationmainview.component.html',\r\n  styleUrls: ['./escalationmainview.component.css']\r\n})\r\nexport class EscalationmainviewComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<div>\\r\\n\\r\\n    <mat-dialog-content>\\r\\n      \\r\\n      <div class=\\\"row\\\" >\\r\\n                            \\r\\n        <mat-form-field class=\\\"example-full-width\\\">\\r\\n            <input matInput placeholder=\\\"Types Of Escalation\\\" [(ngModel)]=\\\"data.typeOfEscalation\\\">\\r\\n          </mat-form-field>\\r\\n    \\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\" >\\r\\n                            \\r\\n      <mat-form-field class=\\\"example-full-width\\\">\\r\\n        <input matInput placeholder=\\\"Description\\\" [(ngModel)]=\\\"data.description\\\">\\r\\n      </mat-form-field>\\r\\n    \\r\\n    </div>\\r\\n    <div class=\\\"row\\\" >\\r\\n                            \\r\\n      <mat-form-field class=\\\"example-full-width\\\">\\r\\n        <input matInput placeholder=\\\"Communicated Via\\\" [(ngModel)]=\\\"data.communicatedVia\\\">\\r\\n      </mat-form-field>\\r\\n    \\r\\n    </div>\\r\\n    \\r\\n    <div class=\\\"row\\\" >\\r\\n                            \\r\\n      <mat-form-field class=\\\"example-full-width\\\">\\r\\n        <input matInput placeholder=\\\"Communicated Date\\\" [(ngModel)]=\\\"data.communicatedDate\\\">\\r\\n      </mat-form-field>\\r\\n    \\r\\n    </div>\\r\\n    <div class=\\\"row\\\" >\\r\\n                            \\r\\n      <mat-form-field class=\\\"example-full-width\\\">\\r\\n        <input matInput placeholder=\\\"Closure date\\\" [(ngModel)]=\\\"data.closureDate\\\">\\r\\n      </mat-form-field>\\r\\n    \\r\\n    </div>\\r\\n    <div class=\\\"row\\\" >\\r\\n                            \\r\\n      <mat-form-field class=\\\"example-full-width\\\">\\r\\n        <input matInput placeholder=\\\"Estimated Closure Date\\\" [(ngModel)]=\\\"data.estimatedClosureDate\\\">\\r\\n      </mat-form-field>\\r\\n    \\r\\n    </div>\\r\\n    \\r\\n     \\r\\n     \\r\\n    </mat-dialog-content>\\r\\n    <mat-dialog-actions>\\r\\n        \\r\\n          <div class=\\\"button-row\\\">\\r\\n                                              \\r\\n            <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postEmployee()\\\" >Update</button>\\r\\n              <button mat-raised-button color=\\\"accent\\\" (click)=\\\"onCloseCancel()\\\">Cancel</button>\\r\\n              \\r\\n            </div>    \\r\\n    \\r\\n    </mat-dialog-actions>\\r\\n      </div>\"","import { Component, OnInit , Inject} from '@angular/core';\r\nimport {MatDialog} from '@angular/material';\r\nimport { MatDialogRef } from '@angular/material';\r\nimport {MAT_DIALOG_DATA} from '@angular/material';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {DataService} from '../data.service';\r\nimport { Employ } from '../models/employ.model';\r\n@Component({\r\n  selector: 'app-escalationtrackerdialog',\r\n  templateUrl: './escalationtrackerdialog.component.html',\r\n  styleUrls: ['./escalationtrackerdialog.component.css']\r\n})\r\nexport class EscalationtrackerdialogComponent implements OnInit {\r\n\r\n  constructor(public thisdialogRef: MatDialogRef<EscalationtrackerdialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n  onCloseConfirm() {\r\n    this.thisdialogRef.close('Confirm');\r\n      }\r\n    \r\n      onCloseCancel() {\r\n    this.thisdialogRef.close('Cancel');\r\n      }\r\n    \r\n}\r\n","module.exports = \".algnleft{\\r\\n    margin:20px \\r\\n}\\r\\n.div-left{\\r\\n    float:right;\\r\\n    padding-right:20px;\\r\\n}\\r\\n.mat-cell:nth-child(2), .mat-header-cell:nth-child(2) {\\r\\n    flex: 0 0 200px;\\r\\n}\\r\\n.martop{\\r\\n    margin-top: 14px;\\r\\n}\\r\\n.spinnerabove {\\r\\n    position:absolute;\\r\\n    top:50%;\\r\\n    left:50%;\\r\\n   \\r\\n    z-index: 10;\\r\\n  }\\r\\n  \"","module.exports = \"<div class=\\\"algnleft\\\">\\r\\n    <div class=\\\"div-left\\\"><button mat-mini-fab>\\r\\n        <mat-icon aria-label=\\\"\\\" routerLink=\\\"../masterdata\\\">arrow_back</mat-icon>\\r\\n      </button></div>\\r\\n    \\r\\n       <div class=\\\"example-loading-shade spinnerabove \\\"\\r\\n             *ngIf=\\\"isLoadingResults || isRateLimitReached\\\" >\\r\\n          <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\r\\n          <div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\r\\n            \\r\\n          </div>\\r\\n        </div> \\r\\n    \\r\\n        \\r\\n      \\r\\n          <table mat-table [dataSource]=\\\"esc2\\\" class=\\\"mat-elevation-z8\\\"\\r\\n                 matSort matSortActive=\\\"id\\\" matSortDisableClear matSortDirection=\\\"asc\\\" style=\\\"width:100%\\\">\\r\\n            <!-- Number Column -->\\r\\n            \\r\\n            <!-- Title Column -->\\r\\n            <ng-container  matColumnDef=\\\"id\\\">\\r\\n                <th mat-header-cell  *matHeaderCellDef>Id</th>\\r\\n                <td mat-cell *matCellDef=\\\"let row\\\">{{row.id}}</td>\\r\\n              </ng-container>\\r\\n        \\r\\n    \\r\\n            <ng-container  matColumnDef=\\\"typeOfEscalation\\\">\\r\\n              <th mat-header-cell  *matHeaderCellDef>Types Of Escalation</th>\\r\\n              <td mat-cell *matCellDef=\\\"let row\\\">{{row.typeOfEscalation}}</td>\\r\\n            </ng-container>\\r\\n      \\r\\n            <!-- State Column -->\\r\\n            <ng-container matColumnDef=\\\"description\\\">\\r\\n              <th mat-header-cell *matHeaderCellDef>Description</th>\\r\\n              <td mat-cell *matCellDef=\\\"let row\\\">{{row.description}}</td>\\r\\n            </ng-container>\\r\\n      \\r\\n            <!-- Created Column -->\\r\\n            <ng-container matColumnDef=\\\"communicatedVia\\\">\\r\\n              <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n               Communicated Via\\r\\n              </th>\\r\\n              <td mat-cell *matCellDef=\\\"let row\\\">{{row.communicatedVia}}</td>\\r\\n            </ng-container>\\r\\n    \\r\\n            <ng-container matColumnDef=\\\"communicatedDate\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                  Communicated Date\\r\\n                </th>\\r\\n                <td mat-cell *matCellDef=\\\"let row\\\">{{row.communicatedDate}}</td>\\r\\n              </ng-container>\\r\\n    \\r\\n              <ng-container matColumnDef=\\\"closureDate\\\">\\r\\n                  <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                    Closure Date\\r\\n                  </th>\\r\\n                  <td mat-cell *matCellDef=\\\"let row\\\">{{row.closureDate}}</td>\\r\\n                </ng-container>\\r\\n\\r\\n                <ng-container matColumnDef=\\\"estimatedClosureDate\\\">\\r\\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                      Estimated Closure Date\\r\\n                    </th>\\r\\n                    <td mat-cell *matCellDef=\\\"let row\\\">{{row.estimatedClosureDate}}</td>\\r\\n                  </ng-container>\\r\\n    \\r\\n               <mat-divider></mat-divider> \\r\\n            <ng-container matColumnDef=\\\"actionsColumn\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef>Action</th>\\r\\n                \\r\\n                <mat-cell *matCellDef=\\\"let row\\\">\\r\\n                    <button mat-icon-button>\\r\\n                        <mat-icon matTooltip=\\\"Update\\\" aria-label=\\\"Example icon-button with a heart icon\\\" (click)=\\\"openDialog(row.id)\\\" >update</mat-icon>\\r\\n                      </button>\\r\\n                      <button mat-icon-button>\\r\\n                          <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\"  matTooltip=\\\"Delete\\\" (click)=\\\"openDialog(row.id)\\\">delete</mat-icon>\\r\\n                        </button>\\r\\n                   \\r\\n                </mat-cell>\\r\\n            </ng-container>\\r\\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n             \\r\\n          </table>\\r\\n       <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"8\\\"></mat-paginator>\\r\\n      \\r\\n        <!--   <app-pagination [maxPages]=\\\"maxPages\\\"\\r\\n          [current]=\\\"1\\\"\\r\\n          [postsPerPage]=\\\"postsPerPage\\\"\\r\\n          [itemsPerPage]=\\\"itemsPerPage\\\"\\r\\n          (changePage)=\\\"pageChanged($event)\\\"></app-pagination> -->\\r\\n      \\r\\n    </div>\"","import {Component, OnInit, ViewChild , Input} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {  MatDialog,  MatDialogRef , MatDialogConfig , MAT_DIALOG_DATA} from '@angular/material';\r\nimport {MatTableDataSource} from '@angular/material';\r\nimport {MatPaginator, MatSort} from '@angular/material';\r\nimport {merge, Observable, of as observableOf} from 'rxjs';\r\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\r\nimport {DataService} from '../data.service';\r\nimport { Employ } from '../models/employ.model';\r\nimport { MatDialogModule } from '@angular/material';\r\nimport {EscalationtrackerdialogComponent} from '../escalationtrackerdialog/escalationtrackerdialog.component';\r\n\r\n\r\n@Component({\r\n  selector: 'app-escalationtrackerview',\r\n  templateUrl: './escalationtrackerview.component.html',\r\n  styleUrls: ['./escalationtrackerview.component.css']\r\n})\r\nexport class EscalationtrackerviewComponent implements OnInit {\r\n  @Input() public emp1: Employ;\r\n  dialogResult=\"\";\r\n  itemsPerPage: number = 10;\r\n  postsPerPage: number[] = [5, 10, 25];\r\nid;\r\n  emp:Employ[] = [];\r\n    esc2: Escalation[] = [];\r\n  empid=new Employ();\r\n   exampleDatabase: ExampleHttpDao | null;\r\n\r\n  displayedColumns: string[] = ['id', 'typeOfEscalation',  'description' , 'communicatedVia', 'communicatedDate', 'closureDate', 'estimatedClosureDate' ,'actionsColumn'];\r\n  /* //displayedColumns: string[] = [  'code', 'name', 'designation', 'mail' , 'phone']; */\r\n\r\n\r\n\r\n  resultsLength = 0;\r\n  isLoadingResults = true;\r\n  isRateLimitReached = false;\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  \r\n  page: (Observable<number>|any);\r\n  constructor(private http: HttpClient, private data1: DataService, private dialog: MatDialog) {\r\n\r\n   }\r\n   \r\n  /*  listEmployees()\r\n   {\r\n     this.data.getemployee(0, 2).subscribe(\r\n       data => this.emp = data['content']\r\n      \r\n      \r\n     );\r\n     console.log(this.data);\r\n    \r\n   } */\r\n   /* pageChanged(event) {\r\n    this.page = event.page;\r\n    \r\n    this.itemsPerPage = event.itemsPerPage;\r\n    this.loadEmployeeByPage(this.page, this.itemsPerPage);\r\n} */\r\n/* loadEmployeeByPage(page: number, rows: number) {\r\n \r\n  this.data.getemployee(page, rows).subscribe(\r\n    data => this.emp = data['content']\r\n  \r\n    );\r\n\r\n} */\r\n\r\n   // tslint:disable-next-line:member-ordering\r\n\r\n\r\n    /* openDialog() {\r\n    const dialogRef = this.dialog.open(DialogBodyComponent, {\r\n      height: '400px',\r\n  width: '600px'\r\n      \r\n    });\r\n  }  */\r\n\r\n  ngOnInit() {\r\n     this.exampleDatabase = new ExampleHttpDao(this.http);\r\n\r\n    // If the user changes the sort order, reset back to the first page.\r\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\r\n\r\n    merge(this.paginator.page)\r\n      .pipe(\r\n        startWith({}),\r\n        switchMap(() => {\r\n           console.log('enter1');\r\n          this.isLoadingResults = true;\r\n          return this.exampleDatabase!.getRepoIssues(this.paginator.pageIndex,\r\n           8);\r\n\r\n        }),\r\n        map(data => {\r\n          console.log('ggg');\r\n          // Flip flag to show that loading has finished.\r\n          this.isLoadingResults = false;\r\n          this.isRateLimitReached = false;\r\n          this.resultsLength = data['totalElements'];\r\n console.log(data['totalElements']);\r\n          return data;\r\n        }),\r\n        catchError(() => {\r\n          console.log('errr');\r\n          this.isLoadingResults = false;\r\n          // Catch if the GitHub API has reached its rate limit. Return empty data.\r\n          this.isRateLimitReached = true;\r\n          return observableOf([]);\r\n        })\r\n      ).subscribe(data => this.esc2 = data['content']);\r\n   // this.listEmployees();\r\n  }\r\n\r\n\r\n openDialog(id:number) {\r\n  \r\n  const item1 = this.esc2.find(i => i.id === id);\r\n \r\n    const dialogRef = this.dialog.open(EscalationtrackerdialogComponent, {\r\n      width: '300px',\r\n      data:item1\r\n      \r\n          });\r\n          dialogRef.afterClosed().subscribe(result => {\r\n            console.log('dialog closed:${result}');\r\n            this.dialogResult = result;\r\n          });\r\n  \r\n  }\r\n}\r\n\r\nexport interface Escalation {\r\n  id: number;\r\n  typeOfEscalation: string;\r\n  description: string;\r\n \r\n  communicatedVia: string;\r\n  communicatedDate: string;\r\n  closureDate: string;\r\n  estimatedClosureDate: string;\r\n }\r\n \r\n /** An example database that the data source uses to retrieve data for the table. */\r\n export class ExampleHttpDao { \r\n  \r\n \r\n   constructor(private http: HttpClient) {}\r\n  \r\n   getRepoIssues(page: number,records:number): Observable<Escalation[]> {\r\n     const href = 'http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/opstracker/escalation/search/'+ page + '/' + records;\r\n    \r\n     \r\n     return this.http.get<Escalation[]>(href);\r\n   }\r\n }","module.exports = \"\"","module.exports = \"<p>\\r\\n  escalationupdate works!\\r\\n</p>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-escalationupdate',\r\n  templateUrl: './escalationupdate.component.html',\r\n  styleUrls: ['./escalationupdate.component.css']\r\n})\r\nexport class EscalationupdateComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \".algnleft{\\r\\n    margin:20px \\r\\n}\\r\\n.div-left{\\r\\n    float:right;\\r\\n    padding-right:20px;\\r\\n}\\r\\n.mat-cell:nth-child(2), .mat-header-cell:nth-child(2) {\\r\\n    flex: 0 0 200px;\\r\\n}\\r\\n.martop{\\r\\n    margin-top: 14px;\\r\\n}\\r\\n.spinnerabove {\\r\\n    position:absolute;\\r\\n    top:50%;\\r\\n    left:50%;\\r\\n   \\r\\n    z-index: 10;\\r\\n  }\\r\\n  \"","module.exports = \"<div class=\\\"algnleft\\\">\\r\\n    <div class=\\\"div-left\\\"><button mat-mini-fab>\\r\\n        <mat-icon aria-label=\\\"\\\" routerLink=\\\"../masterdata\\\">arrow_back</mat-icon>\\r\\n      </button></div>\\r\\n    \\r\\n       <div class=\\\"example-loading-shade spinnerabove \\\"\\r\\n             *ngIf=\\\"isLoadingResults || isRateLimitReached\\\" >\\r\\n          <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\r\\n          <div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\r\\n            \\r\\n          </div>\\r\\n        </div> \\r\\n    \\r\\n        \\r\\n      \\r\\n          <table mat-table [dataSource]=\\\"escalation2\\\" class=\\\"mat-elevation-z8\\\"\\r\\n                 matSort matSortActive=\\\"id\\\" matSortDisableClear matSortDirection=\\\"asc\\\" style=\\\"width:100%\\\">\\r\\n            <!-- Number Column -->\\r\\n            \\r\\n            <!-- Title Column -->\\r\\n            <ng-container  matColumnDef=\\\"id\\\">\\r\\n                <th mat-header-cell  *matHeaderCellDef>Id</th>\\r\\n                <td mat-cell *matCellDef=\\\"let row\\\">{{row.id}}</td>\\r\\n              </ng-container>\\r\\n        \\r\\n    \\r\\n           \\r\\n      \\r\\n            <!-- State Column -->\\r\\n            <ng-container matColumnDef=\\\"escalationType\\\">\\r\\n              <th mat-header-cell *matHeaderCellDef>Project Code</th>\\r\\n              <td mat-cell *matCellDef=\\\"let row\\\">{{row.escalationType}}</td>\\r\\n            </ng-container>\\r\\n      \\r\\n          \\r\\n    \\r\\n            \\r\\n    \\r\\n              \\r\\n    \\r\\n               <mat-divider></mat-divider> \\r\\n            <ng-container matColumnDef=\\\"actionsColumn\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef>Action</th>\\r\\n                \\r\\n                <mat-cell *matCellDef=\\\"let row\\\">\\r\\n                    <button mat-icon-button>\\r\\n                        <mat-icon matTooltip=\\\"Update\\\" aria-label=\\\"Example icon-button with a heart icon\\\" (click)=\\\"openDialog(row.id)\\\" >update</mat-icon>\\r\\n                      </button>\\r\\n                      <button mat-icon-button>\\r\\n                          <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\"  matTooltip=\\\"Delete\\\" (click)=\\\"openDialog(row.id)\\\">delete</mat-icon>\\r\\n                        </button>\\r\\n                   \\r\\n                </mat-cell>\\r\\n            </ng-container>\\r\\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n             \\r\\n          </table>\\r\\n       <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"8\\\"></mat-paginator>\\r\\n      \\r\\n        <!--   <app-pagination [maxPages]=\\\"maxPages\\\"\\r\\n          [current]=\\\"1\\\"\\r\\n          [postsPerPage]=\\\"postsPerPage\\\"\\r\\n          [itemsPerPage]=\\\"itemsPerPage\\\"\\r\\n          (changePage)=\\\"pageChanged($event)\\\"></app-pagination> -->\\r\\n      \\r\\n    </div>\"","import { Component, OnInit, ViewChild , Input } from '@angular/core';\r\nimport {MatPaginator, MatSort} from '@angular/material';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {  MatDialog,  MatDialogRef , MatDialogConfig , MAT_DIALOG_DATA} from '@angular/material';\r\nimport {MatTableDataSource} from '@angular/material';\r\n\r\nimport {merge, Observable, of as observableOf} from 'rxjs';\r\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\r\nimport {DataService} from '../data.service';\r\nimport {EscalationdialogComponent} from '../escalationdialog/escalationdialog.component';\r\n\r\n@Component({\r\n  selector: 'app-escalationview',\r\n  templateUrl: './escalationview.component.html',\r\n  styleUrls: ['./escalationview.component.css']\r\n})\r\nexport class EscalationviewComponent implements OnInit {\r\n  dialogResult=\"\";\r\n  escalation2: Escalation[] = [];\r\n  exampleDatabase: ExampleHttpDao | null;\r\n\r\n  displayedColumns: string[] = ['id','escalationType','actionsColumn' ];\r\n  /* //displayedColumns: string[] = [  'code', 'name', 'designation', 'mail' , 'phone']; */\r\n\r\n\r\n\r\n  resultsLength = 0;\r\n  isLoadingResults = true;\r\n  isRateLimitReached = false;\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  \r\n  page: (Observable<number>|any);\r\n  constructor(private http: HttpClient, private data1: DataService, private dialog: MatDialog) { }\r\n\r\n  ngOnInit() {\r\n    this.exampleDatabase = new ExampleHttpDao(this.http);\r\n\r\n   // If the user changes the sort order, reset back to the first page.\r\n //  this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\r\n\r\n   merge(this.paginator.page)\r\n     .pipe(\r\n       startWith({}),\r\n       switchMap(() => {\r\n          console.log('enter1');\r\n         this.isLoadingResults = true;\r\n         return this.exampleDatabase!.getRepoIssues(this.paginator.pageIndex,\r\n          8);\r\n\r\n       }),\r\n       map(data => {\r\n         console.log('ggg');\r\n         // Flip flag to show that loading has finished.\r\n         this.isLoadingResults = false;\r\n         this.isRateLimitReached = false;\r\n         this.resultsLength = data['totalElements'];\r\nconsole.log(data['totalElements']);\r\n         return data;\r\n       }),\r\n       catchError(() => {\r\n         console.log('errr');\r\n         this.isLoadingResults = false;\r\n         // Catch if the GitHub API has reached its rate limit. Return empty data.\r\n         this.isRateLimitReached = true;\r\n         return observableOf([]);\r\n       })\r\n     ).subscribe(data => this.escalation2 = data['content']);\r\n  // this.listEmployees();\r\n    \r\n  }\r\n  openDialog(id:number) {\r\n  \r\n    const item1 = this.escalation2.find(i => i.id === id);\r\n   \r\n      const dialogRef = this.dialog.open(EscalationdialogComponent, {\r\n        width: '300px',\r\n        data:item1\r\n        \r\n            });\r\n            dialogRef.afterClosed().subscribe(result => {\r\n              console.log('dialog closed:${result}');\r\n              this.dialogResult = result;\r\n            });\r\n    \r\n    }\r\n}\r\n\r\nexport interface Escalation {\r\n  id: number;\r\n  escalationType: number;\r\n\r\n\r\n\r\n}\r\n \r\n /** An example database that the data source uses to retrieve data for the table. */\r\n export class ExampleHttpDao { \r\n  \r\n \r\n   constructor(private http: HttpClient) {}\r\n  \r\n   getRepoIssues(page: number,records:number): Observable<Escalation[]> {\r\n     const href = 'http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/esctype/search/'+ page + '/' + records;\r\n    \r\n \r\n     return this.http.get<Escalation[]>(href);\r\n   }\r\n }\r\n","module.exports = \"\\r\\n.example-container {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  \\r\\n}\\r\\n\\r\\n.example-container > * {\\r\\n    padding-left: 20px;\\r\\n    padding-top: 20px;\\r\\n  width: 200px;\\r\\n  position:absolute; /*it can be fixed too*/\\r\\n        left:0; right:0;\\r\\n        top:0; bottom:0;\\r\\n        margin:auto;\\r\\n\\r\\n        /*this to solve \\\"the content will not be cut when the window is smaller than the content\\\": */\\r\\n        max-width:100%;\\r\\n        max-height:100%;\\r\\n        overflow:auto;\\r\\n \\r\\n}\\r\\n\\r\\n.content {\\r\\n  width: 400px;\\r\\n  position: absolute;\\r\\n  left: 50%;\\r\\n  top: 50%;\\r\\n  -webkit-transform: translate(-50%, -50%);\\r\\n  transform: translate(-50%, -50%);\\r\\n  margin: 2em auto;\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.menu-button {\\r\\n  transition: 300ms ease-in-out;\\r\\n  -webkit-transform: rotate(0deg);\\r\\n          transform: rotate(0deg);\\r\\n}\\r\\n\\r\\n.menu-button.rotated {\\r\\n  -webkit-transform: rotate(180deg);\\r\\n          transform: rotate(180deg);\\r\\n}\\r\\n\\r\\n.submenu {\\r\\n  overflow-y: hidden;\\r\\n  transition: 300ms ease-in-out;\\r\\n  height: 0;\\r\\n}\\r\\n\\r\\n.submenu.expanded {\\r\\n  height: 144px;\\r\\n}\"","module.exports = \"<div class=\\\"content\\\" >\\r\\n  <div >\\r\\n    <mat-card style=\\\"background-color:#d1dddb\\\">\\r\\n        <mat-card-header>\\r\\n         \\r\\n                <mat-card-title><p>Please login to continue</p></mat-card-title>\\r\\n               \\r\\n        </mat-card-header>\\r\\n        <mat-divider ></mat-divider> \\r\\n        <mat-card-content>\\r\\n        <div style=\\\"margin-top:10px\\\">\\r\\n           \\r\\n          <mat-form-field class=\\\"example-full-width\\\">\\r\\n            <input matInput placeholder=\\\"Username\\\"  required >\\r\\n          </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"example-full-width\\\">\\r\\n            <input matInput type=\\\"password\\\" placeholder=\\\"Password\\\"  required>\\r\\n          </mat-form-field>\\r\\n          <div class=\\\"button-row\\\">\\r\\n                                        \\r\\n            <button mat-raised-button color=\\\"accent\\\" (click)=\\\"onButtonclick()\\\">Login</button>\\r\\n            \\r\\n            \\r\\n          </div>\\r\\n         \\r\\n        \\r\\n         \\r\\n         \\r\\n          \\r\\n            \\r\\n               \\r\\n\\r\\n                  \\r\\n                    \\r\\n                 \\r\\n                 \\r\\n                     \\r\\n                      \\r\\n\\r\\n     </div>\\r\\n     </mat-card-content>\\r\\n     </mat-card>\\r\\n     </div>\\r\\n</div>\"","import { Component, HostBinding, OnInit } from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\nimport { Toolbarservice } from '../my-nav/my-nav.service';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\n\r\n\r\n\r\n@Component({\r\n\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css'],\r\n  providers: [Toolbarservice]\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  myControl = new FormControl();\r\n  constructor(private activaterouter: ActivatedRoute, private router: Router, public nav: Toolbarservice) { }\r\n\r\n  ngOnInit() {\r\n\r\n\r\n  }\r\n\r\n  onButtonclick(): void {\r\n\r\n    this.router.navigate(['/masterdata']);\r\n\r\n\r\n  }\r\n\r\n}\r\n","module.exports = \".example-container {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n  }\\r\\n  \\r\\n  .example-container > * {\\r\\n      padding-left: 20px;\\r\\n      padding-top: 5px;\\r\\n    width: 100%;\\r\\n  }\\r\\n  \\r\\n  .accordian > * {\\r\\n    padding-left: 50px;\\r\\n    padding-top: 50px;\\r\\n \\r\\n}\\r\\n  \\r\\n  .example-stretched-tabs {\\r\\n    max-width: 800px;\\r\\n  }\\r\\n  \\r\\n  example-small-box, .employee-box ,.client-box , .site-box, .escalation-box{\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    justify-content: center;\\r\\n    margin: 16px;\\r\\n    padding: 16px;\\r\\n    border-radius: 8px;\\r\\n  }\\r\\n  \\r\\n  .example-small-box {\\r\\n    height: 100px;\\r\\n    width: 100px;\\r\\n  }\\r\\n  \\r\\n  .employee-box {\\r\\n    height: 400px;\\r\\n    width: 300px;\\r\\n    \\r\\n  }\\r\\n  \\r\\n  .client-box {\\r\\n    height: 200px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .site-box {\\r\\n    height:630px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .escalation-box {\\r\\n    height: 150px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .button-row button,\\r\\n.button-row a {\\r\\n  margin-left: 115px;\\r\\n  margin-top: 8px\\r\\n}\\r\\n  \\r\\n  .site-form {\\r\\n  min-width: 150px;\\r\\n  max-width: 500px;\\r\\n  width: 100%;\\r\\n}\\r\\n  \\r\\n  .example-full-width {\\r\\n  width: 100%;\\r\\n}\\r\\n  \\r\\n  .example-headers-align .mat-expansion-panel-header-title, \\r\\n.example-headers-align .mat-expansion-panel-header-description {\\r\\n  flex-basis: 0;\\r\\n}\\r\\n  \\r\\n  .example-headers-align .mat-expansion-panel-header-description {\\r\\n  justify-content: space-between;\\r\\n  align-items: center;\\r\\n}\\r\\n  \\r\\n  .mt{\\r\\n  margin-top: 100px;\\r\\n}\\r\\n  \\r\\n  .thbackground{\\r\\n  margin-top: 100px;\\r\\n}\\r\\n  \\r\\n  .submit{\\r\\n  margin-top: 20px;\\r\\n}\\r\\n  \"","module.exports = \"<div class=\\\"example-container\\\">\\r\\n  \\r\\n    <div id = \\\"layoutContainer\\\" \\r\\n    fxLayout = \\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutwrap fxLayoutGap=\\\"0.15%\\\">\\r\\n    <div fxflex = \\\"100\\\" >\\r\\n        <div class=\\\"example-container\\\">\\r\\n            <mat-tab-group >\\r\\n            \\r\\n              <mat-tab label=\\\"Employee\\\">\\r\\n               <mat-progress-bar mode=\\\"indeterminate\\\" *ngIf=\\\"isLoadingResults\\\" ></mat-progress-bar>   \\r\\n                  <div class=\\\"employee-box mat-elevation-z4\\\" >\\r\\n                    \\r\\n                    <div >\\r\\n                        <button mat-mini-fab>\\r\\n                            <mat-icon aria-label=\\\"\\\" routerLink=\\\"../emplyeeview\\\">table_chart</mat-icon>\\r\\n                          </button>\\r\\n                      <form class=\\\"m-t\\\" (ngSubmit)=\\\"f.form.valid && postEmployee()\\\" #f=\\\"ngForm\\\" novalidate >                 \\r\\n                        <mat-form-field class=\\\"example-full-width\\\" >\\r\\n                            <input class=\\\"form-control\\\" name=\\\"emp_code\\\" matInput placeholder=\\\"Employee Code\\\" [(ngModel)]=\\\"emp.code\\\" #EmpCode=\\\"ngModel\\\" required >\\r\\n                            <mat-error *ngIf=\\\"f.submitted && !EmpCode.valid\\\">\\r\\n                                Employee code is <strong>required</strong>\\r\\n                              </mat-error>\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"example-full-width\\\">\\r\\n                            <input matInput placeholder=\\\"Employee Name\\\" [(ngModel)]=\\\"emp.name\\\" name=\\\"emp_name\\\" #EmpName=\\\"ngModel\\\" required>\\r\\n                            <mat-error *ngIf=\\\"f.submitted && !EmpName.valid\\\">\\r\\n                                Employee name is <strong>required</strong>\\r\\n                              </mat-error>\\r\\n                          </mat-form-field>    \\r\\n                        \\r\\n                          <mat-form-field class=\\\"example-full-width\\\">\\r\\n                              <input type=\\\"text\\\" matInput placeholder=\\\"Designation\\\" aria-label=\\\"Number\\\"  name=\\\"emp_designation\\\"  #EmpDesignation [matAutocomplete]=\\\"auto20\\\" required>\\r\\n                              <mat-autocomplete #auto20=\\\"matAutocomplete\\\" >\\r\\n                                <mat-option *ngFor=\\\"let des of Designation; let i = index\\\" [value]=\\\"des.name\\\" (click)=\\\"setDesignation(des.name)\\\">\\r\\n                                  {{des.name}}\\r\\n                                </mat-option>\\r\\n                              </mat-autocomplete>\\r\\n\\r\\n                              <mat-error *ngIf=\\\"f.submitted && !EmpDesignation.valid \\\">\\r\\n                                  Employee Designation is <strong>required</strong>\\r\\n                                </mat-error>\\r\\n\\r\\n                            </mat-form-field>\\r\\n                            \\r\\n                              <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                <input matInput placeholder=\\\"Email\\\" [(ngModel)]=\\\"emp.mail\\\" name=\\\"emp_mail\\\" #EmpMail=\\\"ngModel\\\" required>\\r\\n                                <mat-error *ngIf=\\\"f.submitted && !EmpMail.valid \\\">\\r\\n                                  Employee Mail is <strong>required</strong>\\r\\n                                </mat-error>\\r\\n                              </mat-form-field>\\r\\n\\r\\n                                <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                    <input matInput placeholder=\\\"Mobile Number\\\" [(ngModel)]=\\\"emp.mob\\\" name=\\\"emp_mobile_no\\\" #EmpMob=\\\"ngModel\\\" required minlength=\\\"10\\\" maxlength=\\\"13\\\" (keypress)=\\\"numberOnly($event)\\\">\\r\\n                                    <mat-error *ngIf=\\\"f.submitted && !EmpMob.valid \\\">\\r\\n                                      Employee Mobile is <strong>required</strong>\\r\\n                                    </mat-error>\\r\\n                                  </mat-form-field>\\r\\n            \\r\\n                                  <div class=\\\"button-row\\\">\\r\\n                                      \\r\\n                                      <button mat-raised-button color=\\\"accent\\\" type=\\\"submit\\\" >Submit</button>\\r\\n                                      \\r\\n                                      \\r\\n                                    </div>\\r\\n                            </form>\\r\\n                    </div>\\r\\n                     \\r\\n                    </div>\\r\\n              </mat-tab>\\r\\n              <mat-tab label=\\\"Client\\\"> <div class=\\\"client-box mat-elevation-z4\\\">\\r\\n                  <div >\\r\\n                      <mat-progress-bar *ngIf=\\\"isLoadingResults\\\" mode=\\\"indeterminate\\\" ></mat-progress-bar>\\r\\n                      <button mat-mini-fab>\\r\\n                          <mat-icon aria-label=\\\"\\\" routerLink=\\\"../clientview\\\">table_chart</mat-icon>\\r\\n                        </button>\\r\\n                        <form class=\\\"m-t\\\" (ngSubmit)=\\\"f2.form.valid && postClient()\\\" #f2=\\\"ngForm\\\" novalidate > \\r\\n                      <mat-form-field class=\\\"example-full-width\\\">\\r\\n                          <input matInput placeholder=\\\"Client Name\\\" [(ngModel)]=\\\"client.name\\\" name=\\\"Cli_name\\\" #CliName=\\\"ngModel\\\" required >\\r\\n                          <mat-error *ngIf=\\\"f2.submitted && !CliName.valid\\\">\\r\\n                              Client name is <strong>required</strong>\\r\\n                            </mat-error>\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"example-full-width\\\">\\r\\n                            <input matInput placeholder=\\\"Client Code\\\" [(ngModel)]=\\\"client.projectCode\\\"  name=\\\"Cli_code\\\" #Clicode=\\\"ngModel\\\" required >\\r\\n                            <mat-error *ngIf=\\\"f2.submitted && !Clicode.valid\\\">\\r\\n                                Client code is <strong>required</strong>\\r\\n                              </mat-error>\\r\\n                          </mat-form-field>\\r\\n                          \\r\\n\\r\\n                          \\r\\n                                <div class=\\\"button-row\\\">\\r\\n                                    \\r\\n                                    <button mat-raised-button color=\\\"accent\\\" type=\\\"submit\\\"  >Add</button>\\r\\n                                    \\r\\n                                    \\r\\n                                  </div>\\r\\n                                  </form>\\r\\n                  </div>\\r\\n                   \\r\\n                  </div> \\r\\n                </mat-tab>\\r\\n              <mat-tab label=\\\"Site\\\">  \\r\\n                  \\r\\n                    <div id = \\\"layoutContainer\\\" \\r\\n                    fxLayout = \\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutwrap fxLayoutGap=\\\"0.15%\\\">\\r\\n                    \\r\\n                    <div class=\\\"site-box mat-elevation-z4\\\">\\r\\n                      <div>\\r\\n                          <button mat-mini-fab>\\r\\n                              <mat-icon aria-label=\\\"\\\" routerLink=\\\"../siteview\\\">table_chart</mat-icon>\\r\\n                            </button>\\r\\n                    <div fxflex = \\\"40\\\" >\\r\\n                      \\r\\n                            <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                    <input type=\\\"text\\\" placeholder=\\\"Client Name\\\" aria-label=\\\"Number\\\" matInput  [matAutocomplete]=\\\"auto\\\">\\r\\n                                    <mat-autocomplete #auto=\\\"matAutocomplete\\\">\\r\\n                                      <mat-option *ngFor=\\\"let option of projects\\\" [value]=\\\"option.name\\\" (click)=\\\"setSiteProject(option.id)\\\">\\r\\n                                        {{option.name}}\\r\\n                                      </mat-option>\\r\\n                                    </mat-autocomplete>\\r\\n                                  </mat-form-field>\\r\\n            \\r\\n                         \\r\\n                  <mat-form-field class=\\\"example-full-width\\\">\\r\\n                          <input matInput placeholder=\\\"Site Code\\\" [(ngModel)]=\\\"site.code\\\">\\r\\n                        </mat-form-field>   \\r\\n            \\r\\n                  <mat-form-field class=\\\"example-full-width\\\">\\r\\n                          <input matInput placeholder=\\\"Site Name\\\" [(ngModel)]=\\\"site.name\\\">\\r\\n                        </mat-form-field> \\r\\n            \\r\\n                        <mat-form-field class=\\\"example-full-width\\\">\\r\\n                              <input matInput placeholder=\\\"Address\\\" [(ngModel)]=\\\"site.address\\\">\\r\\n                            </mat-form-field> \\r\\n            \\r\\n                             <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                      <input type=\\\"text\\\" placeholder=\\\"Contract Type\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto11\\\">\\r\\n                                      <mat-autocomplete #auto11=\\\"matAutocomplete\\\">\\r\\n                                        <mat-option *ngFor=\\\"let cont of Contracttype\\\" [value]=\\\"cont\\\" (click)=\\\"setContractType(cont)\\\">\\r\\n                                          {{cont}}\\r\\n                                        </mat-option>\\r\\n                                      </mat-autocomplete>\\r\\n                                    </mat-form-field>\\r\\n                                <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                      <input type=\\\"text\\\" placeholder=\\\"Regional manager\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto1\\\">\\r\\n                                      <mat-autocomplete #auto1=\\\"matAutocomplete\\\">\\r\\n                                        <mat-option *ngFor=\\\"let option of rm\\\" [value]=\\\"option.name\\\" (click)=\\\"setSiteRM(option.id)\\\">\\r\\n                                          {{option.name}}\\r\\n                                        </mat-option>\\r\\n                                      </mat-autocomplete>\\r\\n                                    </mat-form-field>\\r\\n                                    <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                          <input type=\\\"text\\\" placeholder=\\\"Senior Manager\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto2\\\">\\r\\n                                          <mat-autocomplete #auto2=\\\"matAutocomplete\\\">\\r\\n                                            <mat-option *ngFor=\\\"let option of sm\\\" [value]=\\\"option.name\\\" (click)=\\\"setSiteSM(option.id)\\\">\\r\\n                                              {{option.name}}\\r\\n                                            </mat-option>\\r\\n                                          </mat-autocomplete>\\r\\n                                        </mat-form-field>\\r\\n                                        <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                              <input type=\\\"text\\\" placeholder=\\\"Asst Senior Manager\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto3\\\">\\r\\n                                              <mat-autocomplete #auto3=\\\"matAutocomplete\\\">\\r\\n                                                <mat-option *ngFor=\\\"let option of asm\\\" [value]=\\\"option.name\\\" (click)=\\\"setSiteASM(option.id)\\\">\\r\\n                                                  {{option.name}}\\r\\n                                                </mat-option>\\r\\n                                              </mat-autocomplete>\\r\\n                                            </mat-form-field>\\r\\n                                            <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                                  <input type=\\\"text\\\" placeholder=\\\"Site Incharge\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto4\\\">\\r\\n                                                  <mat-autocomplete #auto4=\\\"matAutocomplete\\\">\\r\\n                                                    <mat-option *ngFor=\\\"let option of si\\\" [value]=\\\"option.name\\\" (click)=\\\"setSiteSI(option.id)\\\">\\r\\n                                                      {{option.name}}\\r\\n                                                    </mat-option>\\r\\n                                                  </mat-autocomplete>\\r\\n                                                </mat-form-field>\\r\\n                    </div>\\r\\n                  </div> \\r\\n                    </div>\\r\\n                    \\r\\n                    <div class=\\\"accordian\\\">\\r\\n                    <div fxflex = \\\"40\\\" >\\r\\n                            <mat-card >\\r\\n                                    <mat-card-header>\\r\\n                                     \\r\\n                                            <mat-card-title>Types of Service</mat-card-title>\\r\\n                                           \\r\\n                                    </mat-card-header>\\r\\n                                    <mat-divider ></mat-divider> \\r\\n                                    <mat-card-content style=\\\"margin-top: 20px\\\">\\r\\n                            <mat-accordion>\\r\\n                                    <mat-expansion-panel>\\r\\n                                      <mat-expansion-panel-header>\\r\\n                                        <mat-panel-title>\\r\\n                                         Manpower\\r\\n                                        </mat-panel-title>\\r\\n                                        <mat-panel-description>\\r\\n                                          Enter the Manpower  Detail\\r\\n                                        </mat-panel-description>\\r\\n                                      </mat-expansion-panel-header>\\r\\n                                      <div class=\\\"row\\\">\\r\\n                                            <mat-form-field>\\r\\n                                              <input matInput placeholder=\\\"Shift\\\"  [(ngModel)]=\\\"manpower.shift\\\" >\\r\\n                                            </mat-form-field>\\r\\n                                          </div>\\r\\n                                          <div class=\\\"row\\\">\\r\\n                                                  <mat-form-field>\\r\\n                                                    <input matInput placeholder=\\\"StartTime\\\"  [(ngModel)]=\\\"manpower.startTime\\\" >\\r\\n                                                  </mat-form-field>\\r\\n                                                </div>\\r\\n                                                <div class=\\\"row\\\">\\r\\n                                                      <mat-form-field>\\r\\n                                                        <input matInput placeholder=\\\"EndTime\\\"  [(ngModel)]=\\\"manpower.endTime\\\" >\\r\\n                                                      </mat-form-field>\\r\\n                                                    </div>\\r\\n                                                    <div class=\\\"row\\\">\\r\\n                                                          <mat-form-field>\\r\\n                                                            <input matInput placeholder=\\\"Planned\\\"   [(ngModel)]=\\\"manpower.planned\\\" >\\r\\n                                                          </mat-form-field>\\r\\n                                                        </div>\\r\\n                                                        <div class=\\\"button-row\\\">\\r\\n                                          \\r\\n                                                              <button mat-raised-button color=\\\"accent\\\" (click)=\\\"addmanFieldValue()\\\">Add</button>\\r\\n                                                              \\r\\n                                                              \\r\\n                                                            </div>                              \\r\\n                                                            <table *ngIf=\\\"manadded\\\"  style=\\\"margin-top:20px\\\">\\r\\n                                                                <thead>\\r\\n                                                                    <tr>\\r\\n                                                                        <th>Shift</th>\\r\\n                                                                        <th>Start Time</th>\\r\\n                                                                        <th>End Time</th>\\r\\n                                                                        <th>Planned</th>\\r\\n                                                                        <th>Action</th>\\r\\n                                                                    </tr>\\r\\n                                                                </thead>\\r\\n                                                                <tbody>\\r\\n                                                                    <tr *ngFor=\\\"let field of fieldArray; let i = index\\\">\\r\\n                                                                        <td>\\r\\n                                                                            <input [(ngModel)]=\\\"field.shift\\\" class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"{{field.shift}}\\\" />\\r\\n                                                                        </td>\\r\\n                                                                      \\r\\n                                                                        <td>\\r\\n                                                                            <input [(ngModel)]=\\\"field.startTime\\\" class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"{{field.startTime}}\\\" />\\r\\n                                                                        </td>\\r\\n                                                                       \\r\\n                                                                        <td>\\r\\n                                                                            <input [(ngModel)]=\\\"field.endTime\\\" class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"{{field.endTime}}\\\" />\\r\\n                                                                        </td>\\r\\n                                                                        <td>\\r\\n                                                                            <input [(ngModel)]=\\\"field.planned\\\" class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"{{field.planned}}\\\" />\\r\\n                                                                        </td>\\r\\n                                                                        <td>\\r\\n                                                                            <button mat-icon-button>\\r\\n                                                                                <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\"  matTooltip=\\\"Delete\\\" (click)=\\\"deletemanFieldValue(i)\\\">highlight_off</mat-icon>\\r\\n                                                                              </button>\\r\\n                                                                           \\r\\n                                                                           \\r\\n                                                                        </td>\\r\\n                                                                    </tr>\\r\\n                                                                   \\r\\n                                                                </tbody>\\r\\n                                                            </table>\\r\\n                                    </mat-expansion-panel>\\r\\n                                    <mat-expansion-panel (opened)=\\\"panelOpenState = true\\\"\\r\\n                                                         (closed)=\\\"panelOpenState = false\\\">\\r\\n                                      <mat-expansion-panel-header>\\r\\n                                        <mat-panel-title>\\r\\n                                          Material\\r\\n                                        </mat-panel-title>\\r\\n                                        <mat-panel-description>\\r\\n                                          Enter the Material detail\\r\\n                                        </mat-panel-description>\\r\\n                                      </mat-expansion-panel-header>\\r\\n                                      <div class=\\\"row\\\">\\r\\n                                      <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                            <input type=\\\"text\\\" placeholder=\\\"Material Type\\\" aria-label=\\\"Number\\\" matInput  [(ngModel)]=\\\"material.materialType\\\" [matAutocomplete]=\\\"auto5\\\">\\r\\n                                            <mat-autocomplete #auto5=\\\"matAutocomplete\\\" >\\r\\n                                              <mat-option *ngFor=\\\"let option of Materialtype\\\" [value]=\\\"option\\\" (click)=\\\"setMaterialType(option)\\\">\\r\\n                                                {{option}}\\r\\n                                              </mat-option>\\r\\n                                            </mat-autocomplete>\\r\\n                                          </mat-form-field>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"row\\\">\\r\\n\\r\\n                                          \\r\\n                                                <mat-form-field>\\r\\n                                                        <input matInput [matDatepicker]=\\\"picker\\\"  placeholder=\\\"Commitment Date\\\" [(ngModel)]=\\\"material.commitmentDate \\\">\\r\\n                                                        <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n                                                        <mat-datepicker #picker ></mat-datepicker>\\r\\n                                                      </mat-form-field>\\r\\n                                              </div>\\r\\n                                              <div class=\\\"button-row\\\">\\r\\n                                          \\r\\n                                                    <button mat-raised-button color=\\\"accent\\\" (click)=\\\"addmatFieldValue()\\\">Add</button>\\r\\n                                                    \\r\\n                                                    \\r\\n                                                  </div>  \\r\\n                                                  \\r\\n                                                  <table *ngIf=\\\"matadded\\\"  style=\\\"margin-top:20px\\\">\\r\\n                                                      <thead>\\r\\n                                                          <tr>\\r\\n                                                              <th>Material Type</th>\\r\\n                                                              <th>Commitment Date</th>\\r\\n                                                              <th>Action</th>\\r\\n                                                             \\r\\n                                                          </tr>\\r\\n                                                      </thead>\\r\\n                                                      <tbody>\\r\\n                                                          <tr *ngFor=\\\"let field1 of fieldArray1; let i = index\\\">\\r\\n                                                              <td>\\r\\n                                                                  <input [(ngModel)]=\\\"field1.materialType\\\"  type=\\\"text\\\" name=\\\"{{field1.materialType}}\\\" />\\r\\n                                                              </td>\\r\\n                                                            \\r\\n                                                              <td>\\r\\n                                                                  <input [(ngModel)]=\\\"field1.commitmentDate\\\"  type=\\\"text\\\" name=\\\"{{field1.commitmentDate}}\\\" />\\r\\n                                                              </td>\\r\\n                                                             \\r\\n                                                              \\r\\n                                                              <td>\\r\\n                                                                  <button mat-icon-button>\\r\\n                                                                      <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\"  matTooltip=\\\"Delete\\\" (click)=\\\"deletematFieldValue(i)\\\">highlight_off</mat-icon>\\r\\n                                                                    </button>\\r\\n                                                                 \\r\\n                                                                 \\r\\n                                                              </td>\\r\\n                                                          </tr>\\r\\n                                                         \\r\\n                                                      </tbody>\\r\\n                                                  </table>\\r\\n                                    </mat-expansion-panel>\\r\\n                                    <mat-expansion-panel (opened)=\\\"panelOpenState = true\\\"\\r\\n                                                         (closed)=\\\"panelOpenState = false\\\">\\r\\n                                      <mat-expansion-panel-header>\\r\\n                                        <mat-panel-title>\\r\\n                                         Machine\\r\\n                                        </mat-panel-title>\\r\\n                                        <mat-panel-description>\\r\\n                                          Enter the Machine detail\\r\\n                                        </mat-panel-description>\\r\\n                                      </mat-expansion-panel-header>\\r\\n                                      <div class=\\\"row\\\">\\r\\n                                                <mat-form-field>\\r\\n                                                  <input matInput placeholder=\\\"Machine Type\\\" [(ngModel)]=\\\"machine.machineType\\\">\\r\\n                                                </mat-form-field>\\r\\n                                              </div>\\r\\n                                              <div class=\\\"row\\\">\\r\\n                                                  <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                                      <input type=\\\"text\\\" placeholder=\\\"Equipment Type\\\" aria-label=\\\"Number\\\" matInput [matAutocomplete]=\\\"auto6\\\" [(ngModel)]=\\\"machine.equipmentType\\\">\\r\\n                                                      <mat-autocomplete #auto6=\\\"matAutocomplete\\\">\\r\\n                                                        <mat-option *ngFor=\\\"let option of Equipmenttype\\\" [value]=\\\"option\\\" (click)=\\\"setEquipmentType(option)\\\">\\r\\n                                                          {{option}}\\r\\n                                                        </mat-option>\\r\\n                                                      </mat-autocomplete>\\r\\n                                                    </mat-form-field>\\r\\n                                                    </div>\\r\\n                                                    <div class=\\\"row\\\">\\r\\n                                                            <mat-form-field>\\r\\n                                                              <input matInput placeholder=\\\"Model No\\\" [(ngModel)]=\\\"machine.modelNo\\\" >\\r\\n                                                            </mat-form-field>\\r\\n                                                          </div>\\r\\n                                                          <div class=\\\"row\\\">\\r\\n                                                                <mat-form-field>\\r\\n                                                                  <input matInput placeholder=\\\"Serial NO\\\" [(ngModel)]=\\\"machine.serialNo\\\">\\r\\n                                                                </mat-form-field>\\r\\n                                                              </div>\\r\\n                                                              <div class=\\\"button-row\\\">\\r\\n                                          \\r\\n                                                                    <button mat-raised-button color=\\\"accent\\\" (click)=\\\"addmacFieldValue()\\\">Add</button>\\r\\n                                                                    \\r\\n                                                                    \\r\\n                                                                  </div>    \\r\\n                                                                  \\r\\n                                                                  <table *ngIf=\\\"macadded\\\"  style=\\\"margin-top:20px\\\">\\r\\n                                                                      <thead>\\r\\n                                                                          <tr>\\r\\n                                                                              <th>Machine Type</th>\\r\\n                                                                              <th>Equipment Type</th>\\r\\n                                                                              <th>Model No</th>\\r\\n                                                                              <th>Serial No</th>\\r\\n                                                                              <th>Action</th>\\r\\n                                                                          </tr>\\r\\n                                                                      </thead>\\r\\n                                                                      <tbody>\\r\\n                                                                          <tr *ngFor=\\\"let field2 of fieldArray2; let i = index\\\">\\r\\n                                                                              <td>\\r\\n                                                                                  <input [(ngModel)]=\\\"field2.machineType\\\" class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"{{field2.machineType}}\\\" />\\r\\n                                                                              </td>\\r\\n                                                                            \\r\\n                                                                              <td>\\r\\n                                                                                  <input [(ngModel)]=\\\"field2.equipmentType\\\" class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"{{field2.equipmentType}}\\\" />\\r\\n                                                                              </td>\\r\\n                                                                             \\r\\n                                                                              <td>\\r\\n                                                                                  <input [(ngModel)]=\\\"field2.modelNo\\\" class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"{{field2.modelNo}}\\\" />\\r\\n                                                                              </td>\\r\\n                                                                              <td>\\r\\n                                                                                  <input [(ngModel)]=\\\"field2.serialNo\\\" class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"{{field2.serialNo}}\\\" />\\r\\n                                                                              </td>\\r\\n                                                                              <td>\\r\\n                                                                                  <button mat-icon-button>\\r\\n                                                                                      <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\"  matTooltip=\\\"Delete\\\" (click)=\\\"deletemacFieldValue(i)\\\">highlight_off</mat-icon>\\r\\n                                                                                    </button>\\r\\n                                                                                 \\r\\n                                                                                 \\r\\n                                                                              </td>\\r\\n                                                                          </tr>\\r\\n                                                                         \\r\\n                                                                      </tbody>\\r\\n                                                                  </table>\\r\\n                                    </mat-expansion-panel>\\r\\n                                  </mat-accordion>\\r\\n                                  </mat-card-content>\\r\\n                                </mat-card >\\r\\n                    </div>\\r\\n                    <div class=\\\"button-row\\\">\\r\\n                                          \\r\\n                        <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postSite()\\\">Submit</button>\\r\\n                        \\r\\n                        \\r\\n                      </div>    \\r\\n                    </div>\\r\\n                    \\r\\n                    </div>\\r\\n                   \\r\\n                  \\r\\n            </mat-tab>\\r\\n            <mat-tab label=\\\"Escalation\\\"> <div class=\\\"escalation-box mat-elevation-z4\\\">\\r\\n                    <div >\\r\\n                        <mat-progress-bar *ngIf=\\\"isLoadingResults\\\" mode=\\\"indeterminate\\\" ></mat-progress-bar>\\r\\n                        <button mat-mini-fab>\\r\\n                            <mat-icon aria-label=\\\"\\\" routerLink=\\\"../escalationview\\\">table_chart</mat-icon>\\r\\n                          </button>\\r\\n\\r\\n                          <form class=\\\"m-t\\\" (ngSubmit)=\\\"f3.form.valid && postEmployee()\\\" #f3=\\\"ngForm\\\" novalidate >\\r\\n                        <mat-form-field class=\\\"example-full-width\\\">\\r\\n                            <input matInput placeholder=\\\"Type of Escalation\\\" [(ngModel)]=\\\"escalationtype.escalationType\\\" name=\\\"Esc_type\\\" #Escalation=\\\"ngModel\\\" required>\\r\\n                            <mat-error *ngIf=\\\"f3.submitted && !escalationtype.valid\\\">\\r\\n                                Esclation type is <strong>required</strong>\\r\\n                              </mat-error>\\r\\n                              \\r\\n                          </mat-form-field>\\r\\n                         \\r\\n                            \\r\\n              \\r\\n                                  <div class=\\\"button-row\\\">\\r\\n                                      \\r\\n                                      <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postEscalationType()\\\">Add</button>\\r\\n                                      \\r\\n                                      \\r\\n                                    </div>\\r\\n                                    </form>\\r\\n                    </div>\\r\\n                     \\r\\n                    </div> </mat-tab>\\r\\n            </mat-tab-group>\\r\\n            </div>\\r\\n</div>\\r\\n</div>\\r\\n\\r\\n  \\r\\n</div>\\r\\n\"","import { Component, OnInit, Inject, Injectable } from '@angular/core';\r\nimport { Toolbarservice } from '../my-nav/my-nav.service';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {FormControl} from '@angular/forms';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Dateformat } from '../dateformat.service';\r\nimport {map, startWith ,switchMap,catchError} from 'rxjs/operators';\r\nimport {DataService} from '../data.service';\r\nimport { Site } from '../models/site.model';\r\nimport { ManPower } from '../models/manpower.model';\r\nimport { Material } from '../models/material.model';\r\nimport { Machine } from '../models/machine.model';\r\nimport { Observable, of } from 'rxjs';\r\nimport {ToasterModule,ToasterService,ToasterConfig} from 'angular2-toaster';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-masterdata',\r\n  templateUrl: './masterdata.component.html',\r\n  styleUrls: ['./masterdata.component.css'],\r\n \r\n  providers: [Toolbarservice]\r\n})\r\nexport class MasterdataComponent implements OnInit {\r\n  \r\n  private toasterService: ToasterService;\r\n  //model class object creation\r\n  site = new Site();\r\n  manpower = new ManPower();\r\n  material = new Material();\r\n  machine = new Machine();\r\n\r\n\r\n  //Dropdown values declaration\r\n  date;\r\n  myControl1 = new FormControl();\r\n  Equipmenttype: string[] = ['Rented', 'Amortised'];\r\n  Contracttype: string[] = ['Manpower', 'Lumsum', 'SLA' , 'One Time', 'Project Event' , 'PartTimers'];\r\n  Materialtype: string[] = ['Fixed materials', 'At Actual'];\r\n  Designation: Array<any> = [{'id':'1','name':'REGIONAL MANAGER'},{'id':'2','name':'SENIOR MANAGER'},{'id':'3','name':'SITE INCHARGE'},{'id':'4','name':'ASSISTANT SENIOR MANAGER'}];\r\n\r\n  constructor(private http: HttpClient, private activaterouter: ActivatedRoute, private router: Router, public nav: Toolbarservice, private data: DataService,\r\n    private dateFormat: Dateformat,toasterService:ToasterService){\r\n      this.toasterService=toasterService;\r\n    }\r\n    public config: ToasterConfig =new ToasterConfig({positionClass: 'toast-center'});\r\npopToast(){\r\n  \r\n  this.toasterService.pop('success','Args Title' ,'Arg Body');\r\n}\r\n\r\nnumberOnly(event): boolean {\r\n  const charCode = (event.which) ? event.which : event.keyCode;\r\n  if (charCode > 31 && (charCode < 48 || charCode > 57)) {\r\n    return false;\r\n  }\r\n  return true;\r\n\r\n}\r\n\r\n\r\n\r\n  isLoadingResults = false;\r\n  private fieldArray: Array<any> = [];\r\n  private fieldArray1: Array<any> = [];\r\n  private fieldArray2: Array<any> = [];\r\n  private newAttribute: any = {};\r\n  private newAttribute1: any = {};\r\n  private newAttribute2: any = {};\r\n  matadded = false;\r\n  manadded = false;\r\n  macadded = false;\r\n\r\n  date1: string;\r\n\r\n  setMaterialType(type){\r\n    this.material.materialType = type;\r\n    console.log(type);\r\n  }\r\n\r\n\r\n  addmanFieldValue() {\r\n    this.manadded = true;\r\n   //this.date=new Date();\r\n      this.fieldArray.push(this.manpower);\r\n      console.log(this.fieldArray);\r\n      this.manpower = new ManPower();\r\n  }\r\n\r\n  deletemanFieldValue(index) {\r\n   \r\n      this.fieldArray.splice(index, 1);\r\n      if (this.fieldArray.length < 1) {\r\n      this.manadded = false;\r\n      }\r\n  }\r\n\r\n\r\n  addmatFieldValue() {\r\n    this.matadded = true;\r\n    //console.log(this.material);\r\n    //this.material.commitmentDate = this.dateFormat.convertdate(this.material.commitmentDate);\r\n    console.log(this.material.commitmentDate);\r\n    this.fieldArray1.push(this.material);\r\n    //console.log(this.fieldArray1);\r\n    this.material = new Material();\r\n  }\r\n\r\n  deletematFieldValue(index) {\r\n   \r\n      this.fieldArray1.splice(index, 1);\r\n      if (this.fieldArray1.length < 1) {\r\n      this.matadded = false;\r\n      }\r\n  }\r\n\r\n  addmacFieldValue() {\r\n    this.macadded = true;\r\n      this.fieldArray2.push(this.machine);\r\n      console.log(this.fieldArray2);\r\n      this.machine = new Machine();\r\n  }\r\n\r\n  deletemacFieldValue(index) {\r\n   \r\n      this.fieldArray2.splice(index, 1);\r\n      if (this.fieldArray2.length < 1) {\r\n      this.macadded = false;\r\n      }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  visible = true;\r\n  \r\n//Variable declation\r\n\r\n\r\n  myControl = new FormControl();\r\n  public emp={\"designation\":\"\"};\r\n  public client={};\r\n  //public site={\"projectId\":\"\",\"contractType\":\"\",\"projectName\":\"\",\"regionalManagerId\":\"\",\"seniorManagerId\":\"\",\"asstSeniorManagerId\":\"\",\"siteInchargeId\":\"\",\r\n  //\"manPowerDTO\":[],\"machineDTO\":[],\"materialDTO\":[],};\r\n  projects: Object;\r\n  sites: Object;\r\n  employees: Object;\r\n  rm: Object;\r\n  sm: Object;\r\n  asm: Object;\r\n  si: Object;\r\n  //public manpower={};\r\n  //public material={};\r\n  //public machine={};\r\n  public escalationtype={};\r\n  \r\n\r\n\r\n  postEmployee()\r\n  {\r\n    console.log(this.emp);\r\n    this.isLoadingResults = true;\r\n    this.http.post('http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/employee', this.emp)\r\n    \r\n      .subscribe(  (data:any) => { \r\n        console.log(data['status']);\r\n        if(data['status']=='success'){\r\n          this.isLoadingResults = false;\r\n          this.toasterService.pop('success','Successfully Submitted' ,'');\r\n          this.emp={\"designation\":\"\"};\r\n        } else {\r\n          this.isLoadingResults = false;\r\n          this.toasterService.pop('warning','Not Submitted' ,'');\r\n        }\r\n     \r\n      \r\n     },\r\n     (err: HttpErrorResponse) => {\r\n         if (err.error instanceof Error) {\r\n          this.isLoadingResults = false;\r\n         \r\n             console.log('An error occurred:', err.error.message);\r\n         } else {\r\n          this.toasterService.pop('warning','Not Submitted' ,'');\r\n          this.isLoadingResults = false;\r\n          \r\n             console.log('Backend returned status code: ', err.status);\r\n             console.log('Response body:', err.error);\r\n         }\r\n      }\r\n     );\r\n  }\r\n\r\n  postClient()\r\n  {\r\n    \r\n    this.isLoadingResults = true;\r\n    \r\n    console.log(this.client);\r\n    this.http.post('http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/project', this.client)\r\n    .subscribe(  (data:any) => { \r\n      console.log(data['status']);\r\n      if(data['status']=='success'){\r\n        this.isLoadingResults = false;\r\n        this.toasterService.pop('success','Successfully Submitted' ,'');\r\n      } else {\r\n        this.isLoadingResults = false;\r\n        this.toasterService.pop('warning','Not Submitted' ,'');\r\n      }\r\n   \r\n    \r\n   },\r\n   (err: HttpErrorResponse) => {\r\n       if (err.error instanceof Error) {\r\n        this.isLoadingResults = false;\r\n       \r\n           console.log('An error occurred:', err.error.message);\r\n       } else {\r\n        this.toasterService.pop('warning','Not Submitted' ,'');\r\n        this.isLoadingResults = false;\r\n        \r\n           console.log('Backend returned status code: ', err.status);\r\n           console.log('Response body:', err.error);\r\n       }\r\n    }\r\n   );\r\n      \r\n  }\r\n\r\n  postSite()\r\n  {\r\n    this.site.manPowerDTO = this.fieldArray;\r\n    this.site.machineDTO = this.fieldArray2;\r\n    this.site.materialDTO = this.fieldArray1;\r\n   // this.createSiteJson();\r\n    console.log(\"converted date\" + this.site.machineDTO);  \r\n    console.log(this.site);\r\n    this.isLoadingResults = true;\r\n    this.http.post('http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/site', this.site)\r\n    .subscribe(  (data:any) => { \r\n      console.log(data['status']);\r\n      if(data['status']=='success'){\r\n        this.isLoadingResults = false;\r\n        this.toasterService.pop('success','Successfully Submitted' ,'');\r\n      } else {\r\n        this.isLoadingResults = false;\r\n        this.toasterService.pop('warning','Not Submitted' ,'');\r\n      }\r\n   \r\n    \r\n   },\r\n   (err: HttpErrorResponse) => {\r\n       if (err.error instanceof Error) {\r\n        this.isLoadingResults = false;\r\n       \r\n           console.log('An error occurred:', err.error.message);\r\n       } else {\r\n        this.toasterService.pop('warning','Not Submitted' ,'');\r\n        this.isLoadingResults = false;\r\n        \r\n           console.log('Backend returned status code: ', err.status);\r\n           console.log('Response body:', err.error);\r\n       }\r\n    }\r\n   );\r\n  }\r\n\r\n  postEscalationType()\r\n  {\r\n   \r\n    this.isLoadingResults = true;\r\n    \r\n    console.log(this.site);\r\n    this.http.post('http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/esctype', this.escalationtype)\r\n    .subscribe(  (data:any) => { \r\n      console.log(data['status']);\r\n      if(data['status']=='success'){\r\n        this.isLoadingResults = false;\r\n        this.toasterService.pop('success','Successfully Submitted' ,'');\r\n      } else {\r\n        this.isLoadingResults = false;\r\n        this.toasterService.pop('warning','Not Submitted' ,'');\r\n      }\r\n   \r\n    \r\n   },\r\n   (err: HttpErrorResponse) => {\r\n       if (err.error instanceof Error) {\r\n        this.isLoadingResults = false;\r\n       \r\n           console.log('An error occurred:', err.error.message);\r\n       } else {\r\n        this.toasterService.pop('warning','Not Submitted' ,'');\r\n        this.isLoadingResults = false;\r\n        \r\n           console.log('Backend returned status code: ', err.status);\r\n           console.log('Response body:', err.error);\r\n       }\r\n    }\r\n   );\r\n  \r\n   \r\n  }\r\n\r\n  listClient()\r\n  {\r\n    \r\n    this.data.getProjects().subscribe(\r\n      data => this.projects = data      \r\n    );\r\n    console.log(this.data);\r\n  }\r\n\r\n  listRM()\r\n  {\r\n    this.data.getEmployee('REGIONAL MANAGER').subscribe(\r\n      data => this.rm = data\r\n    );\r\n    console.log(this.data);\r\n  }\r\n\r\n  listSM()\r\n  {\r\n    this.data.getEmployee('SENIOR MANAGER').subscribe(\r\n      data => this.sm = data\r\n    );\r\n    console.log(this.data);\r\n  }\r\n\r\n  listASM()\r\n  {\r\n    this.data.getEmployee('ASSISTANT SENIOR MANAGER').subscribe(\r\n      data => this.asm = data\r\n    );\r\n    console.log(this.data);\r\n  }\r\n\r\n  listSI()\r\n  {\r\n    this.data.getEmployee('SITE INCHARGE').subscribe(\r\n      //data => this.employees = data['content']\r\n      data => this.si = data\r\n    );\r\n    console.log(this.data);\r\n  }\r\n\r\n  //createSiteJson()\r\n  //{\r\n  //  this.site.manPowerDTO.push(this.manpower);\r\n  //  this.site.machineDTO.push(this.machine);\r\n  //  this.site.materialDTO.push(this.material);\r\n  //}\r\n\r\n  setEquipmentType(type)\r\n  {\r\n    this.machine.equipmentType = type;\r\n    console.log(this.machine.equipmentType);\r\n  }\r\n  setContractType(id)\r\n  {\r\n    console.log(id);\r\n    this.site.contractType = id;\r\n  }\r\n\r\n  setDesignation(id)\r\n  {\r\n    console.log(id);\r\n    this.emp.designation = id;\r\n  }\r\n\r\n  setSiteProject(id)\r\n  {\r\n    console.log(id);\r\n    this.site.projectId = id;\r\n  }\r\n\r\n  setSiteRM(id)\r\n  {\r\n    console.log(id);\r\n    this.site.regionalManagerId = id;\r\n  }\r\n\r\n  setSiteSM(id)\r\n  {\r\n    console.log(id);\r\n    this.site.seniorManagerId = id;\r\n  }\r\n\r\n  setSiteASM(id)\r\n  {\r\n    console.log(id);\r\n    this.site.asstSeniorManagerId = id;\r\n  }\r\n\r\n  setSiteSI(id)\r\n  {\r\n    console.log(id);\r\n    this.site.siteInchargeId = id;\r\n    console.log(this.site);\r\n  }\r\n\r\n \r\n  ngOnInit() {\r\n    this.listClient();\r\n    this.listRM();\r\n    this.listSM();\r\n    this.listASM();\r\n    this.listSI();\r\n   // this.popToast();\r\n   /* this.filteredOptions = this.myControl.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n        map(value => this._filter(value))\r\n      );*/\r\n  }\r\n\r\n  /*private _filter(value: string): string[] {\r\n    const filterValue = value.toLowerCase();\r\n\r\n    return this.options.filter(option => option.toLowerCase().includes(filterValue));\r\n  }*/\r\n\r\ncloseprogess(){\r\n  this.isLoadingResults = false;\r\n}\r\n\r\n}\r\n","module.exports = \"table {\\r\\n    width: 100%;\\r\\n   \\r\\n  }\\r\\n  .left_margin{\\r\\n      margin-left: 15px;\\r\\n  }\\r\\n  .left_margin-filter{\\r\\n    margin-left: 20px;\\r\\n}\"","module.exports = \"<div class=\\\"example-container\\\">\\r\\n  <div id = \\\"layoutContainer\\\" \\r\\n  fxLayout = \\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutwrap fxLayoutGap=\\\"0.15%\\\">\\r\\n  <div fxflex = \\\"100\\\" >\\r\\n      <div class=\\\"example-container\\\">\\r\\n          <mat-tab-group >\\r\\n            <mat-tab label=\\\"Employee\\\">\\r\\n              <div class=\\\"example-container mat-elevation-z8\\\">\\r\\n                <div class=\\\"example-loading-shade\\\"\\r\\n                     *ngIf=\\\"isLoadingResults || isRateLimitReached\\\">\\r\\n                  <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\r\\n                  <div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\r\\n                    GitHub's API rate limit has been reached. It will be reset in one minute.\\r\\n                  </div>\\r\\n                </div>\\r\\n              \\r\\n                <div class=\\\"example-table-container\\\">\\r\\n              \\r\\n                  <table mat-table [dataSource]=\\\"data\\\" class=\\\"example-table\\\"\\r\\n                        >\\r\\n                    <!-- Number Column -->\\r\\n                    <ng-container matColumnDef=\\\"code\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>#</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.code}}</td>\\r\\n                    </ng-container>\\r\\n              \\r\\n                    <!-- Title Column -->\\r\\n                    <ng-container matColumnDef=\\\"name\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>Title</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.name}}</td>\\r\\n                    </ng-container>\\r\\n              \\r\\n                    <!-- State Column -->\\r\\n                    <ng-container matColumnDef=\\\"designation\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.designation}}</td>\\r\\n                    </ng-container>\\r\\n                    <ng-container matColumnDef=\\\"mail\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.mail}}</td>\\r\\n                    </ng-container>\\r\\n                    <ng-container matColumnDef=\\\"phone\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.phone}}</td>\\r\\n                    </ng-container>\\r\\n                   \\r\\n              \\r\\n                    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n                    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                  </table>\\r\\n                </div>\\r\\n              \\r\\n                <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"10\\\"></mat-paginator>\\r\\n              </div>\\r\\n            </mat-tab>\\r\\n            <mat-tab label=\\\"Client\\\">\\r\\n              <div class=\\\"example-container mat-elevation-z8\\\">\\r\\n                <div class=\\\"example-loading-shade\\\"\\r\\n                     *ngIf=\\\"isLoadingResults || isRateLimitReached\\\">\\r\\n                  <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\r\\n                  <div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\r\\n                    GitHub's API rate limit has been reached. It will be reset in one minute.\\r\\n                  </div>\\r\\n                </div>\\r\\n              \\r\\n                <div class=\\\"example-table-container\\\">\\r\\n              \\r\\n                  <table mat-table [dataSource]=\\\"data\\\" class=\\\"example-table\\\"\\r\\n                        >\\r\\n                    <!-- Number Column -->\\r\\n                    <ng-container matColumnDef=\\\"code\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>#</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.code}}</td>\\r\\n                    </ng-container>\\r\\n              \\r\\n                    <!-- Title Column -->\\r\\n                    <ng-container matColumnDef=\\\"name\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>Title</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.name}}</td>\\r\\n                    </ng-container>\\r\\n              \\r\\n                    <!-- State Column -->\\r\\n                    <ng-container matColumnDef=\\\"designation\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.designation}}</td>\\r\\n                    </ng-container>\\r\\n                    <ng-container matColumnDef=\\\"mail\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.mail}}</td>\\r\\n                    </ng-container>\\r\\n                    <ng-container matColumnDef=\\\"phone\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.phone}}</td>\\r\\n                    </ng-container>\\r\\n                   \\r\\n              \\r\\n                    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n                    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                  </table>\\r\\n                </div>\\r\\n              \\r\\n                <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"10\\\"></mat-paginator>\\r\\n              </div>\\r\\n            </mat-tab>\\r\\n            <mat-tab label=\\\"Site\\\">  \\r\\n              <div class=\\\"example-container mat-elevation-z8\\\">\\r\\n                <div class=\\\"example-loading-shade\\\"\\r\\n                     *ngIf=\\\"isLoadingResults || isRateLimitReached\\\">\\r\\n                  <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\r\\n                  <div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\r\\n                    GitHub's API rate limit has been reached. It will be reset in one minute.\\r\\n                  </div>\\r\\n                </div>\\r\\n              \\r\\n                <div class=\\\"example-table-container\\\">\\r\\n              \\r\\n                  <table mat-table [dataSource]=\\\"data\\\" class=\\\"example-table\\\"\\r\\n                        >\\r\\n                    <!-- Number Column -->\\r\\n                    <ng-container matColumnDef=\\\"code\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>#</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.code}}</td>\\r\\n                    </ng-container>\\r\\n              \\r\\n                    <!-- Title Column -->\\r\\n                    <ng-container matColumnDef=\\\"name\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>Title</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.name}}</td>\\r\\n                    </ng-container>\\r\\n              \\r\\n                    <!-- State Column -->\\r\\n                    <ng-container matColumnDef=\\\"designation\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.designation}}</td>\\r\\n                    </ng-container>\\r\\n                    <ng-container matColumnDef=\\\"mail\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.mail}}</td>\\r\\n                    </ng-container>\\r\\n                    <ng-container matColumnDef=\\\"phone\\\">\\r\\n                      <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                      <td mat-cell *matCellDef=\\\"let row\\\">{{row.phone}}</td>\\r\\n                    </ng-container>\\r\\n                   \\r\\n              \\r\\n                    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n                    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                  </table>\\r\\n                </div>\\r\\n              \\r\\n                <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"10\\\"></mat-paginator>\\r\\n              </div>\\r\\n                 \\r\\n                \\r\\n          </mat-tab>\\r\\n          <mat-tab label=\\\"Escalation\\\"> \\r\\n              <div class=\\\"example-container mat-elevation-z8\\\">\\r\\n                  <div class=\\\"example-loading-shade\\\"\\r\\n                       *ngIf=\\\"isLoadingResults || isRateLimitReached\\\">\\r\\n                    <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\r\\n                    <div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\r\\n                      GitHub's API rate limit has been reached. It will be reset in one minute.\\r\\n                    </div>\\r\\n                  </div>\\r\\n                \\r\\n                  <div class=\\\"example-table-container\\\">\\r\\n                \\r\\n                    <table mat-table [dataSource]=\\\"data\\\" class=\\\"example-table\\\"\\r\\n                          >\\r\\n                      <!-- Number Column -->\\r\\n                      <ng-container matColumnDef=\\\"code\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef>#</th>\\r\\n                        <td mat-cell *matCellDef=\\\"let row\\\">{{row.code}}</td>\\r\\n                      </ng-container>\\r\\n                \\r\\n                      <!-- Title Column -->\\r\\n                      <ng-container matColumnDef=\\\"name\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef>Title</th>\\r\\n                        <td mat-cell *matCellDef=\\\"let row\\\">{{row.name}}</td>\\r\\n                      </ng-container>\\r\\n                \\r\\n                      <!-- State Column -->\\r\\n                      <ng-container matColumnDef=\\\"designation\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                        <td mat-cell *matCellDef=\\\"let row\\\">{{row.designation}}</td>\\r\\n                      </ng-container>\\r\\n                      <ng-container matColumnDef=\\\"mail\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                        <td mat-cell *matCellDef=\\\"let row\\\">{{row.mail}}</td>\\r\\n                      </ng-container>\\r\\n                      <ng-container matColumnDef=\\\"phone\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n                        <td mat-cell *matCellDef=\\\"let row\\\">{{row.phone}}</td>\\r\\n                      </ng-container>\\r\\n                     \\r\\n                \\r\\n                      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n                      <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                    </table>\\r\\n                  </div>\\r\\n                \\r\\n                  <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"10\\\"></mat-paginator>\\r\\n                </div>  \\r\\n          </mat-tab>\\r\\n          </mat-tab-group>\\r\\n          </div>\\r\\n</div>\\r\\n</div>\\r\\n</div>\"","import { Component, OnInit , ViewChild} from '@angular/core';\r\nimport {MatPaginator, MatSort, MatTableDataSource} from '@angular/material';\r\nimport {DataService} from '../data.service';\r\nimport {merge, Observable, of as observableOf} from 'rxjs';\r\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\r\nimport { DataSource } from '@angular/cdk/table';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {Dateformat} from '../dateformat.service';\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-masterview',\r\n  templateUrl: './masterview.component.html',\r\n  styleUrls: ['./masterview.component.css']\r\n})\r\nexport class MasterviewComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = [  'code', 'name', 'designation', 'mail' , 'phone'];\r\n  udsDatabase: UdsHttpDao | null;\r\n  data: Employeedata[] = [];\r\n\r\n  resultsLength = 0;\r\n  isLoadingResults = true;\r\n  isRateLimitReached = false;\r\n\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  constructor(private http: HttpClient,private dateformat: Dateformat) {}\r\n\r\n  ngOnInit() {\r\nconsole.log(this.dateformat.convertdate('Wed Aug 29 2018 00:00:00 GMT+0530 (India Standard Time)'));\r\n\r\n    this.udsDatabase = new UdsHttpDao(this.http);\r\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\r\n\r\n\r\n    merge(this.sort.sortChange, this.paginator.page)\r\n    .pipe(\r\n      startWith({}),\r\n      switchMap(() => {\r\n        this.isLoadingResults = true;\r\n        // tslint:disable-next-line:no-non-null-assertion\r\n        return this.udsDatabase!.getRepoIssues(\r\n          this.sort.active, this.sort.direction, this.paginator.pageIndex);\r\n      }),\r\n      map(data => {\r\n        // Flip flag to show that loading has finished.\r\n        this.isLoadingResults = false;\r\n        this.isRateLimitReached = false;\r\n        this.resultsLength = data.total_count;\r\n\r\n        return data.items;\r\n      }),\r\n      catchError(() => {\r\n        this.isLoadingResults = false;\r\n        // Catch if the GitHub API has reached its rate limit. Return empty data.\r\n        this.isRateLimitReached = true;\r\n        return observableOf([]);\r\n      })\r\n    ).subscribe(data => this.data = data);\r\n}\r\n\r\n    /* this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort; */\r\n    /* this.data.getEmployee().subscribe(\r\n      data => this.users$ = data\r\n    // tslint:disable-next-line:semicolon\r\n    ) */\r\n  }\r\n\r\n  export interface UdsApi {\r\n    items: Employeedata[];\r\n    total_count: number;\r\n\r\n  }\r\n\r\n  export interface Employeedata {\r\n\r\n    code: number;\r\n    designation: string;\r\n    mail: string;\r\n    mob: number;\r\n    name: string;\r\n  }\r\n\r\n  export class UdsHttpDao {\r\n    constructor(private http: HttpClient) {}\r\n\r\n    getRepoIssues(sort: string, order: string, page: number): Observable<UdsApi> {\r\n      const href = 'http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com/uds/employee/search';\r\n      const requestUrl =\r\n      `${href}&sort=${sort}&order=${order}&page=${page + 1}`;\r\n\r\n\r\n      return this.http.get<UdsApi>(requestUrl);\r\n    }\r\n  }\r\n","export class Employ {\r\n    id: number;\r\n    code: number;\r\n    designation: string;\r\n    name: string;\r\n    mail: string;\r\n    mob: number;\r\n}\r\n","export class Escalation {\r\n    typeOfEscalation: string;\r\n    description: string;\r\n   \r\n    communicatedVia: string;\r\n    communicatedDate: string;\r\n    closureDate: string;\r\n    estimatedClosureDate: string;\r\n}\r\n","export class Machine {\r\n    id: number;\r\n    typeOfService: string;\r\n    machineType: string;\r\n    equipmentType: string;\r\n    modelNo: string;\r\n    serialNo: string;\r\n\r\n}","export class MachineTransaction {\r\n    id: number;\r\n    machineType: string;\r\n    equipmentType: string;\r\n    modelNo: string;\r\n    serialNo: string;\r\n    status: string;\r\n    complaintRaisedDate: string;\r\n    ResolutionDate: string;\r\n}","export class ManPower {\r\n    id: number;\r\n    typeOfService: string;\r\n    planned: number;\r\n    startTime: string;\r\n    endTime: string;\r\n\r\n}","export class ManPowerTransaction {\r\n    id: number;\r\n    planned: number;\r\n    actual: number; \r\n    shortfall: number;\r\n    continuedWithOt: number;\r\n    continuedWithOutOt: number;\r\n    newComer: number;\r\n    shiftTime: string;\r\n    projectId: number;\r\n    siteId: number;\r\n}","export class Material {\r\n    id: number;\r\n    typeOfService: string;\r\n    materialType: string;\r\n    commitmentDate: string;\r\n}","export class MaterialTransaction {\r\n    id: number;\r\n    materialType: string;\r\n    commitmentDate: string;\r\n    indentSubmissionDate: string;\r\n    materialSupplyDate: string;\r\n    uniformSupplyDate: string;\r\n   \r\n    status: string;\r\n    remarks: string;\r\n    projectId: number;\r\n    siteId: number;\r\n}\r\n","export class Project {\r\n    id: number;\r\n    code: number;\r\n    name: string; \r\n}","import { ManPower } from \"./manpower.model\";\r\nimport { Material } from \"./material.model\";\r\nimport { Machine } from \"./machine.model\";\r\n\r\nexport class Site {\r\n    id: number;\r\n    projectId: number;\r\n    projectName: string;\r\n    code: number;\r\n    name: string;\r\n    address: string;\r\n    contractType: string;\r\n    regionalManagerId: number;\r\n    seniorManagerId: number;\r\n    asstSeniorManagerId: number;\r\n    siteInchargeId: number;\r\n    manPowerDTO: Array<ManPower>;\r\n    materialDTO: Array<Material>;\r\n    machineDTO: Array<Machine>;\r\n\r\n}","export class Sitemachinedialog {\r\n    id: number;\r\n    typeOfService: string;\r\n    machineType: string;\r\n    equipmentType: string;\r\n    modelNo: number;\r\n    serialNo: string;\r\n\r\n}","export class Sitemanpowerdialog{\r\n    id: number;\r\n    typeOfService: string;\r\n    planned: number;\r\n    startTime: string;\r\n    endTime: string;\r\n}","export class Sitematerialdialog{\r\n    id: number;\r\n    typeOfService: string;\r\n    materialType: string;\r\n    commitmentDate: string;\r\n    \r\n}","module.exports = \".sidenav-container {\\r\\n  height: 100%;\\r\\n}\\r\\n\\r\\n.sidenav {\\r\\n  width: 200px;\\r\\n  box-shadow: 3px 0 6px rgba(0,0,0,.24);\\r\\n}\\r\\n\\r\\n.mat-toolbar.mat-primary {\\r\\n  \\r\\n  position: -webkit-sticky;\\r\\n  \\r\\n  position: sticky;\\r\\n  top: 0;\\r\\n  z-index: 2;\\r\\n}\\r\\n\\r\\n.material-icons.color_white { color: #d1dddb; }\\r\\n\"","module.exports = \"\\r\\n<mat-sidenav-container class=\\\"sidenav-container\\\"  >\\r\\n\\r\\n  <mat-sidenav *ngIf=\\\"router.url != '/'\\\" style=\\\"background: #283b42\\\"\\r\\n    #drawer\\r\\n    class=\\\"sidenav\\\"\\r\\n    fixedInViewport=\\\"true\\\"\\r\\n    [attr.role]=\\\"(isHandset$ | async) ? 'dialog' : 'navigation'\\\"\\r\\n    [mode]=\\\"(isHandset$ | async) ? 'over' : 'side'\\\"\\r\\n    [opened]=\\\"!(isHandset$ | async)\\\" >\\r\\n    <mat-toolbar color=\\\"primary\\\"><img class=\\\"logo\\\" src=\\\"assets/uds1.jpg\\\"></mat-toolbar>\\r\\n    <!-- <mat-nav-list >\\r\\n      <a mat-list-item ><i class=\\\"material-icons color_white\\\">description</i><span style=\\\"color: #fff;\\\">Master Data\\r\\n      <button mat-button mat-icon-button (click)=\\\"showSubmenu = !showSubmenu\\\">\\r\\n          <mat-icon class=\\\"menu-button\\\" [ngClass]=\\\"{'rotated' : showSubmenu}\\\">expand_more</mat-icon>\\r\\n        </button></span></a>\\r\\n        <div class=\\\"submenu\\\" [ngClass]=\\\"{'expanded' : showSubmenu}\\\">\\r\\n            <mat-list-item routerLink=\\\"masterview\\\"><span style=\\\"color: #fff;\\\">View</span></mat-list-item>\\r\\n            <mat-list-item routerLink=\\\"masterdata\\\"><span style=\\\"color: #fff;\\\">Add</span></mat-list-item>\\r\\n           \\r\\n          </div>\\r\\n    </mat-nav-list> -->\\r\\n      <mat-nav-list >\\r\\n          <a mat-list-item routerLink=\\\"masterdata\\\"><i class=\\\"material-icons color_white\\\">description</i><span style=\\\"color: #fff;\\\">Masterdata</span></a>\\r\\n      <a mat-list-item routerLink=\\\"opstracker\\\"><i class=\\\"material-icons color_white\\\">library_books</i><span style=\\\"color: #fff;\\\">OpsTracker</span></a>\\r\\n      <a mat-list-item routerLink=\\\"escalation\\\"><i class=\\\"material-icons color_white\\\">queue</i><span style=\\\"color: #fff;\\\">Escalation</span></a>\\r\\n      <a mat-list-item routerLink=\\\"report\\\"><i class=\\\"material-icons color_white\\\">report</i><span style=\\\"color: #fff;\\\">Report</span></a>\\r\\n    </mat-nav-list>\\r\\n   \\r\\n  </mat-sidenav>\\r\\n  <mat-sidenav-content>\\r\\n    <mat-toolbar *ngIf=\\\"router.url != '/'\\\" color=\\\"primary\\\" >\\r\\n      <button\\r\\n        type=\\\"button\\\"\\r\\n        aria-label=\\\"Toggle sidenav\\\"\\r\\n        mat-icon-button\\r\\n        (click)=\\\"drawer.toggle()\\\"\\r\\n        *ngIf=\\\"isHandset$ | async\\\">\\r\\n        <mat-icon aria-label=\\\"Side nav toggle icon\\\">Menu</mat-icon>\\r\\n      </button>\\r\\n      <span>Updater Service Opstracker</span>\\r\\n    </mat-toolbar>\\r\\n    \\r\\n    \\r\\n    <!-- Add Content Here -->\\r\\n    <router-outlet></router-outlet>\\r\\n    <toaster-container [toasterconfig]=\\\"config\\\"></toaster-container>\\r\\n  </mat-sidenav-content>\\r\\n</mat-sidenav-container>\\r\\n\\r\\n\"","import { Component , HostBinding, OnInit } from '@angular/core';\r\nimport { Toolbarservice } from './my-nav.service';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\n\r\nimport { BreakpointObserver, Breakpoints, BreakpointState } from '@angular/cdk/layout';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Component({\r\n\r\n  selector: 'app-my-nav',\r\n  templateUrl: './my-nav.component.html',\r\n  styleUrls: ['./my-nav.component.css'],\r\n  providers: [Toolbarservice]\r\n})\r\nexport class MyNavComponent implements OnInit {\r\n  @HostBinding('class.is-open')\r\n  showSubmenu = false;\r\n  isOpen = false;\r\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n    .pipe(\r\n      map(result => result.matches)\r\n    );\r\n\r\n  constructor(private breakpointObserver: BreakpointObserver, public nav: Toolbarservice,  private router: Router ) {\r\nconsole.log(this.router.url);\r\n  }\r\n  ngOnInit() {\r\n\r\n  }\r\n  }\r\n","import { Injectable, Output, EventEmitter } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class Toolbarservice {\r\n    isOpen = false;\r\n    @Output() change: EventEmitter<boolean> = new EventEmitter();\r\n}\r\n\r\n","module.exports = \".algnleft{\\r\\n    margin:20px \\r\\n}\\r\\n.div-left{\\r\\n    float:right;\\r\\n    padding-right:20px;\\r\\n}\\r\\n.mat-cell:nth-child(2), .mat-header-cell:nth-child(2) {\\r\\n    flex: 0 0 200px;\\r\\n}\\r\\n.martop{\\r\\n    margin-top: 14px;\\r\\n}\\r\\n.spinnerabove {\\r\\n    position:absolute;\\r\\n    top:50%;\\r\\n    left:50%;\\r\\n   \\r\\n    z-index: 10;\\r\\n  }\\r\\n  \"","module.exports = \"<div class=\\\"algnleft\\\">\\r\\n  <div class=\\\"div-left\\\"><button mat-mini-fab>\\r\\n      <mat-icon aria-label=\\\"\\\" routerLink=\\\"../masterdata\\\">arrow_back</mat-icon>\\r\\n    </button></div>\\r\\n  \\r\\n     <div class=\\\"example-loading-shade spinnerabove \\\"\\r\\n           *ngIf=\\\"isLoadingResults || isRateLimitReached\\\" >\\r\\n        <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\r\\n        <div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\r\\n          \\r\\n        </div>\\r\\n      </div> \\r\\n  \\r\\n      \\r\\n    \\r\\n        <table mat-table [dataSource]=\\\"manpower\\\" class=\\\"mat-elevation-z8\\\"\\r\\n               matSort matSortActive=\\\"id\\\" matSortDisableClear matSortDirection=\\\"asc\\\" style=\\\"width:100%\\\">\\r\\n          <!-- Number Column -->\\r\\n          \\r\\n          <!-- Title Column -->\\r\\n          <ng-container  matColumnDef=\\\"id\\\">\\r\\n              <th mat-header-cell  *matHeaderCellDef>Id</th>\\r\\n              <td mat-cell *matCellDef=\\\"let row\\\">{{row.id}}</td>\\r\\n            </ng-container>\\r\\n      \\r\\n  \\r\\n          <ng-container  matColumnDef=\\\"machineType\\\">\\r\\n            <th mat-header-cell  *matHeaderCellDef>Machine Type</th>\\r\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{row.machineType}}</td>\\r\\n          </ng-container>\\r\\n    \\r\\n          <!-- State Column -->\\r\\n          <ng-container matColumnDef=\\\"equipmentType\\\">\\r\\n            <th mat-header-cell *matHeaderCellDef>Equipment Type</th>\\r\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{row.equipmentType}}</td>\\r\\n          </ng-container>\\r\\n    \\r\\n          <!-- Created Column -->\\r\\n          <ng-container matColumnDef=\\\"status\\\">\\r\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n              Status\\r\\n            </th>\\r\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{row.status}}</td>\\r\\n          </ng-container>\\r\\n  \\r\\n          <ng-container matColumnDef=\\\"complaintRaisedDate\\\">\\r\\n              <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                Complaint Raised date\\r\\n              </th>\\r\\n              <td mat-cell *matCellDef=\\\"let row\\\">{{row.complaintRaisedDate}}</td>\\r\\n            </ng-container>\\r\\n  \\r\\n            <ng-container matColumnDef=\\\"ResolutionDate\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                  Resolution Date\\r\\n                </th>\\r\\n                <td mat-cell *matCellDef=\\\"let row\\\">{{row.ResolutionDate}}</td>\\r\\n              </ng-container>\\r\\n             \\r\\n              \\r\\n  \\r\\n             <mat-divider></mat-divider> \\r\\n          <ng-container matColumnDef=\\\"actionsColumn\\\">\\r\\n              <th mat-header-cell *matHeaderCellDef>Action</th>\\r\\n              \\r\\n              <mat-cell *matCellDef=\\\"let row\\\">\\r\\n                  <button mat-icon-button>\\r\\n                      <mat-icon matTooltip=\\\"Update\\\" aria-label=\\\"Example icon-button with a heart icon\\\" (click)=\\\"openDialog(row.id)\\\" >update</mat-icon>\\r\\n                    </button>\\r\\n                    <button mat-icon-button>\\r\\n                        <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\"  matTooltip=\\\"Delete\\\" (click)=\\\"openDialog(row.id)\\\">delete</mat-icon>\\r\\n                      </button>\\r\\n                 \\r\\n              </mat-cell>\\r\\n          </ng-container>\\r\\n          <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n          <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n           \\r\\n        </table>\\r\\n     <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"8\\\"></mat-paginator>\\r\\n    \\r\\n      <!--   <app-pagination [maxPages]=\\\"maxPages\\\"\\r\\n        [current]=\\\"1\\\"\\r\\n        [postsPerPage]=\\\"postsPerPage\\\"\\r\\n        [itemsPerPage]=\\\"itemsPerPage\\\"\\r\\n        (changePage)=\\\"pageChanged($event)\\\"></app-pagination> -->\\r\\n    \\r\\n  </div>\"","import {Component, OnInit, ViewChild , Input} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {  MatDialog,  MatDialogRef , MatDialogConfig , MAT_DIALOG_DATA} from '@angular/material';\r\nimport {MatTableDataSource} from '@angular/material';\r\nimport {MatPaginator, MatSort} from '@angular/material';\r\nimport {merge, Observable, of as observableOf} from 'rxjs';\r\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\r\nimport {DataService} from '../data.service';\r\nimport { Employ } from '../models/employ.model';\r\nimport { MatDialogModule } from '@angular/material';\r\nimport {EmploydialogComponent} from '../employdialog/employdialog.component';\r\n\r\n\r\n@Component({\r\n  selector: 'app-opsmachinetransaction',\r\n  templateUrl: './opsmachinetransaction.component.html',\r\n  styleUrls: ['./opsmachinetransaction.component.css']\r\n})\r\nexport class OpsmachinetransactionComponent implements OnInit {\r\n  @Input() public emp1: Employ;\r\n  dialogResult=\"\";\r\n  itemsPerPage: number = 10;\r\n  postsPerPage: number[] = [5, 10, 25];\r\nid;\r\n  emp:Employ[] = [];\r\n    machine: Opsmachinetransaction[] = [];\r\n  empid=new Employ();\r\n   exampleDatabase: ExampleHttpDao | null;\r\n\r\n  displayedColumns: string[] = ['id','machineType', 'equipmentType',  'status' , 'complaintRaisedDate', 'ResolutionDate','actionsColumn' ];\r\n  /* //displayedColumns: string[] = [  'code', 'name', 'designation', 'mail' , 'phone']; */\r\n\r\n\r\n\r\n  resultsLength = 0;\r\n  isLoadingResults = true;\r\n  isRateLimitReached = false;\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  \r\n  page: (Observable<number>|any);\r\n  constructor(private http: HttpClient, private data1: DataService, private dialog: MatDialog) {\r\n\r\n   }\r\n   \r\n  /*  listEmployees()\r\n   {\r\n     this.data.getemployee(0, 2).subscribe(\r\n       data => this.emp = data['content']\r\n      \r\n      \r\n     );\r\n     console.log(this.data);\r\n    \r\n   } */\r\n   /* pageChanged(event) {\r\n    this.page = event.page;\r\n    \r\n    this.itemsPerPage = event.itemsPerPage;\r\n    this.loadEmployeeByPage(this.page, this.itemsPerPage);\r\n} */\r\n/* loadEmployeeByPage(page: number, rows: number) {\r\n \r\n  this.data.getemployee(page, rows).subscribe(\r\n    data => this.emp = data['content']\r\n  \r\n    );\r\n\r\n} */\r\n\r\n   // tslint:disable-next-line:member-ordering\r\n\r\n\r\n    /* openDialog() {\r\n    const dialogRef = this.dialog.open(DialogBodyComponent, {\r\n      height: '400px',\r\n  width: '600px'\r\n      \r\n    });\r\n  }  */\r\n\r\n  ngOnInit() {\r\n     this.exampleDatabase = new ExampleHttpDao(this.http);\r\n\r\n    // If the user changes the sort order, reset back to the first page.\r\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\r\n\r\n    merge(this.paginator.page)\r\n      .pipe(\r\n        startWith({}),\r\n        switchMap(() => {\r\n           console.log('enter1');\r\n          this.isLoadingResults = true;\r\n          return this.exampleDatabase!.getRepoIssues(this.paginator.pageIndex,\r\n           8);\r\n\r\n        }),\r\n        map(data => {\r\n          console.log('ggg');\r\n          // Flip flag to show that loading has finished.\r\n          this.isLoadingResults = false;\r\n          this.isRateLimitReached = false;\r\n          this.resultsLength = data['totalElements'];\r\n console.log(data['totalElements']);\r\n          return data;\r\n        }),\r\n        catchError(() => {\r\n          console.log('errr');\r\n          this.isLoadingResults = false;\r\n          // Catch if the GitHub API has reached its rate limit. Return empty data.\r\n          this.isRateLimitReached = true;\r\n          return observableOf([]);\r\n        })\r\n      ).subscribe(data => this.machine = data['content']);\r\n   // this.listEmployees();\r\n  }\r\n openDialog(id:number) {\r\n  \r\n  const item1 = this.machine.find(i => i.id === id);\r\n \r\n    const dialogRef = this.dialog.open(EmploydialogComponent, {\r\n      width: '300px',\r\n      data:item1\r\n      \r\n          });\r\n          dialogRef.afterClosed().subscribe(result => {\r\n            console.log('dialog closed:${result}');\r\n            this.dialogResult = result;\r\n          });\r\n  \r\n  }\r\n}\r\n\r\nexport interface Opsmachinetransaction {\r\n  id: number;\r\n  machineType: string;\r\n  equipmentType: string;\r\n  \r\n  status: string;\r\n  complaintRaisedDate: string;\r\n  ResolutionDate: string;\r\n }\r\n \r\n /** An example database that the data source uses to retrieve data for the table. */\r\n export class ExampleHttpDao { \r\n  \r\n \r\n   constructor(private http: HttpClient) {}\r\n  \r\n   getRepoIssues(page: number,records:number): Observable<Opsmachinetransaction[]> {\r\n     const href = 'http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/opstracker/search/manpowertransaction/'+ page + '/' + records;\r\n    \r\n \r\n     return this.http.get<Opsmachinetransaction[]>(href);\r\n   }\r\n }","module.exports = \".algnleft{\\r\\n    margin:20px \\r\\n}\\r\\n.div-left{\\r\\n    float:right;\\r\\n    padding-right:20px;\\r\\n}\\r\\n.mat-cell:nth-child(2), .mat-header-cell:nth-child(2) {\\r\\n    flex: 0 0 200px;\\r\\n}\\r\\n.martop{\\r\\n    margin-top: 14px;\\r\\n}\\r\\n.spinnerabove {\\r\\n    position:absolute;\\r\\n    top:50%;\\r\\n    left:50%;\\r\\n   \\r\\n    z-index: 10;\\r\\n  }\\r\\n  \"","module.exports = \"<div class=\\\"algnleft\\\">\\r\\n  <div class=\\\"div-left\\\"><button mat-mini-fab>\\r\\n      <mat-icon aria-label=\\\"\\\" routerLink=\\\"../masterdata\\\">arrow_back</mat-icon>\\r\\n    </button></div>\\r\\n  \\r\\n     <div class=\\\"example-loading-shade spinnerabove \\\"\\r\\n           *ngIf=\\\"isLoadingResults || isRateLimitReached\\\" >\\r\\n        <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\r\\n        <div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\r\\n          \\r\\n        </div>\\r\\n      </div> \\r\\n  \\r\\n      \\r\\n    \\r\\n        <table mat-table [dataSource]=\\\"manpower\\\" class=\\\"mat-elevation-z8\\\"\\r\\n               matSort matSortActive=\\\"id\\\" matSortDisableClear matSortDirection=\\\"asc\\\" style=\\\"width:100%\\\">\\r\\n          <!-- Number Column -->\\r\\n          \\r\\n          <!-- Title Column -->\\r\\n          <ng-container  matColumnDef=\\\"id\\\">\\r\\n              <th mat-header-cell  *matHeaderCellDef>Id</th>\\r\\n              <td mat-cell *matCellDef=\\\"let row\\\">{{row.id}}</td>\\r\\n            </ng-container>\\r\\n      \\r\\n  \\r\\n          <ng-container  matColumnDef=\\\"planned\\\">\\r\\n            <th mat-header-cell  *matHeaderCellDef>Planned</th>\\r\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{row.planned}}</td>\\r\\n          </ng-container>\\r\\n    \\r\\n          <!-- State Column -->\\r\\n          <ng-container matColumnDef=\\\"actual\\\">\\r\\n            <th mat-header-cell *matHeaderCellDef>Actual</th>\\r\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{row.actual}}</td>\\r\\n          </ng-container>\\r\\n    \\r\\n          <!-- Created Column -->\\r\\n          <ng-container matColumnDef=\\\"shortfall\\\">\\r\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n              Short Fall\\r\\n            </th>\\r\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{row.shortfall}}</td>\\r\\n          </ng-container>\\r\\n  \\r\\n          <ng-container matColumnDef=\\\"continuedWithOt\\\">\\r\\n              <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                Continued with OT\\r\\n              </th>\\r\\n              <td mat-cell *matCellDef=\\\"let row\\\">{{row.continuedWithOt}}</td>\\r\\n            </ng-container>\\r\\n  \\r\\n            <ng-container matColumnDef=\\\"continuedWithOutOt\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                  Continued Without OT\\r\\n                </th>\\r\\n                <td mat-cell *matCellDef=\\\"let row\\\">{{row.continuedWithOutOt}}</td>\\r\\n              </ng-container>\\r\\n              <ng-container matColumnDef=\\\"newComer\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                  New Comer\\r\\n                </th>\\r\\n                <td mat-cell *matCellDef=\\\"let row\\\">{{row.newComer}}</td>\\r\\n              </ng-container>\\r\\n              <ng-container matColumnDef=\\\"shiftTime\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                  Shift Time\\r\\n                </th>\\r\\n                <td mat-cell *matCellDef=\\\"let row\\\">{{row.shiftTime}}</td>\\r\\n              </ng-container>\\r\\n              <ng-container matColumnDef=\\\"projectId\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                  Project Id\\r\\n                </th>\\r\\n                <td mat-cell *matCellDef=\\\"let row\\\">{{row.projectId}}</td>\\r\\n              </ng-container>\\r\\n              <ng-container matColumnDef=\\\"siteId\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                  site Id\\r\\n                </th>\\r\\n                <td mat-cell *matCellDef=\\\"let row\\\">{{row.siteId}}</td>\\r\\n              </ng-container>\\r\\n  \\r\\n             <mat-divider></mat-divider> \\r\\n          <ng-container matColumnDef=\\\"actionsColumn\\\">\\r\\n              <th mat-header-cell *matHeaderCellDef>Action</th>\\r\\n              \\r\\n              <mat-cell *matCellDef=\\\"let row\\\">\\r\\n                  <button mat-icon-button>\\r\\n                      <mat-icon matTooltip=\\\"Update\\\" aria-label=\\\"Example icon-button with a heart icon\\\" (click)=\\\"openDialog(row.id)\\\" >update</mat-icon>\\r\\n                    </button>\\r\\n                    <button mat-icon-button>\\r\\n                        <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\"  matTooltip=\\\"Delete\\\" (click)=\\\"openDialog(row.id)\\\">delete</mat-icon>\\r\\n                      </button>\\r\\n                 \\r\\n              </mat-cell>\\r\\n          </ng-container>\\r\\n          <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n          <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n           \\r\\n        </table>\\r\\n     <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"8\\\"></mat-paginator>\\r\\n    \\r\\n      <!--   <app-pagination [maxPages]=\\\"maxPages\\\"\\r\\n        [current]=\\\"1\\\"\\r\\n        [postsPerPage]=\\\"postsPerPage\\\"\\r\\n        [itemsPerPage]=\\\"itemsPerPage\\\"\\r\\n        (changePage)=\\\"pageChanged($event)\\\"></app-pagination> -->\\r\\n    \\r\\n  </div>\"","import {Component, OnInit, ViewChild , Input} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {  MatDialog,  MatDialogRef , MatDialogConfig , MAT_DIALOG_DATA} from '@angular/material';\r\nimport {MatTableDataSource} from '@angular/material';\r\nimport {MatPaginator, MatSort} from '@angular/material';\r\nimport {merge, Observable, of as observableOf} from 'rxjs';\r\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\r\nimport {DataService} from '../data.service';\r\nimport { Employ } from '../models/employ.model';\r\nimport { MatDialogModule } from '@angular/material';\r\nimport {EmploydialogComponent} from '../employdialog/employdialog.component';\r\n\r\n@Component({\r\n  selector: 'app-opsmanpowertransaction',\r\n  templateUrl: './opsmanpowertransaction.component.html',\r\n  styleUrls: ['./opsmanpowertransaction.component.css']\r\n})\r\nexport class OpsmanpowertransactionComponent implements OnInit {\r\n  @Input() public emp1: Employ;\r\n  dialogResult=\"\";\r\n  itemsPerPage: number = 10;\r\n  postsPerPage: number[] = [5, 10, 25];\r\nid;\r\n  emp:Employ[] = [];\r\n    manpower: Opsmanpowertransaction[] = [];\r\n  empid=new Employ();\r\n   exampleDatabase: ExampleHttpDao | null;\r\n\r\n  displayedColumns: string[] = ['id','planned', 'actual',  'shortfall' , 'continuedWithOt', 'continuedWithOutOt','newComer','shiftTime','projectId','siteId', 'actionsColumn' ];\r\n  /* //displayedColumns: string[] = [  'code', 'name', 'designation', 'mail' , 'phone']; */\r\n\r\n\r\n\r\n  resultsLength = 0;\r\n  isLoadingResults = true;\r\n  isRateLimitReached = false;\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  \r\n  page: (Observable<number>|any);\r\n  constructor(private http: HttpClient, private data1: DataService, private dialog: MatDialog) {\r\n\r\n   }\r\n   \r\n  /*  listEmployees()\r\n   {\r\n     this.data.getemployee(0, 2).subscribe(\r\n       data => this.emp = data['content']\r\n      \r\n      \r\n     );\r\n     console.log(this.data);\r\n    \r\n   } */\r\n   /* pageChanged(event) {\r\n    this.page = event.page;\r\n    \r\n    this.itemsPerPage = event.itemsPerPage;\r\n    this.loadEmployeeByPage(this.page, this.itemsPerPage);\r\n} */\r\n/* loadEmployeeByPage(page: number, rows: number) {\r\n \r\n  this.data.getemployee(page, rows).subscribe(\r\n    data => this.emp = data['content']\r\n  \r\n    );\r\n\r\n} */\r\n\r\n   // tslint:disable-next-line:member-ordering\r\n\r\n\r\n    /* openDialog() {\r\n    const dialogRef = this.dialog.open(DialogBodyComponent, {\r\n      height: '400px',\r\n  width: '600px'\r\n      \r\n    });\r\n  }  */\r\n\r\n  ngOnInit() {\r\n     this.exampleDatabase = new ExampleHttpDao(this.http);\r\n\r\n    // If the user changes the sort order, reset back to the first page.\r\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\r\n\r\n    merge(this.paginator.page)\r\n      .pipe(\r\n        startWith({}),\r\n        switchMap(() => {\r\n           console.log('enter1');\r\n          this.isLoadingResults = true;\r\n          return this.exampleDatabase!.getRepoIssues(this.paginator.pageIndex,\r\n           8);\r\n\r\n        }),\r\n        map(data => {\r\n          console.log('ggg');\r\n          // Flip flag to show that loading has finished.\r\n          this.isLoadingResults = false;\r\n          this.isRateLimitReached = false;\r\n          this.resultsLength = data['totalElements'];\r\n console.log(data['totalElements']);\r\n          return data;\r\n        }),\r\n        catchError(() => {\r\n          console.log('errr');\r\n          this.isLoadingResults = false;\r\n          // Catch if the GitHub API has reached its rate limit. Return empty data.\r\n          this.isRateLimitReached = true;\r\n          return observableOf([]);\r\n        })\r\n      ).subscribe(data => this.manpower = data['content']);\r\n   // this.listEmployees();\r\n  }\r\n openDialog(id:number) {\r\n  \r\n  const item1 = this.manpower.find(i => i.id === id);\r\n \r\n    const dialogRef = this.dialog.open(EmploydialogComponent, {\r\n      width: '300px',\r\n      data:item1\r\n      \r\n          });\r\n          dialogRef.afterClosed().subscribe(result => {\r\n            console.log('dialog closed:${result}');\r\n            this.dialogResult = result;\r\n          });\r\n  \r\n  }\r\n}\r\n\r\n  export interface Opsmanpowertransaction {\r\n    id: number;\r\n    planned: number;\r\n    actual: number; \r\n    shortfall: number;\r\n    continuedWithOt: number;\r\n    continuedWithOutOt: number;\r\n    newComer: number;\r\n    shiftTime: string;\r\n    projectId: number;\r\n    siteId: number;\r\n   }\r\n   \r\n   /** An example database that the data source uses to retrieve data for the table. */\r\n   export class ExampleHttpDao { \r\n    \r\n   \r\n     constructor(private http: HttpClient) {}\r\n    \r\n     getRepoIssues(page: number,records:number): Observable<Opsmanpowertransaction[]> {\r\n       const href = 'http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/opstracker/search/manpowertransaction/'+ page + '/' + records;\r\n      \r\n   \r\n       return this.http.get<Opsmanpowertransaction[]>(href);\r\n     }\r\n   }","module.exports = \".algnleft{\\r\\n    margin:20px \\r\\n}\\r\\n.div-left{\\r\\n    float:right;\\r\\n    padding-right:20px;\\r\\n}\\r\\n.mat-cell:nth-child(2), .mat-header-cell:nth-child(2) {\\r\\n    flex: 0 0 200px;\\r\\n}\\r\\n.martop{\\r\\n    margin-top: 14px;\\r\\n}\\r\\n.spinnerabove {\\r\\n    position:absolute;\\r\\n    top:50%;\\r\\n    left:50%;\\r\\n   \\r\\n    z-index: 10;\\r\\n  }\\r\\n  \"","module.exports = \"<div class=\\\"algnleft\\\">\\r\\n  <div class=\\\"div-left\\\"><button mat-mini-fab>\\r\\n      <mat-icon aria-label=\\\"\\\" routerLink=\\\"../masterdata\\\">arrow_back</mat-icon>\\r\\n    </button></div>\\r\\n  \\r\\n     <div class=\\\"example-loading-shade spinnerabove \\\"\\r\\n           *ngIf=\\\"isLoadingResults || isRateLimitReached\\\" >\\r\\n        <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\r\\n        <div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\r\\n          \\r\\n        </div>\\r\\n      </div> \\r\\n  \\r\\n      \\r\\n    \\r\\n        <table mat-table [dataSource]=\\\"manpower\\\" class=\\\"mat-elevation-z8\\\"\\r\\n               matSort matSortActive=\\\"id\\\" matSortDisableClear matSortDirection=\\\"asc\\\" style=\\\"width:100%\\\">\\r\\n          <!-- Number Column -->\\r\\n          \\r\\n          <!-- Title Column -->\\r\\n          <ng-container  matColumnDef=\\\"id\\\">\\r\\n              <th mat-header-cell  *matHeaderCellDef>Id</th>\\r\\n              <td mat-cell *matCellDef=\\\"let row\\\">{{row.id}}</td>\\r\\n            </ng-container>\\r\\n      \\r\\n  \\r\\n          <ng-container  matColumnDef=\\\"materialType\\\">\\r\\n            <th mat-header-cell  *matHeaderCellDef>Material Type</th>\\r\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{row.materialType}}</td>\\r\\n          </ng-container>\\r\\n    \\r\\n          <!-- State Column -->\\r\\n          <ng-container matColumnDef=\\\"commitmentDate\\\">\\r\\n            <th mat-header-cell *matHeaderCellDef>Commitment Date</th>\\r\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{row.commitmentDate}}</td>\\r\\n          </ng-container>\\r\\n    \\r\\n          <!-- Created Column -->\\r\\n          <ng-container matColumnDef=\\\"indentSubmissionDate\\\">\\r\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n              Indent Submission Date\\r\\n            </th>\\r\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{row.indentSubmissionDate}}</td>\\r\\n          </ng-container>\\r\\n  \\r\\n          <ng-container matColumnDef=\\\"materialSupplyDate\\\">\\r\\n              <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                Material Supply Date\\r\\n              </th>\\r\\n              <td mat-cell *matCellDef=\\\"let row\\\">{{row.materialSupplyDate}}</td>\\r\\n            </ng-container>\\r\\n  \\r\\n            <ng-container matColumnDef=\\\"uniformSupplyDate\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                  Uniform Supply Date\\r\\n                </th>\\r\\n                <td mat-cell *matCellDef=\\\"let row\\\">{{row.uniformSupplyDate}}</td>\\r\\n              </ng-container>\\r\\n              <ng-container matColumnDef=\\\"status\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                  Status\\r\\n                </th>\\r\\n                <td mat-cell *matCellDef=\\\"let row\\\">{{row.status}}</td>\\r\\n              </ng-container>\\r\\n              <ng-container matColumnDef=\\\"remarks\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                  Remarks\\r\\n                </th>\\r\\n                <td mat-cell *matCellDef=\\\"let row\\\">{{row.remarks}}</td>\\r\\n              </ng-container>\\r\\n              <ng-container matColumnDef=\\\"projectId\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                  Project Id\\r\\n                </th>\\r\\n                <td mat-cell *matCellDef=\\\"let row\\\">{{row.projectId}}</td>\\r\\n              </ng-container>\\r\\n              <ng-container matColumnDef=\\\"siteId\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                  site Id\\r\\n                </th>\\r\\n                <td mat-cell *matCellDef=\\\"let row\\\">{{row.siteId}}</td>\\r\\n              </ng-container>\\r\\n  \\r\\n             <mat-divider></mat-divider> \\r\\n          <ng-container matColumnDef=\\\"actionsColumn\\\">\\r\\n              <th mat-header-cell *matHeaderCellDef>Action</th>\\r\\n              \\r\\n              <mat-cell *matCellDef=\\\"let row\\\">\\r\\n                  <button mat-icon-button>\\r\\n                      <mat-icon matTooltip=\\\"Update\\\" aria-label=\\\"Example icon-button with a heart icon\\\" (click)=\\\"openDialog(row.id)\\\" >update</mat-icon>\\r\\n                    </button>\\r\\n                    <button mat-icon-button>\\r\\n                        <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\"  matTooltip=\\\"Delete\\\" (click)=\\\"openDialog(row.id)\\\">delete</mat-icon>\\r\\n                      </button>\\r\\n                 \\r\\n              </mat-cell>\\r\\n          </ng-container>\\r\\n          <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n          <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n           \\r\\n        </table>\\r\\n     <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"8\\\"></mat-paginator>\\r\\n    \\r\\n      <!--   <app-pagination [maxPages]=\\\"maxPages\\\"\\r\\n        [current]=\\\"1\\\"\\r\\n        [postsPerPage]=\\\"postsPerPage\\\"\\r\\n        [itemsPerPage]=\\\"itemsPerPage\\\"\\r\\n        (changePage)=\\\"pageChanged($event)\\\"></app-pagination> -->\\r\\n    \\r\\n  </div>\"","import {Component, OnInit, ViewChild , Input} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {  MatDialog,  MatDialogRef , MatDialogConfig , MAT_DIALOG_DATA} from '@angular/material';\r\nimport {MatTableDataSource} from '@angular/material';\r\nimport {MatPaginator, MatSort} from '@angular/material';\r\nimport {merge, Observable, of as observableOf} from 'rxjs';\r\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\r\nimport {DataService} from '../data.service';\r\nimport { Employ } from '../models/employ.model';\r\nimport { MatDialogModule } from '@angular/material';\r\nimport {EmploydialogComponent} from '../employdialog/employdialog.component';\r\n\r\n@Component({\r\n  selector: 'app-opsmaterialtransaction',\r\n  templateUrl: './opsmaterialtransaction.component.html',\r\n  styleUrls: ['./opsmaterialtransaction.component.css']\r\n})\r\nexport class OpsmaterialtransactionComponent implements OnInit {\r\n  @Input() public emp1: Employ;\r\n  dialogResult=\"\";\r\n  itemsPerPage: number = 10;\r\n  postsPerPage: number[] = [5, 10, 25];\r\nid;\r\n  emp:Employ[] = [];\r\n    material: Opsmaterialtransaction[] = [];\r\n  empid=new Employ();\r\n   exampleDatabase: ExampleHttpDao | null;\r\n\r\n  displayedColumns: string[] = ['id','materialType', 'commitmentDate',  'indentSubmissionDate' , 'materialSupplyDate', 'uniformSupplyDate','status','remarks','projectId','siteId', 'actionsColumn' ];\r\n  /* //displayedColumns: string[] = [  'code', 'name', 'designation', 'mail' , 'phone']; */\r\n\r\n\r\n\r\n  resultsLength = 0;\r\n  isLoadingResults = true;\r\n  isRateLimitReached = false;\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  \r\n  page: (Observable<number>|any);\r\n  constructor(private http: HttpClient, private data1: DataService, private dialog: MatDialog) {\r\n\r\n   }\r\n   \r\n  /*  listEmployees()\r\n   {\r\n     this.data.getemployee(0, 2).subscribe(\r\n       data => this.emp = data['content']\r\n      \r\n      \r\n     );\r\n     console.log(this.data);\r\n    \r\n   } */\r\n   /* pageChanged(event) {\r\n    this.page = event.page;\r\n    \r\n    this.itemsPerPage = event.itemsPerPage;\r\n    this.loadEmployeeByPage(this.page, this.itemsPerPage);\r\n} */\r\n/* loadEmployeeByPage(page: number, rows: number) {\r\n \r\n  this.data.getemployee(page, rows).subscribe(\r\n    data => this.emp = data['content']\r\n  \r\n    );\r\n\r\n} */\r\n\r\n   // tslint:disable-next-line:member-ordering\r\n\r\n\r\n    /* openDialog() {\r\n    const dialogRef = this.dialog.open(DialogBodyComponent, {\r\n      height: '400px',\r\n  width: '600px'\r\n      \r\n    });\r\n  }  */\r\n\r\n  ngOnInit() {\r\n     this.exampleDatabase = new ExampleHttpDao(this.http);\r\n\r\n    // If the user changes the sort order, reset back to the first page.\r\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\r\n\r\n    merge(this.paginator.page)\r\n      .pipe(\r\n        startWith({}),\r\n        switchMap(() => {\r\n           console.log('enter1');\r\n          this.isLoadingResults = true;\r\n          return this.exampleDatabase!.getRepoIssues(this.paginator.pageIndex,\r\n           8);\r\n\r\n        }),\r\n        map(data => {\r\n          console.log('ggg');\r\n          // Flip flag to show that loading has finished.\r\n          this.isLoadingResults = false;\r\n          this.isRateLimitReached = false;\r\n          this.resultsLength = data['totalElements'];\r\n console.log(data['totalElements']);\r\n          return data;\r\n        }),\r\n        catchError(() => {\r\n          console.log('errr');\r\n          this.isLoadingResults = false;\r\n          // Catch if the GitHub API has reached its rate limit. Return empty data.\r\n          this.isRateLimitReached = true;\r\n          return observableOf([]);\r\n        })\r\n      ).subscribe(data => this.material = data['content']);\r\n   // this.listEmployees();\r\n  }\r\n openDialog(id:number) {\r\n  \r\n  const item1 = this.material.find(i => i.id === id);\r\n \r\n    const dialogRef = this.dialog.open(EmploydialogComponent, {\r\n      width: '300px',\r\n      data:item1\r\n      \r\n          });\r\n          dialogRef.afterClosed().subscribe(result => {\r\n            console.log('dialog closed:${result}');\r\n            this.dialogResult = result;\r\n          });\r\n  \r\n  }\r\n}\r\n\r\nexport interface Opsmaterialtransaction {\r\n  id:number;\r\n  materialType: string;\r\n    commitmentDate: string;\r\n    indentSubmissionDate: string;\r\n    materialSupplyDate: string;\r\n    uniformSupplyDate: string;\r\n   \r\n    status: string;\r\n    remarks: string;\r\n    projectId: number;\r\n    siteId: number;\r\n }\r\n \r\n /** An example database that the data source uses to retrieve data for the table. */\r\n export class ExampleHttpDao { \r\n  \r\n \r\n   constructor(private http: HttpClient) {}\r\n  \r\n   getRepoIssues(page: number,records:number): Observable<Opsmaterialtransaction[]> {\r\n     const href = 'http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/opstracker/search/materialtransaction/'+ page + '/' + records;\r\n    \r\n \r\n     return this.http.get<Opsmaterialtransaction[]>(href);\r\n   }\r\n }","module.exports = \".example-container {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n  }\\r\\n  \\r\\n  .example-container > * {\\r\\n      padding-left: 20px;\\r\\n      padding-top: 20px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .accordian > * {\\r\\n    padding-left: 50px;\\r\\n    padding-top: 5px;\\r\\n \\r\\n}\\r\\n  \\r\\n  .example-stretched-tabs {\\r\\n    max-width: 800px;\\r\\n  }\\r\\n  \\r\\n  example-small-box, .employee-box ,.client-box , .site-box, .escalation-box, .opstracker-box , .material-box ,.machine-box{\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    justify-content: center;\\r\\n    margin: 16px;\\r\\n    padding: 16px;\\r\\n    border-radius: 8px;\\r\\n  }\\r\\n  \\r\\n  .example-small-box {\\r\\n    height: 100px;\\r\\n    width: 100px;\\r\\n  }\\r\\n  \\r\\n  .employee-box {\\r\\n    height: 400px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .manpower-box {\\r\\n    height: 400px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .client-box {\\r\\n    height: 200px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .site-box {\\r\\n    height:650px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .escalation-box {\\r\\n    height: 440px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .opstracker-box {\\r\\n    height: 180px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .material-box {\\r\\n    height: 600px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .machine-box {\\r\\n    height: 600px;\\r\\n    width: 300px;\\r\\n  }\\r\\n  \\r\\n  .button-row button,\\r\\n.button-row a {\\r\\n  margin-left: 90px;\\r\\n  margin-top: 8px\\r\\n}\\r\\n  \\r\\n  .site-form {\\r\\n  min-width: 150px;\\r\\n  max-width: 500px;\\r\\n  width: 100%;\\r\\n}\\r\\n  \\r\\n  .example-full-width {\\r\\n  width: 100%;\\r\\n}\\r\\n  \\r\\n  .example-headers-align .mat-expansion-panel-header-title, \\r\\n.example-headers-align .mat-expansion-panel-header-description {\\r\\n  flex-basis: 0;\\r\\n}\\r\\n  \\r\\n  .example-headers-align .mat-expansion-panel-header-description {\\r\\n  justify-content: space-between;\\r\\n  align-items: center;\\r\\n}\\r\\n  \\r\\n  .mt{\\r\\n  margin-top: 100px;\\r\\n}\\r\\n\\r\\n  \"","module.exports = \"<div class=\\\"example-container \\\">\\r\\n    <div id = \\\"layoutContainer\\\" \\r\\n    fxLayout = \\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutwrap fxLayoutGap=\\\"0.15%\\\">\\r\\n    \\r\\n    <div fxflex = \\\"50\\\" >\\r\\n    <div >\\r\\n      <mat-card >\\r\\n          <mat-card-header>\\r\\n           \\r\\n                  <mat-card-title>Opstracker</mat-card-title>\\r\\n                 \\r\\n          </mat-card-header>\\r\\n          <mat-divider ></mat-divider> \\r\\n          <mat-card-content>\\r\\n          <div >\\r\\n              <mat-form-field class=\\\"example-full-width\\\">\\r\\n                  <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Date\\\">\\r\\n                  <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n                  <mat-datepicker #picker ></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"example-full-width\\\">\\r\\n              <input type=\\\"text\\\" placeholder=\\\"Client\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto\\\">\\r\\n              <mat-autocomplete #auto=\\\"matAutocomplete\\\">\\r\\n                <mat-option *ngFor=\\\"let option of projects\\\" [value]=\\\"option.name\\\" (onSelectionChange)=\\\"setProject(option.id)\\\">\\r\\n                  {{option.name}}\\r\\n                </mat-option>\\r\\n              </mat-autocomplete>\\r\\n            </mat-form-field>\\r\\n           \\r\\n            \\r\\n           \\r\\n           \\r\\n            \\r\\n              <mat-form-field class=\\\"example-full-width\\\">\\r\\n                  <input type=\\\"text\\\" placeholder=\\\"Site\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto1\\\">\\r\\n                  <mat-autocomplete #auto1=\\\"matAutocomplete\\\">\\r\\n                    <mat-option *ngFor=\\\"let option of sites\\\" [value]=\\\"option.name\\\" (onSelectionChange)=\\\"setSite(option.id)\\\" >\\r\\n                      {{option.name}}\\r\\n                    </mat-option>\\r\\n                  </mat-autocomplete>\\r\\n                </mat-form-field>\\r\\n             \\r\\n             \\r\\n                 \\r\\n  \\r\\n                    \\r\\n                      \\r\\n                   \\r\\n                   \\r\\n                       \\r\\n                        \\r\\n  \\r\\n       </div>\\r\\n       </mat-card-content>\\r\\n       </mat-card>\\r\\n       </div>\\r\\n      </div>\\r\\n       <div class=\\\"accordian\\\">\\r\\n          <div fxflex = \\\"50\\\" >\\r\\n            \\r\\n              <mat-tab-group >\\r\\n               \\r\\n                  <mat-tab label=\\\"Manpower\\\">\\r\\n                      <div class=\\\"material-box mat-elevation-z4\\\">\\r\\n                         \\r\\n                      <div >\\r\\n                          <button mat-mini-fab >\\r\\n                              <mat-icon aria-label=\\\"\\\" routerLink=\\\"../opsmanpowertransactionview\\\">table_chart</mat-icon>\\r\\n                            </button>\\r\\n                          <mat-form-field class=\\\"example-full-width\\\">\\r\\n                              <input type=\\\"text\\\" placeholder=\\\"Shift\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto3\\\">\\r\\n                              <mat-autocomplete #auto3=\\\"matAutocomplete\\\">\\r\\n                                <mat-option *ngFor=\\\"let option of shifts\\\" [value]=\\\"option\\\" (onSelectionChange)=\\\"setShiftDetails(option)\\\">\\r\\n                                  {{option}}\\r\\n                                </mat-option>\\r\\n                              </mat-autocomplete>\\r\\n                            </mat-form-field>\\r\\n                            <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                <input matInput placeholder=\\\"Planned\\\" [(ngModel)]=\\\"manpowertransaction.planned\\\">\\r\\n                              </mat-form-field>\\r\\n                              <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                  <input matInput placeholder=\\\"Actual\\\" [(ngModel)]=\\\"manpowertransaction.actual\\\" (input)=\\\"setShortFall($event.target.value)\\\">\\r\\n                                </mat-form-field>\\r\\n                                <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                    <input matInput placeholder=\\\"Shortfall\\\" [(ngModel)]=\\\"manpowertransaction.shortfall\\\">\\r\\n                                  </mat-form-field>\\r\\n                                  \\r\\n                                     <p>Total No of Releivers</p>\\r\\n                                    <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                      <input matInput placeholder=\\\"Continued\\\" [(ngModel)]=\\\"manpowertransaction.continuedWithOutOt\\\">\\r\\n                                    </mat-form-field>\\r\\n                                    <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                      <input matInput placeholder=\\\"Continued with OT\\\" [(ngModel)]=\\\"manpowertransaction.continuedWithOt\\\">\\r\\n                                    </mat-form-field>\\r\\n                                    <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                      <input matInput placeholder=\\\"New\\\" [(ngModel)]=\\\"manpowertransaction.newComer\\\">\\r\\n                                    </mat-form-field>\\r\\n\\r\\n\\r\\n                                    \\r\\n                                    <div class=\\\"button-row\\\">\\r\\n                                        \\r\\n                                        <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postManPowerTransaction()\\\">Submit</button>\\r\\n                                        \\r\\n                                        \\r\\n                                      </div>\\r\\n                      </div>\\r\\n                       </div>\\r\\n                     \\r\\n                    </mat-tab>\\r\\n                   \\r\\n\\r\\n                   \\r\\n                        <mat-tab label=\\\"Material\\\">\\r\\n\\r\\n                            <div class=\\\"material-box mat-elevation-z4\\\">\\r\\n                                <div >\\r\\n                                    <button mat-mini-fab >\\r\\n                                        <mat-icon aria-label=\\\"\\\" routerLink=\\\"../opsmaterialtransactionview\\\">table_chart</mat-icon>\\r\\n                                      </button>\\r\\n                                    <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                        <input type=\\\"text\\\" placeholder=\\\"Material Type\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto4\\\">\\r\\n                                        <mat-autocomplete #auto4=\\\"matAutocomplete\\\">\\r\\n                                          <mat-option *ngFor=\\\"let option of materialtypes as index i\\\" [value]=\\\"option\\\" (onSelectionChange)=\\\"setCommitmentdate(option)\\\">\\r\\n                                            {{option}}\\r\\n                                          </mat-option>\\r\\n                                        </mat-autocomplete>\\r\\n                                      </mat-form-field>\\r\\n                                      <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                          <input matInput [matDatepicker]=\\\"picker4\\\" placeholder=\\\"Commitment Date\\\" [(ngModel)]=\\\"materialtransaction.commitmentDate\\\">\\r\\n                                          <mat-datepicker-toggle matSuffix [for]=\\\"picker4\\\"></mat-datepicker-toggle>\\r\\n                                          <mat-datepicker #picker4></mat-datepicker>\\r\\n                                        </mat-form-field>\\r\\n\\r\\n                                      <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                          <input matInput [matDatepicker]=\\\"picker1\\\" placeholder=\\\"Indent SubmissionDate\\\" [(ngModel)]=\\\"materialtransaction.indentSubmissionDate\\\">\\r\\n                                          <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\r\\n                                          <mat-datepicker #picker1></mat-datepicker>\\r\\n                                        </mat-form-field>\\r\\n\\r\\n                                        <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                            <input matInput [matDatepicker]=\\\"picker3\\\" placeholder=\\\"Material Supply Date\\\" [(ngModel)]=\\\"materialtransaction.materialSupplyDate\\\">\\r\\n                                            <mat-datepicker-toggle matSuffix [for]=\\\"picker3\\\"></mat-datepicker-toggle>\\r\\n                                            <mat-datepicker #picker3></mat-datepicker>\\r\\n                                          </mat-form-field>\\r\\n                                          <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                              <input matInput [matDatepicker]=\\\"picker2\\\" placeholder=\\\"Uniform Supply  Date\\\" [(ngModel)]=\\\"materialtransaction.uniformSupplyDate\\\">\\r\\n                                              <mat-datepicker-toggle matSuffix [for]=\\\"picker2\\\"></mat-datepicker-toggle>\\r\\n                                              <mat-datepicker #picker2></mat-datepicker>\\r\\n                                            </mat-form-field>\\r\\n                                            \\r\\n                                              <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                                  <input type=\\\"text\\\" placeholder=\\\"Status\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto5\\\" [(ngModel)]=\\\"materialtransaction.matst\\\">\\r\\n                                                  <mat-autocomplete #auto5=\\\"matAutocomplete\\\">\\r\\n                                                    <mat-option *ngFor=\\\"let matst of Matstatus\\\" [value]=\\\"matst\\\" (onSelectionChange)=\\\"setStatus(matst)\\\">\\r\\n                                                      {{matst}}\\r\\n                                                    </mat-option>\\r\\n                                                  </mat-autocomplete>\\r\\n\\r\\n                                                </mat-form-field>\\r\\n                                                <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                                    <input matInput placeholder=\\\"Remarks\\\" [(ngModel)]=\\\"materialtransaction.remarks\\\">\\r\\n                                                  </mat-form-field>\\r\\n\\r\\n                                                  \\r\\n                                              <div class=\\\"button-row\\\">\\r\\n                                                  \\r\\n                                                  <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postMaterialTransaction()\\\">Submit</button>\\r\\n                                                  \\r\\n                                                  \\r\\n                                                </div>\\r\\n                                </div>\\r\\n                                 </div>\\r\\n                          </mat-tab>\\r\\n                         \\r\\n\\r\\n\\r\\n                        \\r\\n                              <mat-tab label=\\\"Machine\\\">\\r\\n                                  <div class=\\\"material-box mat-elevation-z4\\\">\\r\\n                                      <div >\\r\\n                                          <button mat-mini-fab >\\r\\n                                              <mat-icon aria-label=\\\"\\\" routerLink=\\\"../opsmachinetransactionview\\\">table_chart</mat-icon>\\r\\n                                            </button>\\r\\n                                      <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                          <input type=\\\"text\\\" placeholder=\\\"Type of Machine\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto6\\\">\\r\\n                                          <mat-autocomplete #auto6=\\\"matAutocomplete\\\">\\r\\n                                            <mat-option *ngFor=\\\"let option of machinetypes\\\" [value]=\\\"option\\\" (onSelectionChange)=\\\"setEquipment(option)\\\">\\r\\n                                              {{option}}\\r\\n                                            </mat-option>\\r\\n                                          </mat-autocomplete>\\r\\n                                        </mat-form-field>\\r\\n                                          <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                              <input matInput placeholder=\\\"Equipment Type\\\" [(ngModel)]=\\\"machinetransaction.equipmentType\\\" >\\r\\n                                            </mat-form-field>\\r\\n                                          <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                              <input matInput placeholder=\\\"Model Number\\\" [(ngModel)]=\\\"machinetransaction.modelNo\\\">\\r\\n                                            </mat-form-field>\\r\\n                                            <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                                <input matInput placeholder=\\\"Serial Number\\\" [(ngModel)]=\\\"machinetransaction.serialNo\\\">\\r\\n                                              </mat-form-field>\\r\\n                                              <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                                  <input type=\\\"text\\\" placeholder=\\\"Status\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto8\\\">\\r\\n                                                  <mat-autocomplete #auto8=\\\"matAutocomplete\\\">\\r\\n                                                    <mat-option *ngFor=\\\"let option of machinestatus\\\" [value]=\\\"option\\\" (onSelectionChange)=\\\"setMachineStatus(option)\\\">\\r\\n                                                      {{option}}\\r\\n                                                    </mat-option>\\r\\n                                                  </mat-autocomplete>\\r\\n                                                </mat-form-field>\\r\\n                                              \\r\\n                                                <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                                    <input matInput [min]=\\\"minDate\\\" [max]=\\\"maxDate\\\" [matDatepicker]=\\\"picker6\\\" placeholder=\\\"Complaint Raised  Date\\\" [(ngModel)]=\\\"machinetransaction.complaintRaisedDate\\\">\\r\\n                                                    <mat-datepicker-toggle matSuffix [for]=\\\"picker6\\\"></mat-datepicker-toggle>\\r\\n                                                    <mat-datepicker #picker6></mat-datepicker>\\r\\n                                                  </mat-form-field>\\r\\n                                                  <mat-form-field class=\\\"example-full-width\\\">\\r\\n                                                      <input matInput [matDatepicker]=\\\"picker7\\\" placeholder=\\\"Resolution  Date\\\" [(ngModel)]=\\\"machinetransaction.ResolutionDate\\\">\\r\\n                                                      <mat-datepicker-toggle matSuffix [for]=\\\"picker7\\\"></mat-datepicker-toggle>\\r\\n                                                      <mat-datepicker #picker7></mat-datepicker>\\r\\n                                                    </mat-form-field>\\r\\n                                                 \\r\\n                                                <div class=\\\"button-row\\\">\\r\\n                                                    \\r\\n                                                    <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postMachineTransaction()\\\">Submit</button>\\r\\n                                                    \\r\\n                                                    \\r\\n                                                  </div>\\r\\n                                 \\r\\n                                   </div>\\r\\n                                   </div>\\r\\n                                </mat-tab>\\r\\n                               \\r\\n                                </mat-tab-group>\\r\\n            \\r\\n            </div>\\r\\n       </div>\\r\\n      </div>\\r\\n      </div>\"","import { Component, OnInit, Injectable } from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\nimport {Observable} from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {DataService} from '../data.service';\r\nimport { Site } from '../models/site.model';\r\nimport { Project } from '../models/project.model';\r\nimport { ManPowerTransaction } from '../models/manpowertransaction.model';\r\nimport { ManPower } from '../models/manpower.model';\r\nimport { Material } from '../models/material.model';\r\nimport { Machine } from '../models/machine.model';\r\nimport { MaterialDate } from '../models/materialdate.model';\r\nimport { MaterialTransaction } from '../models/materialtransaction.model';\r\nimport { MachineTransaction } from '../models/machinetransaction.model';\r\nimport {ToasterModule,ToasterService,ToasterConfig} from 'angular2-toaster';\r\nimport {map, startWith ,switchMap,catchError} from 'rxjs/operators';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Dateformat } from '../dateformat.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-opstracker',\r\n  templateUrl: './opstracker.component.html',\r\n  styleUrls: ['./opstracker.component.css']\r\n})\r\n\r\n\r\nexport class OpstrackerComponent implements OnInit {\r\n  private toasterService: ToasterService;\r\n  //Constructor call\r\n  constructor(private data: DataService, private http: HttpClient,private dateFormat: Dateformat ,toasterService:ToasterService){\r\n    this.toasterService=toasterService; }\r\n\r\n  myControl = new FormControl();\r\n  isLoadingResults = false;\r\n\r\n  //model class object creation\r\n  project = new Project();\r\n  site = new Site();\r\n  manpowertransaction= new ManPowerTransaction();\r\n  materialtransaction= new MaterialTransaction();\r\n  machinetransaction= new MachineTransaction();\r\n  manpower= new ManPower();\r\n  material= new Material();\r\n  machine= new Machine();\r\n\r\n  //Dropdown options declaration\r\n  Matstatus: string[] = ['Delayed', 'Complaint','Pending'];\r\n  machinestatus: string[] = ['Working','Not Working'];\r\n  machinetypes = [];\r\n  equipmenttypes = [];\r\n  materialtypes =[];\r\n\r\n  //variable declation\r\n  \r\n  projects: Object;\r\n  sites: Object;\r\n  manpowers: Array<ManPower>;\r\n  materials: Array<Material>;\r\n  machines: Array<Machine>;\r\n  shift: string;\r\n  time = [];\r\n  message: string;\r\n  shifts = [];\r\n  \r\n  clearFormArray=[];\r\n  value: number;\r\n  id;\r\n  \r\n\r\n\r\n  setStatus(status:string){\r\n    this.materialtransaction.status=status;\r\n  }\r\n  //function call\r\n  listClients()\r\n  {\r\n    this.data.getProjects().subscribe(\r\n      data => this.projects = data      \r\n    );\r\n    console.log(this.data);\r\n  }\r\n\r\n  listSites()\r\n  {\r\n    this.data.getSites().subscribe(\r\n      data => this.sites = data \r\n    );\r\n    console.log(this.data);\r\n  }\r\n\r\n  setProject(id:number)\r\n  {\r\n    console.log(id);\r\n    this.project.id = id;\r\n    console.log(this.project); \r\n  }\r\n\r\n  setSite(id)\r\n  {\r\n     console.log(id);\r\n     this.id = id; \r\n     console.log(this.project);\r\n     this.setManPower();\r\n  }\r\n\r\n  setManPower()\r\n   {\r\n     this.data.getSite(this.id).subscribe(\r\n       data => {\r\n        this.shifts.length=0;\r\n         this.site = data;\r\n         this.manpowers = this.site.manPowerDTO;\r\n         this.manpowers.forEach(i =>{\r\n         this.manpower = i;\r\n         this.shifts.push(this.manpower.startTime + \"-\" + this.manpower.endTime);\r\n         console.log(this.shifts);\r\n         })\r\n         this.setMaterial();\r\n        }\r\n     );\r\n   }\r\n\r\n   setShiftDetails(shift)\r\n   {\r\n     this.shift = shift;\r\n    console.log(\"shift\" + shift);\r\n    //this.time.push(shift.split('-'));\r\n    //console.log(\"time\" + this.time);\r\n    this.manpowers.forEach(i =>{\r\n      this.manpower = new ManPower();\r\n      this.manpower = i;   \r\n      //console.log(this.time[0] == this.manpower.startTime + \",\" +this.manpower.endTime);   \r\n      //if(this.time[0] == this.manpower.startTime + \",\" +this.manpower.endTime)\r\n      if(this.shift == this.manpower.startTime + \"-\" +this.manpower.endTime)\r\n    {\r\n      this.manpowertransaction.planned = this.manpower.planned;\r\n      this.manpowertransaction.shiftTime = shift;\r\n      this.manpowertransaction.siteId = this.site.id;\r\n      this.manpowertransaction.projectId = this.project.id;\r\n    }\r\n    })\r\n    console.log(this.manpowertransaction);\r\n    this.time = [];\r\n    this.shift =\"\";\r\n    console.log(\"time\" + shift);\r\n   }\r\n\r\n   setShortFall(value: number)\r\n   {\r\n     console.log(value);\r\n     this.manpowertransaction.actual = value;\r\n     this.manpowertransaction.shortfall = this.manpowertransaction.planned - this.manpowertransaction.actual;\r\n   }\r\n\r\n\r\n  setMaterial(){\r\n     this.materials = this.site.materialDTO;\r\n     this.materialtypes.length = 0;\r\n     this.materials.forEach(i =>{\r\n       this.material = i;\r\n       this.materialtypes.push(this.material.materialType);\r\n       //console.log(this.materialtypes);\r\n       this.setMachine();\r\n       })\r\n  }\r\n         \r\nsetCommitmentdate(Commitdate:string){\r\n  \r\n  this.materials.forEach(i =>{\r\n    this.material = new Material();\r\n    this.material = i;\r\n    \r\n    if(Commitdate == this.material.materialType){\r\n      this.materialtransaction.commitmentDate=this.material.commitmentDate;\r\n     console.log(this.materialtransaction.commitmentDate);\r\n     \r\n      this.materialtransaction.siteId = this.site.id;\r\n      this.materialtransaction.projectId = this.project.id;\r\n    }\r\n   \r\n    })\r\n \r\n}\r\n\r\n  setMachine(){\r\n    this.machines = this.site.machineDTO;\r\n    this.machines.forEach(i =>{\r\n      this.machine = i;\r\n      console.log(this.machine);\r\n      this.machinetypes.push(this.machine.machineType);\r\n    })\r\n  }\r\n\r\n  setEquipment(type){\r\n    this.machinetransaction.machineType = type;\r\n    this.machines.forEach(i =>{\r\n      this.machine = i;\r\n      if(this.machine.machineType == type){\r\n      this.machinetransaction.equipmentType = this.machine.equipmentType;\r\n      this.machinetransaction.modelNo = this.machine.modelNo;\r\n      this.machinetransaction.serialNo = this.machine.serialNo;\r\n      }\r\n    })\r\n    console.log(this.machinetransaction);\r\n  }\r\n\r\n  setMachineStatus(status){\r\n    this.machinetransaction.status = status;\r\n  }\r\n\r\n\r\n  postManPowerTransaction()\r\n  {\r\n    this.isLoadingResults = true;\r\n    console.log(this.manpowertransaction);\r\n    console.log(\"hi\");\r\n    \r\n      this.http.post('http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/opstracker/manpower',this.manpowertransaction)\r\n      .subscribe(  (data:any) => { \r\n        console.log(data['status']);\r\n        if(data['status']=='success'){\r\n          this.isLoadingResults = false;\r\n          this.toasterService.pop('success','Successfully Submitted' ,'');\r\n        } else {\r\n          this.isLoadingResults = false;\r\n          this.toasterService.pop('warning','Not Submitted' ,'');\r\n        }\r\n     \r\n      \r\n     },\r\n     (err: HttpErrorResponse) => {\r\n         if (err.error instanceof Error) {\r\n          this.isLoadingResults = false;\r\n         \r\n             console.log('An error occurred:', err.error.message);\r\n         } else {\r\n          this.toasterService.pop('warning','Not Submitted' ,'');\r\n          this.isLoadingResults = false;\r\n          \r\n             console.log('Backend returned status code: ', err.status);\r\n             console.log('Response body:', err.error);\r\n         }\r\n      }\r\n     );\r\n  }\r\n\r\npostMaterialTransaction()\r\n{\r\n  console.log(this.materialtransaction);\r\n  this.isLoadingResults = true;\r\n    this.http.post('http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/opstracker/material',this.materialtransaction)\r\n    .subscribe(  (data:any) => { \r\n      console.log(data['status']);\r\n      if(data['status']=='success'){\r\n        this.isLoadingResults = false;\r\n        this.toasterService.pop('success','Successfully Submitted' ,'');\r\n      } else {\r\n        this.isLoadingResults = false;\r\n        this.toasterService.pop('warning','Not Submitted' ,'');\r\n      }\r\n   \r\n    \r\n   },\r\n   (err: HttpErrorResponse) => {\r\n       if (err.error instanceof Error) {\r\n        this.isLoadingResults = false;\r\n       \r\n           console.log('An error occurred:', err.error.message);\r\n       } else {\r\n        this.toasterService.pop('warning','Not Submitted' ,'');\r\n        this.isLoadingResults = false;\r\n        \r\n           console.log('Backend returned status code: ', err.status);\r\n           console.log('Response body:', err.error);\r\n       }\r\n    }\r\n   );\r\n    \r\n}\r\n\r\npostMachineTransaction()\r\n{\r\n  this.isLoadingResults = true;\r\n  this.http.post('http://localhost:8080/uds/opstracker/machine',this.materialtransaction)\r\n  .subscribe(  (data:any) => { \r\n    console.log(data['status']);\r\n    if(data['status']=='success'){\r\n      this.isLoadingResults = false;\r\n      this.toasterService.pop('success','Successfully Submitted' ,'');\r\n    } else {\r\n      this.isLoadingResults = false;\r\n      this.toasterService.pop('warning','Not Submitted' ,'');\r\n    }\r\n \r\n  \r\n },\r\n (err: HttpErrorResponse) => {\r\n     if (err.error instanceof Error) {\r\n      this.isLoadingResults = false;\r\n     \r\n         console.log('An error occurred:', err.error.message);\r\n     } else {\r\n      this.toasterService.pop('warning','Not Submitted' ,'');\r\n      this.isLoadingResults = false;\r\n      \r\n         console.log('Backend returned status code: ', err.status);\r\n         console.log('Response body:', err.error);\r\n     }\r\n  }\r\n );\r\n}\r\n\r\n  ngOnInit() {\r\n    this.listClients();\r\n    this.listSites();\r\n  }\r\n\r\n}\r\n","module.exports = \".cdk-global-overlay-wrapper, .cdk-overlay-container {\\r\\n    z-index: 99999 !important;\\r\\n }\"","module.exports = \"<div>\\r\\n\\r\\n  <mat-dialog-content>\\r\\n    \\r\\n    <div class=\\\"row\\\" >\\r\\n                          \\r\\n      <mat-form-field class=\\\"example-full-width\\\">\\r\\n        <input matInput placeholder=\\\"Machine Type\\\" [(ngModel)]=\\\"data.machineType\\\">\\r\\n      </mat-form-field>\\r\\n  \\r\\n  </div>\\r\\n  <div class=\\\"row\\\" >\\r\\n                          \\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input matInput placeholder=\\\"Equipment Type\\\" [(ngModel)]=\\\"data.equipmentType\\\">\\r\\n    </mat-form-field>\\r\\n  \\r\\n  </div>\\r\\n  \\r\\n  <div class=\\\"row\\\" >\\r\\n                          \\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input matInput placeholder=\\\"Status\\\" [(ngModel)]=\\\"data.status\\\" >\\r\\n    </mat-form-field>\\r\\n  \\r\\n  </div>\\r\\n  <div class=\\\"row\\\" >\\r\\n                          \\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input matInput placeholder=\\\"Complaint Raised Date\\\" [(ngModel)]=\\\"data.complaintRaisedDate\\\">\\r\\n    </mat-form-field>\\r\\n  \\r\\n  </div>\\r\\n  <div class=\\\"row\\\" >\\r\\n                          \\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input matInput placeholder=\\\"Resolution Date\\\" [(ngModel)]=\\\"data.ResolutionDate\\\">\\r\\n    </mat-form-field>\\r\\n  \\r\\n  </div>\\r\\n  \\r\\n  \\r\\n   \\r\\n \\r\\n  </mat-dialog-content>\\r\\n  <mat-dialog-actions>\\r\\n      \\r\\n        <div class=\\\"button-row\\\">\\r\\n                                            \\r\\n          <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postEmployee1()\\\" >Update</button>\\r\\n            <button mat-raised-button color=\\\"accent\\\" (click)=\\\"onCloseCancel()\\\">Cancel</button>\\r\\n            \\r\\n          </div>    \\r\\n  \\r\\n  </mat-dialog-actions>\\r\\n    </div>\"","import { Component, OnInit , Inject} from '@angular/core';\r\nimport {MatDialog} from '@angular/material';\r\nimport { MatDialogRef } from '@angular/material';\r\nimport {MAT_DIALOG_DATA} from '@angular/material';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {DataService} from '../data.service';\r\nimport { Employ } from '../models/employ.model';\r\n\r\n@Component({\r\n  selector: 'app-opstrackermachinedialog',\r\n  templateUrl: './opstrackermachinedialog.component.html',\r\n  styleUrls: ['./opstrackermachinedialog.component.css']\r\n})\r\nexport class OpstrackermachinedialogComponent implements OnInit {\r\n  constructor(public thisdialogRef: MatDialogRef<OpstrackermachinedialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) { }\r\n\r\n  ngOnInit() {\r\n \r\n  }\r\n\r\n  onCloseConfirm() {\r\nthis.thisdialogRef.close('Confirm');\r\n  }\r\n\r\n  onCloseCancel() {\r\nthis.thisdialogRef.close('Cancel');\r\n  }\r\n\r\n}\r\n","module.exports = \".cdk-global-overlay-wrapper, .cdk-overlay-container {\\r\\n    z-index: 99999 !important;\\r\\n }\"","module.exports = \"<div>\\r\\n\\r\\n  <mat-dialog-content>\\r\\n    \\r\\n    <div class=\\\"row\\\" >\\r\\n                          \\r\\n      <mat-form-field class=\\\"example-full-width\\\">\\r\\n        <input matInput placeholder=\\\"shift\\\" [(ngModel)]=\\\"data.shift\\\">\\r\\n      </mat-form-field>\\r\\n  \\r\\n  </div>\\r\\n  <div class=\\\"row\\\" >\\r\\n                          \\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input matInput placeholder=\\\"Planned\\\" [(ngModel)]=\\\"data.planned\\\">\\r\\n    </mat-form-field>\\r\\n  \\r\\n  </div>\\r\\n  \\r\\n  <div class=\\\"row\\\" >\\r\\n                          \\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input matInput placeholder=\\\"Actual\\\" [(ngModel)]=\\\"data.actual\\\" >\\r\\n    </mat-form-field>\\r\\n  \\r\\n  </div>\\r\\n  <div class=\\\"row\\\" >\\r\\n                          \\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input matInput placeholder=\\\"Shortfall\\\" [(ngModel)]=\\\"data.shortfall\\\">\\r\\n    </mat-form-field>\\r\\n  \\r\\n  </div>\\r\\n  <div class=\\\"row\\\" >\\r\\n                          \\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input matInput placeholder=\\\"Continued\\\" [(ngModel)]=\\\"data.continuedWithOutOt\\\">\\r\\n    </mat-form-field>\\r\\n  \\r\\n  </div>\\r\\n  \\r\\n  <div class=\\\"row\\\" >\\r\\n                          \\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input matInput placeholder=\\\"Continued with OT\\\" [(ngModel)]=\\\"data.continuedWithOt\\\">\\r\\n    </mat-form-field>\\r\\n  \\r\\n  </div>\\r\\n   \\r\\n  <div class=\\\"row\\\" >\\r\\n                          \\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input matInput placeholder=\\\"New\\\" [(ngModel)]=\\\"data.newComer\\\">\\r\\n    </mat-form-field>\\r\\n  \\r\\n  </div>\\r\\n  </mat-dialog-content>\\r\\n  <mat-dialog-actions>\\r\\n      \\r\\n        <div class=\\\"button-row\\\">\\r\\n                                            \\r\\n          <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postEmployee1()\\\" >Update</button>\\r\\n            <button mat-raised-button color=\\\"accent\\\" (click)=\\\"onCloseCancel()\\\">Cancel</button>\\r\\n            \\r\\n          </div>    \\r\\n  \\r\\n  </mat-dialog-actions>\\r\\n    </div>\"","import { Component, OnInit , Inject} from '@angular/core';\r\nimport {MatDialog} from '@angular/material';\r\nimport { MatDialogRef } from '@angular/material';\r\nimport {MAT_DIALOG_DATA} from '@angular/material';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {DataService} from '../data.service';\r\nimport { Employ } from '../models/employ.model';\r\n\r\n@Component({\r\n  selector: 'app-opstrackermanpowerdialog',\r\n  templateUrl: './opstrackermanpowerdialog.component.html',\r\n  styleUrls: ['./opstrackermanpowerdialog.component.css']\r\n})\r\nexport class OpstrackermanpowerdialogComponent implements OnInit {\r\n  constructor(public thisdialogRef: MatDialogRef<OpstrackermanpowerdialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) { }\r\n\r\n  ngOnInit() {\r\n \r\n  }\r\n\r\n  onCloseConfirm() {\r\nthis.thisdialogRef.close('Confirm');\r\n  }\r\n\r\n  onCloseCancel() {\r\nthis.thisdialogRef.close('Cancel');\r\n  }\r\n\r\n}","module.exports = \"\"","module.exports = \"<p>\\r\\n  opstrackermanpowerview works!\\r\\n</p>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-opstrackermanpowerview',\r\n  templateUrl: './opstrackermanpowerview.component.html',\r\n  styleUrls: ['./opstrackermanpowerview.component.css']\r\n})\r\nexport class OpstrackermanpowerviewComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \".cdk-global-overlay-wrapper, .cdk-overlay-container {\\r\\n    z-index: 99999 !important;\\r\\n }\"","module.exports = \"<div>\\r\\n\\r\\n  <mat-dialog-content>\\r\\n    \\r\\n    <div class=\\\"row\\\" >\\r\\n                          \\r\\n      <mat-form-field class=\\\"example-full-width\\\">\\r\\n        <input matInput placeholder=\\\"Material Type\\\" [(ngModel)]=\\\"data.materialType\\\">\\r\\n      </mat-form-field>\\r\\n  \\r\\n  </div>\\r\\n  <div class=\\\"row\\\" >\\r\\n                          \\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input matInput placeholder=\\\"Commitment Date\\\" [(ngModel)]=\\\"data.commitmentDate\\\">\\r\\n    </mat-form-field>\\r\\n  \\r\\n  </div>\\r\\n  \\r\\n  <div class=\\\"row\\\" >\\r\\n                          \\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input matInput placeholder=\\\"Indent Submission Date\\\" [(ngModel)]=\\\"data.indentSubmissionDate\\\" >\\r\\n    </mat-form-field>\\r\\n  \\r\\n  </div>\\r\\n  <div class=\\\"row\\\" >\\r\\n                          \\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input matInput placeholder=\\\"Material Supply Date\\\" [(ngModel)]=\\\"data.materialSupplyDate\\\">\\r\\n    </mat-form-field>\\r\\n  \\r\\n  </div>\\r\\n  <div class=\\\"row\\\" >\\r\\n                          \\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input matInput placeholder=\\\"Uniform Supply Date\\\" [(ngModel)]=\\\"data.uniformSupplyDate\\\">\\r\\n    </mat-form-field>\\r\\n  \\r\\n  </div>\\r\\n  \\r\\n  <div class=\\\"row\\\" >\\r\\n                          \\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input matInput placeholder=\\\"Status\\\" [(ngModel)]=\\\"data.status\\\">\\r\\n    </mat-form-field>\\r\\n  \\r\\n  </div>\\r\\n   \\r\\n  <div class=\\\"row\\\" >\\r\\n                          \\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input matInput placeholder=\\\"Remarks\\\" [(ngModel)]=\\\"data.remarks\\\">\\r\\n    </mat-form-field>\\r\\n  \\r\\n  </div>\\r\\n  </mat-dialog-content>\\r\\n  <mat-dialog-actions>\\r\\n      \\r\\n        <div class=\\\"button-row\\\">\\r\\n                                            \\r\\n          <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postEmployee1()\\\" >Update</button>\\r\\n            <button mat-raised-button color=\\\"accent\\\" (click)=\\\"onCloseCancel()\\\">Cancel</button>\\r\\n            \\r\\n          </div>    \\r\\n  \\r\\n  </mat-dialog-actions>\\r\\n    </div>\"","import { Component, OnInit , Inject} from '@angular/core';\r\nimport {MatDialog} from '@angular/material';\r\nimport { MatDialogRef } from '@angular/material';\r\nimport {MAT_DIALOG_DATA} from '@angular/material';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {DataService} from '../data.service';\r\nimport { Employ } from '../models/employ.model';\r\n\r\n@Component({\r\n  selector: 'app-opstrackermaterialdialog',\r\n  templateUrl: './opstrackermaterialdialog.component.html',\r\n  styleUrls: ['./opstrackermaterialdialog.component.css']\r\n})\r\nexport class OpstrackermaterialdialogComponent implements OnInit {\r\n\r\n  constructor(public thisdialogRef: MatDialogRef<OpstrackermaterialdialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) { }\r\n\r\n  ngOnInit() {\r\n \r\n  }\r\n\r\n  onCloseConfirm() {\r\nthis.thisdialogRef.close('Confirm');\r\n  }\r\n\r\n  onCloseCancel() {\r\nthis.thisdialogRef.close('Cancel');\r\n  }\r\n\r\n}\r\n\r\n","module.exports = \"\"","module.exports = \"<p>\\r\\n  opstrackerview works!\\r\\n</p>\\r\\n\"","import {Component, OnInit, ViewChild , Input} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {  MatDialog,  MatDialogRef , MatDialogConfig , MAT_DIALOG_DATA} from '@angular/material';\r\nimport {MatTableDataSource} from '@angular/material';\r\nimport {MatPaginator, MatSort} from '@angular/material';\r\nimport {merge, Observable, of as observableOf} from 'rxjs';\r\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\r\nimport {DataService} from '../data.service';\r\nimport { Employ } from '../models/employ.model';\r\nimport { MatDialogModule } from '@angular/material';\r\nimport {EmploydialogComponent} from '../employdialog/employdialog.component';\r\n\r\n@Component({\r\n  selector: 'app-opstrackerview',\r\n  templateUrl: './opstrackerview.component.html',\r\n  styleUrls: ['./opstrackerview.component.css']\r\n})\r\nexport class OpstrackerviewComponent implements OnInit {\r\n  @Input() public emp1: Employ;\r\n  dialogResult=\"\";\r\n  itemsPerPage: number = 10;\r\n  postsPerPage: number[] = [5, 10, 25];\r\nid;\r\n  emp:Employ[] = [];\r\n    emp2: Employees[] = [];\r\n  empid=new Employ();\r\n   exampleDatabase: ExampleHttpDao | null;\r\n\r\n  displayedColumns: string[] = ['id','name', 'code',  'designation' , 'mail', 'mob', 'actionsColumn' ];\r\n  /* //displayedColumns: string[] = [  'code', 'name', 'designation', 'mail' , 'phone']; */\r\n\r\n\r\n\r\n  resultsLength = 0;\r\n  isLoadingResults = true;\r\n  isRateLimitReached = false;\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  \r\n  page: (Observable<number>|any);\r\n  constructor(private http: HttpClient, private data1: DataService, private dialog: MatDialog) {\r\n\r\n   }\r\n   \r\n  /*  listEmployees()\r\n   {\r\n     this.data.getemployee(0, 2).subscribe(\r\n       data => this.emp = data['content']\r\n      \r\n      \r\n     );\r\n     console.log(this.data);\r\n    \r\n   } */\r\n   /* pageChanged(event) {\r\n    this.page = event.page;\r\n    \r\n    this.itemsPerPage = event.itemsPerPage;\r\n    this.loadEmployeeByPage(this.page, this.itemsPerPage);\r\n} */\r\n/* loadEmployeeByPage(page: number, rows: number) {\r\n \r\n  this.data.getemployee(page, rows).subscribe(\r\n    data => this.emp = data['content']\r\n  \r\n    );\r\n\r\n} */\r\n\r\n   // tslint:disable-next-line:member-ordering\r\n\r\n\r\n    /* openDialog() {\r\n    const dialogRef = this.dialog.open(DialogBodyComponent, {\r\n      height: '400px',\r\n  width: '600px'\r\n      \r\n    });\r\n  }  */\r\n\r\n  ngOnInit() {\r\n     this.exampleDatabase = new ExampleHttpDao(this.http);\r\n\r\n    // If the user changes the sort order, reset back to the first page.\r\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\r\n\r\n    merge(this.paginator.page)\r\n      .pipe(\r\n        startWith({}),\r\n        switchMap(() => {\r\n           console.log('enter1');\r\n          this.isLoadingResults = true;\r\n          return this.exampleDatabase!.getRepoIssues(this.paginator.pageIndex,\r\n           8);\r\n\r\n        }),\r\n        map(data => {\r\n          console.log('ggg');\r\n          // Flip flag to show that loading has finished.\r\n          this.isLoadingResults = false;\r\n          this.isRateLimitReached = false;\r\n          this.resultsLength = data['totalElements'];\r\n console.log(data['totalElements']);\r\n          return data;\r\n        }),\r\n        catchError(() => {\r\n          console.log('errr');\r\n          this.isLoadingResults = false;\r\n          // Catch if the GitHub API has reached its rate limit. Return empty data.\r\n          this.isRateLimitReached = true;\r\n          return observableOf([]);\r\n        })\r\n      ).subscribe(data => this.emp2 = data['content']);\r\n   // this.listEmployees();\r\n  }\r\n openDialog(id:number) {\r\n  \r\n  const item1 = this.emp2.find(i => i.id === id);\r\n \r\n    const dialogRef = this.dialog.open(EmploydialogComponent, {\r\n      width: '300px',\r\n      data:item1\r\n      \r\n          });\r\n          dialogRef.afterClosed().subscribe(result => {\r\n            console.log('dialog closed:${result}');\r\n            this.dialogResult = result;\r\n          });\r\n  \r\n  }\r\n}\r\n\r\n  export interface Employees {\r\n    id: number;\r\n       code: number;\r\n       designation: string;\r\n       name: string;\r\n       mail: string;\r\n       mob: number;\r\n   }\r\n   \r\n   /** An example database that the data source uses to retrieve data for the table. */\r\n   export class ExampleHttpDao { \r\n    \r\n   \r\n     constructor(private http: HttpClient) {}\r\n    \r\n     getRepoIssues(page: number,records:number): Observable<Employees[]> {\r\n       const href = 'http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/employee/search/'+ page + '/' + records;\r\n      \r\n   \r\n       return this.http.get<Employees[]>(href);\r\n     }\r\n   }\r\n","module.exports = \".per-page nav p {\\r\\n   \\r\\n    margin: 25px 10px;\\r\\n    font-weight: bold;\\r\\n    padding: 2px 0;\\r\\n}\\r\\n\\r\\n.per-page nav .pagination {\\r\\n    float: right;\\r\\n}\"","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-6\\\">\\r\\n    <nav aria-label=\\\"Pagination\\\" >\\r\\n      <ul class=\\\"pagination\\\">\\r\\n        <li [class.disabled]=\\\"current == 1\\\">\\r\\n          <a href=\\\"javascript:;\\\"\\r\\n             (click)=\\\"setPage(current-1, itemsPerPage)\\\"\\r\\n             aria-label=\\\"Previous\\\">\\r\\n            <span aria-hidden=\\\"true\\\">&laquo;</span>\\r\\n          </a>\\r\\n        </li>\\r\\n        <li *ngFor=\\\"let page of pages;\\\" [class.active]=\\\"page == current\\\">\\r\\n          <a href=\\\"javascript:;\\\" (click)=\\\"setPage(page, itemsPerPage)\\\">{{ page }}</a>\\r\\n        </li>\\r\\n        <li [class.disabled]=\\\"current == maxPages\\\">\\r\\n          <a href=\\\"javascript:;\\\" (click)=\\\"setPage(current+1 ,itemsPerPage)\\\" aria-label=\\\"Next\\\">\\r\\n            <span aria-hidden=\\\"true\\\">&raquo;</span>\\r\\n          </a>\\r\\n        </li>\\r\\n      </ul>\\r\\n    </nav>\\r\\n  </div>\\r\\n  <div class=\\\"col-lg-6 text-right per-page\\\">\\r\\n    <nav aria-label=\\\"Anzahl der Beiträge pro Seite\\\">\\r\\n      <p>Anzahl der Beiträge pro Seite:</p>\\r\\n      <ul class=\\\"pagination\\\">\\r\\n        <li *ngFor=\\\"let perPage of postsPerPage;\\\" [class.active]=\\\"perPage == itemsPerPage\\\">\\r\\n          <a href=\\\"javascript:;\\\" (click)=\\\"setPage(current, perPage)\\\">{{ perPage }}</a>\\r\\n        </li>\\r\\n      </ul>\\r\\n    </nav>\\r\\n  </div>\\r\\n</div>\"","\r\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Page } from './pagination';\r\n\r\n@Component({\r\n  selector: 'app-pagination',\r\n  templateUrl: './pagination.component.html',\r\n  styleUrls: ['./pagination.component.css']\r\n})\r\nexport class PaginationComponent implements OnInit {\r\n\r\n  @Input() maxPages: number;\r\n  @Input() current: number;\r\n  @Input() postsPerPage: number[];\r\n  @Input() itemsPerPage: number;\r\n\r\n  @Output() changePage = new EventEmitter();\r\n\r\n  pages: any[] = [];\r\n  pageModel: Page = {\r\n    page: this.current,\r\n    itemsPerPage: this.itemsPerPage\r\n  };\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    if (this.maxPages) {\r\n      this.createPages();\r\n    }\r\n  }\r\n\r\n  setPage(page: number, perPage: number) {\r\n    console.log(page);\r\n    this.pageModel.page = page;\r\n    this.pageModel.itemsPerPage = perPage;\r\n    this.changePage.emit(this.pageModel);\r\n  }\r\n\r\n  createPages() {\r\n    for(let i=1; i <= this.maxPages; i++) {\r\n      this.pages.push(i);\r\n    }\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"example-container mat-elevation-z8\\\">\\r\\n  <div class=\\\"example-loading-shade\\\"\\r\\n       *ngIf=\\\"isLoadingResults || isRateLimitReached\\\">\\r\\n    <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\r\\n    <div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\r\\n      GitHub's API rate limit has been reached. It will be reset in one minute.\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"example-table-container\\\">\\r\\n\\r\\n    <table mat-table [dataSource]=\\\"data\\\" class=\\\"example-table\\\"\\r\\n          >\\r\\n      <!-- Number Column -->\\r\\n      <ng-container matColumnDef=\\\"code\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef>#</th>\\r\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.code}}</td>\\r\\n      </ng-container>\\r\\n\\r\\n      <!-- Title Column -->\\r\\n      <ng-container matColumnDef=\\\"name\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef>Title</th>\\r\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.name}}</td>\\r\\n      </ng-container>\\r\\n\\r\\n      <!-- State Column -->\\r\\n      <ng-container matColumnDef=\\\"designation\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.designation}}</td>\\r\\n      </ng-container>\\r\\n      <ng-container matColumnDef=\\\"mail\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.mail}}</td>\\r\\n      </ng-container>\\r\\n      <ng-container matColumnDef=\\\"phone\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef>State</th>\\r\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.phone}}</td>\\r\\n      </ng-container>\\r\\n     \\r\\n\\r\\n      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n      <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n    </table>\\r\\n  </div>\\r\\n\\r\\n  <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"10\\\"></mat-paginator>\\r\\n</div>\"","\r\nimport {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {MatPaginator, MatSort} from '@angular/material';\r\nimport {merge, Observable, of as observableOf} from 'rxjs';\r\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\r\n@Component({\r\n  selector: 'app-report',\r\n  templateUrl: './report.component.html',\r\n  styleUrls: ['./report.component.css']\r\n})\r\nexport class ReportComponent implements OnInit {\r\n  displayedColumns: string[] = [  'code', 'name', 'designation', 'mail' , 'phone'];\r\n\r\n  resultsLength = 0;\r\n  isLoadingResults = true;\r\n  isRateLimitReached = false;\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  ngOnInit() {\r\n    // If the user changes the sort order, reset back to the first page.\r\n   // this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\r\n\r\n   \r\n}\r\n}\r\n\r\n","module.exports = \"\"","module.exports = \"<p>\\r\\n  sitedialog works!\\r\\n</p>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-sitedialog',\r\n  templateUrl: './sitedialog.component.html',\r\n  styleUrls: ['./sitedialog.component.css']\r\n})\r\nexport class SitedialogComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<table mat-table [dataSource]=\\\"data\\\"  style=\\\"width:100%\\\"s>\\r\\n\\r\\n  <!--- Note that these columns can be defined in any order.\\r\\n        The actual rendered columns are set as a property on the row definition\\\" -->\\r\\n\\r\\n  <!-- Position Column -->\\r\\n  <ng-container matColumnDef=\\\"id\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Id. </th>\\r\\n    <td mat-cell *matCellDef=\\\"let row\\\"> {{row.id}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <!-- Name Column -->\\r\\n  <ng-container matColumnDef=\\\"typeOfService\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Type of Service </th>\\r\\n    <td mat-cell *matCellDef=\\\"let row\\\"> {{row.typeOfService}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <!-- Weight Column -->\\r\\n  <ng-container matColumnDef=\\\"machineType\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Machine Type </th>\\r\\n    <td mat-cell *matCellDef=\\\"let row\\\"> {{row.machineType}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <!-- Symbol Column -->\\r\\n  <ng-container matColumnDef=\\\"equipmentType\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Equipment Type </th>\\r\\n    <td mat-cell *matCellDef=\\\"let row\\\"> {{row.equipmentType}} </td>\\r\\n  </ng-container>\\r\\n  <ng-container matColumnDef=\\\"modelNo\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Model No </th>\\r\\n    <td mat-cell *matCellDef=\\\"let row\\\"> {{row.modelNo}} </td>\\r\\n  </ng-container>\\r\\n  <ng-container matColumnDef=\\\"serialNo\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Serial No </th>\\r\\n    <td mat-cell *matCellDef=\\\"let row\\\"> {{row.serialNo}} </td>\\r\\n  </ng-container>\\r\\n  \\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n\"","import { Component, OnInit , Inject} from '@angular/core';\r\nimport {MatDialog} from '@angular/material';\r\nimport { MatDialogRef } from '@angular/material';\r\nimport {MAT_DIALOG_DATA} from '@angular/material';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {DataService} from '../data.service';\r\nimport { Employ } from '../models/employ.model';\r\n\r\n@Component({\r\n  selector: 'app-sitemachinedailog',\r\n  templateUrl: './sitemachinedailog.component.html',\r\n  styleUrls: ['./sitemachinedailog.component.css']\r\n})\r\nexport class SitemachinedailogComponent implements OnInit {\r\n  displayedColumns: string[] = ['id', 'typeOfService', 'machineType', 'equipmentType','modelNo','serialNo'];\r\n  constructor(public thisdialogRef: MatDialogRef<SitemachinedailogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n  onCloseConfirm() {\r\n    this.thisdialogRef.close('Confirm');\r\n      }\r\n    \r\n      onCloseCancel() {\r\n    this.thisdialogRef.close('Cancel');\r\n      }\r\n}\r\n","module.exports = \"\"","module.exports = \"<table mat-table [dataSource]=\\\"data\\\"  style=\\\"width:100%\\\"s>\\r\\n\\r\\n    <!--- Note that these columns can be defined in any order.\\r\\n          The actual rendered columns are set as a property on the row definition\\\" -->\\r\\n  \\r\\n    <!-- Position Column -->\\r\\n    <ng-container matColumnDef=\\\"id\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Id. </th>\\r\\n      <td mat-cell *matCellDef=\\\"let row\\\"> {{row.id}} </td>\\r\\n    </ng-container>\\r\\n  \\r\\n    <!-- Name Column -->\\r\\n    <ng-container matColumnDef=\\\"typeOfService\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Type of Service </th>\\r\\n      <td mat-cell *matCellDef=\\\"let row\\\"> {{row.typeOfService}} </td>\\r\\n    </ng-container>\\r\\n  \\r\\n    <!-- Weight Column -->\\r\\n    <ng-container matColumnDef=\\\"planned\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Planned </th>\\r\\n      <td mat-cell *matCellDef=\\\"let row\\\"> {{row.planned}} </td>\\r\\n    </ng-container>\\r\\n  \\r\\n    <!-- Symbol Column -->\\r\\n    <ng-container matColumnDef=\\\"startTime\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Start Time </th>\\r\\n      <td mat-cell *matCellDef=\\\"let row\\\"> {{row.startTime}} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"endTime\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef> End Time </th>\\r\\n        <td mat-cell *matCellDef=\\\"let row\\\"> {{row.endTime}} </td>\\r\\n      </ng-container>\\r\\n  \\r\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n  </table>\\r\\n  \"","import { Component, OnInit , Inject} from '@angular/core';\r\nimport {MatDialog} from '@angular/material';\r\nimport { MatDialogRef } from '@angular/material';\r\nimport {MAT_DIALOG_DATA} from '@angular/material';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {DataService} from '../data.service';\r\nimport { Employ } from '../models/employ.model';\r\n\r\n@Component({\r\n  selector: 'app-sitemanpowerdialog',\r\n  templateUrl: './sitemanpowerdialog.component.html',\r\n  styleUrls: ['./sitemanpowerdialog.component.css']\r\n})\r\nexport class SitemanpowerdialogComponent implements OnInit {\r\n  displayedColumns: string[] = ['id', 'typeOfService', 'planned', 'startTime','endTime'];\r\n  \r\n  constructor(public thisdialogRef: MatDialogRef<SitemanpowerdialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n  onCloseConfirm() {\r\n    this.thisdialogRef.close('Confirm');\r\n      }\r\n    \r\n      onCloseCancel() {\r\n    this.thisdialogRef.close('Cancel');\r\n      }\r\n}\r\n","module.exports = \"\"","module.exports = \"<table mat-table [dataSource]=\\\"data\\\"  style=\\\"width:100%\\\"s>\\r\\n\\r\\n  <!--- Note that these columns can be defined in any order.\\r\\n        The actual rendered columns are set as a property on the row definition\\\" -->\\r\\n\\r\\n  <!-- Position Column -->\\r\\n  <ng-container matColumnDef=\\\"id\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Id. </th>\\r\\n    <td mat-cell *matCellDef=\\\"let row\\\"> {{row.id}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <!-- Name Column -->\\r\\n  <ng-container matColumnDef=\\\"typeOfService\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Type of Service </th>\\r\\n    <td mat-cell *matCellDef=\\\"let row\\\"> {{row.typeOfService}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <!-- Weight Column -->\\r\\n  <ng-container matColumnDef=\\\"materialType\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Material Type </th>\\r\\n    <td mat-cell *matCellDef=\\\"let row\\\"> {{row.materialType}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <!-- Symbol Column -->\\r\\n  <ng-container matColumnDef=\\\"commitmentDate\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Commiment Date </th>\\r\\n    <td mat-cell *matCellDef=\\\"let row\\\"> {{row.commitmentDate}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  \\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n\"","import { Component, OnInit , Inject} from '@angular/core';\r\nimport {MatDialog} from '@angular/material';\r\nimport { MatDialogRef } from '@angular/material';\r\nimport {MAT_DIALOG_DATA} from '@angular/material';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {DataService} from '../data.service';\r\nimport { Employ } from '../models/employ.model';\r\n\r\n@Component({\r\n  selector: 'app-sitematerialdialog',\r\n  templateUrl: './sitematerialdialog.component.html',\r\n  styleUrls: ['./sitematerialdialog.component.css']\r\n})\r\nexport class SitematerialdialogComponent implements OnInit {\r\n  displayedColumns: string[] = ['id', 'typeOfService', 'materialType', 'commitmentDate'];\r\n  constructor(public thisdialogRef: MatDialogRef<SitematerialdialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n  onCloseConfirm() {\r\n    this.thisdialogRef.close('Confirm');\r\n      }\r\n    \r\n      onCloseCancel() {\r\n    this.thisdialogRef.close('Cancel');\r\n      }\r\n}\r\n","module.exports = \"\"","module.exports = \"<p>\\r\\n  siteupdate works!\\r\\n</p>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-siteupdate',\r\n  templateUrl: './siteupdate.component.html',\r\n  styleUrls: ['./siteupdate.component.css']\r\n})\r\nexport class SiteupdateComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \".algnleft{\\r\\n    margin:20px \\r\\n}\\r\\n.div-left{\\r\\n    float:right;\\r\\n    padding-right:20px;\\r\\n}\\r\\n.mat-cell:nth-child(2), .mat-header-cell:nth-child(2) {\\r\\n    flex: 0 0 200px;\\r\\n}\\r\\n.martop{\\r\\n    margin-top: 14px;\\r\\n}\\r\\n.spinnerabove {\\r\\n    position:absolute;\\r\\n    top:50%;\\r\\n    left:50%;\\r\\n   \\r\\n    z-index: 10;\\r\\n  }\\r\\n  \"","module.exports = \"<div class=\\\"algnleft\\\">\\r\\n    <div class=\\\"div-left\\\"><button mat-mini-fab>\\r\\n        <mat-icon aria-label=\\\"\\\" routerLink=\\\"../masterdata\\\">arrow_back</mat-icon>\\r\\n      </button></div>\\r\\n    \\r\\n        <!-- <div class=\\\"example-loading-shade spinnerabove \\\"\\r\\n             *ngIf=\\\"isLoadingResults || isRateLimitReached\\\" >\\r\\n          <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\r\\n          <div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\r\\n            \\r\\n          </div>\\r\\n        </div>\\r\\n       -->\\r\\n        \\r\\n      \\r\\n          <table mat-table [dataSource]=\\\"site2\\\" class=\\\"mat-elevation-z8\\\"\\r\\n                 matSort matSortActive=\\\"id\\\" matSortDisableClear matSortDirection=\\\"asc\\\" style=\\\"width:100%\\\">\\r\\n            <!-- Number Column -->\\r\\n            \\r\\n            <!-- Title Column -->\\r\\n            <ng-container  matColumnDef=\\\"id\\\">\\r\\n                <th mat-header-cell  *matHeaderCellDef>Id</th>\\r\\n                <td mat-cell *matCellDef=\\\"let row\\\">{{row.id}}</td>\\r\\n              </ng-container>\\r\\n        \\r\\n    \\r\\n <ng-container  matColumnDef=\\\"name\\\">\\r\\n              <th mat-header-cell  *matHeaderCellDef>Name</th>\\r\\n              <td mat-cell *matCellDef=\\\"let row\\\">{{row.name}}</td>\\r\\n            </ng-container> \\r\\n      \\r\\n            <!-- State Column -->\\r\\n          <!--   <ng-container matColumnDef=\\\"code\\\">\\r\\n              <th mat-header-cell *matHeaderCellDef>Code</th>\\r\\n              <td mat-cell *matCellDef=\\\"let row\\\">{{row.code}}</td>\\r\\n            </ng-container> -->\\r\\n      \\r\\n            <!-- Created Column -->\\r\\n            <ng-container matColumnDef=\\\"contractType\\\">\\r\\n              <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                Contract Type\\r\\n              </th>\\r\\n              <td mat-cell *matCellDef=\\\"let row\\\">{{row.contractType}}</td>\\r\\n            </ng-container>\\r\\n    \\r\\n           <!--  <ng-container matColumnDef=\\\"Contract Type\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\r\\n                  Mail\\r\\n                </th>\\r\\n                <td mat-cell *matCellDef=\\\"let row\\\">{{row.contractType}}</td>\\r\\n              </ng-container> -->\\r\\n    \\r\\n             <!-- <ng-container matColumnDef=\\\"types\\\">\\r\\n                  <th mat-header-cell *matHeaderCellDef>Action</th>\\r\\n                  <mat-cell *matCellDef=\\\"let row\\\">\\r\\n                      <button mat-raised-button color=\\\"accent\\\" (click)=\\\"postEscalationType()\\\">Manpower</button>\\r\\n                      \\r\\n                </mat-cell>\\r\\n             \\r\\n              </ng-container>  -->\\r\\n              <ng-container matColumnDef=\\\"actionsColumn\\\">\\r\\n                  <th mat-header-cell *matHeaderCellDef>Action</th>\\r\\n                  \\r\\n                  <mat-cell *matCellDef=\\\"let row\\\">\\r\\n                      <button mat-raised-button color=\\\"accent\\\" (click)=\\\"getmanpower(row.id)\\\" style=\\\"margin-left:5px\\\">Manpower</button>\\r\\n                      <button mat-raised-button color=\\\"accent\\\" (click)=\\\"getmaterial(row.id)\\\" style=\\\"margin-left:5px\\\">Material</button>\\r\\n                      <button mat-raised-button color=\\\"accent\\\" (click)=\\\"getmachine(row.id)\\\" style=\\\"margin-left:5px\\\">Machine</button>\\r\\n                      <button mat-icon-button>\\r\\n                          <mat-icon matTooltip=\\\"Update\\\" aria-label=\\\"Example icon-button with a heart icon\\\" (click)=\\\"openDialog(row.id)\\\" >update</mat-icon>\\r\\n                        </button>\\r\\n                        <button mat-icon-button>\\r\\n                            <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\"  matTooltip=\\\"Delete\\\" (click)=\\\"openDialog(row.id)\\\">delete</mat-icon>\\r\\n                          </button>\\r\\n                     \\r\\n                  </mat-cell>\\r\\n             \\r\\n            </ng-container>\\r\\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n          </table>\\r\\n       \\r\\n      \\r\\n          <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"8\\\"></mat-paginator>\\r\\n      \\r\\n    </div>\"","import {Component, OnInit, ViewChild , Input} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {  MatDialog,  MatDialogRef , MatDialogConfig , MAT_DIALOG_DATA} from '@angular/material';\r\nimport {MatTableDataSource} from '@angular/material';\r\nimport {MatPaginator, MatSort} from '@angular/material';\r\nimport {merge, Observable, of as observableOf} from 'rxjs';\r\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\r\nimport {DataService} from '../data.service';\r\nimport { Site } from '../models/site.model';\r\nimport { MatDialogModule } from '@angular/material';\r\nimport {SitemanpowerdialogComponent} from '../sitemanpowerdialog/sitemanpowerdialog.component';\r\nimport { ManPower } from '../models/manpower.model';\r\nimport { Material } from '../models/material.model';\r\nimport { Machine } from '../models/machine.model';\r\nimport { Sitemachinedialog } from '../models/sitemachinedialog.model';\r\nimport { Sitemanpowerdialog } from '../models/sitemanpowerdialog.model';\r\nimport { Sitematerialdialog } from '../models/sitematerialdialog.model';\r\nimport {SitematerialdialogComponent} from '../sitematerialdialog/sitematerialdialog.component';\r\nimport { SitemachinedailogComponent } from '../sitemachinedailog/sitemachinedailog.component';\r\n@Component({\r\n  selector: 'app-siteview',\r\n  templateUrl: './siteview.component.html',\r\n  styleUrls: ['./siteview.component.css']\r\n})\r\nexport class SiteviewComponent implements OnInit {\r\n // @Input() public emp1: Employ;\r\n  dialogResult=\"\";\r\n  itemsPerPage: number = 10;\r\n  postsPerPage: number[] = [5, 10, 25];\r\nid;\r\n  site:Site[] = [];\r\n    site2: Sites[] = [];\r\n    sitemanpowerdialog = new Sitemanpowerdialog();\r\n    sitematerialdialog = new Sitematerialdialog();\r\n    sitemachinedialog = new Sitemachinedialog();\r\n // empid=new Employ();\r\n   exampleDatabase: ExampleHttpDao | null;\r\n\r\n  displayedColumns: string[] = ['id',  'name' , 'contractType','actionsColumn' ];\r\n  /* //displayedColumns: string[] = [  'code', 'name', 'designation', 'mail' , 'phone']; */\r\n\r\n\r\n\r\n  resultsLength = 0;\r\n  isLoadingResults = true;\r\n  isRateLimitReached = false;\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  \r\n  page: (Observable<number>|any);\r\n  constructor(private http: HttpClient, private data1: DataService, private dialog: MatDialog) {\r\n\r\n   }\r\n   \r\n  /*  listEmployees()\r\n   {\r\n     this.data.getemployee(0, 2).subscribe(\r\n       data => this.emp = data['content']\r\n      \r\n      \r\n     );\r\n     console.log(this.data);\r\n    \r\n   } */\r\n   /* pageChanged(event) {\r\n    this.page = event.page;\r\n    \r\n    this.itemsPerPage = event.itemsPerPage;\r\n    this.loadEmployeeByPage(this.page, this.itemsPerPage);\r\n} */\r\n/* loadEmployeeByPage(page: number, rows: number) {\r\n \r\n  this.data.getemployee(page, rows).subscribe(\r\n    data => this.emp = data['content']\r\n  \r\n    );\r\n\r\n} */\r\n\r\n   // tslint:disable-next-line:member-ordering\r\n\r\n\r\n    /* openDialog() {\r\n    const dialogRef = this.dialog.open(DialogBodyComponent, {\r\n      height: '400px',\r\n  width: '600px'\r\n      \r\n    });\r\n  }  */\r\n\r\n  ngOnInit() {\r\n     this.exampleDatabase = new ExampleHttpDao(this.http);\r\n\r\n    // If the user changes the sort order, reset back to the first page.\r\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\r\n\r\n    merge(this.paginator.page)\r\n      .pipe(\r\n        startWith({}),\r\n        switchMap(() => {\r\n           console.log('enter1');\r\n          this.isLoadingResults = true;\r\n          return this.exampleDatabase!.getRepoIssues(this.paginator.pageIndex,\r\n           8);\r\n\r\n        }),\r\n        map(data => {\r\n          console.log('ggg');\r\n          // Flip flag to show that loading has finished.\r\n          this.isLoadingResults = false;\r\n          this.isRateLimitReached = false;\r\n        //  this.resultsLength = data['totalElements'];\r\n //console.log(data['totalElements']);\r\n          return data;\r\n        }),\r\n        catchError(() => {\r\n          console.log('errr');\r\n          this.isLoadingResults = false;\r\n          // Catch if the GitHub API has reached its rate limit. Return empty data.\r\n          this.isRateLimitReached = true;\r\n          return observableOf([]);\r\n        })\r\n      ).subscribe(data => this.site2 = data);\r\n   // this.listEmployees();\r\n  }\r\n getmanpower(id:number) {\r\n  \r\n  //const item1 = this.site2.find(i => i.id === id);\r\n  console.log(id);\r\n  this.data1.getSitemanpower(id).subscribe(\r\n    \r\n    data => {\r\n      this.sitemanpowerdialog=data['manPowerDTO'];\r\n      console.log(this.sitemanpowerdialog);\r\n      \r\n      const dialogRef = this.dialog.open(SitemanpowerdialogComponent, {\r\n        width: '600px',\r\n        data:this.sitemanpowerdialog\r\n        \r\n            });\r\n            dialogRef.afterClosed().subscribe(result => {\r\n              console.log('dialog closed:${result}');\r\n              this.dialogResult = result;\r\n            });\r\n\r\n    }\r\n  );\r\n  \r\n \r\n    \r\n  \r\n  }\r\n  getmaterial(id:number) {\r\n  \r\n    //const item1 = this.site2.find(i => i.id === id);\r\n    console.log(id);\r\n    this.data1.getSitematerial(id).subscribe(\r\n      \r\n      data => {\r\n        this.sitematerialdialog=data['materialDTO'];\r\n        console.log(this.sitematerialdialog);\r\n        \r\n        const dialogRef = this.dialog.open(SitematerialdialogComponent, {\r\n          width: '600px',\r\n          data:this.sitematerialdialog\r\n          \r\n              });\r\n              dialogRef.afterClosed().subscribe(result => {\r\n                console.log('dialog closed:${result}');\r\n                this.dialogResult = result;\r\n              });\r\n  \r\n      }\r\n    );\r\n    \r\n   \r\n      \r\n    \r\n    }\r\n\r\n\r\n    getmachine(id:number) {\r\n  \r\n      //const item1 = this.site2.find(i => i.id === id);\r\n      console.log(id);\r\n      this.data1.getSitemachine(id).subscribe(\r\n        \r\n        data => {\r\n          this.sitemachinedialog=data['machineDTO'];\r\n          console.log(this.sitemachinedialog);\r\n          \r\n          const dialogRef = this.dialog.open(SitemachinedailogComponent, {\r\n            width: '600px',\r\n            data:this.sitemachinedialog\r\n            \r\n                });\r\n                dialogRef.afterClosed().subscribe(result => {\r\n                  console.log('dialog closed:${result}');\r\n                  this.dialogResult = result;\r\n                });\r\n    \r\n        }\r\n      );\r\n      \r\n     \r\n        \r\n      \r\n      }\r\n}\r\n\r\nexport interface Sites {\r\n  id: number;\r\n   \r\n    name: string;\r\n    address: string;\r\n    contractType: string;\r\n   // regionalManagerId: number;\r\n  //  seniorManagerId: number;\r\n  //  asstSeniorManagerId: number;\r\n   // siteInchargeId: number;\r\n  //  manPowerDTO: Array<ManPower>;\r\n  //  materialDTO: Array<Material>;\r\n  //  machineDTO: Array<Machine>;\r\n }\r\n \r\n /** An example database that the data source uses to retrieve data for the table. */\r\n export class ExampleHttpDao { \r\n  \r\n \r\n   constructor(private http: HttpClient) {}\r\n  \r\n   getRepoIssues(page: number,records:number): Observable<Sites[]> {\r\n     const href = 'http://ec2-13-233-19-198.ap-south-1.compute.amazonaws.com:8080/uds/site/search/'+ page + '/' + records;\r\n    console.log(href);\r\n \r\n     return this.http.get<Sites[]>(href);\r\n   }\r\n }\r\n","import { Injectable } from '@angular/core';\r\ndeclare var toastr:any; \r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToastService {\r\n\r\n  constructor() { }\r\nSuccess(tittle:string,message?:string){\r\n  toastr.success(tittle,message);\r\n}\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, for easier debugging, you can ignore zone related error\r\n * stack frames such as `zone.run`/`zoneDelegate.invokeTask` by importing the\r\n * below file. Don't forget to comment it out in production mode\r\n * because it will have a performance impact when errors are thrown\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}